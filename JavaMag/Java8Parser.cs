//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\JavaMag\JavaMutatingSystem\JavaMag\Java8.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JavaMag {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class Java8Parser : Parser {
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, IntegerLiteral=51, FloatingPointLiteral=52, BooleanLiteral=53, 
		CharacterLiteral=54, StringLiteral=55, NullLiteral=56, LPAREN=57, RPAREN=58, 
		LBRACE=59, RBRACE=60, LBRACK=61, RBRACK=62, SEMI=63, COMMA=64, DOT=65, 
		ASSIGN=66, GT=67, LT=68, BANG=69, TILDE=70, QUESTION=71, COLON=72, EQUAL=73, 
		LE=74, GE=75, NOTEQUAL=76, AND=77, OR=78, INC=79, DEC=80, ADD=81, SUB=82, 
		MUL=83, DIV=84, BITAND=85, BITOR=86, CARET=87, MOD=88, ARROW=89, COLONCOLON=90, 
		ADD_ASSIGN=91, SUB_ASSIGN=92, MUL_ASSIGN=93, DIV_ASSIGN=94, AND_ASSIGN=95, 
		OR_ASSIGN=96, XOR_ASSIGN=97, MOD_ASSIGN=98, LSHIFT_ASSIGN=99, RSHIFT_ASSIGN=100, 
		URSHIFT_ASSIGN=101, Identifier=102, AT=103, ELLIPSIS=104, WS=105, COMMENT=106, 
		LINE_COMMENT=107;
	public const int
		RULE_literal = 0, RULE_type = 1, RULE_primitiveType = 2, RULE_numericType = 3, 
		RULE_integralType = 4, RULE_floatingPointType = 5, RULE_referenceType = 6, 
		RULE_classOrInterfaceType = 7, RULE_classType = 8, RULE_classType_lf_classOrInterfaceType = 9, 
		RULE_classType_lfno_classOrInterfaceType = 10, RULE_interfaceType = 11, 
		RULE_interfaceType_lf_classOrInterfaceType = 12, RULE_interfaceType_lfno_classOrInterfaceType = 13, 
		RULE_typeVariable = 14, RULE_arrayType = 15, RULE_dims = 16, RULE_typeParameter = 17, 
		RULE_typeParameterModifier = 18, RULE_typeBound = 19, RULE_additionalBound = 20, 
		RULE_typeArguments = 21, RULE_typeArgumentList = 22, RULE_typeArgument = 23, 
		RULE_wildcard = 24, RULE_wildcardBounds = 25, RULE_packageName = 26, RULE_typeName = 27, 
		RULE_packageOrTypeName = 28, RULE_expressionName = 29, RULE_methodName = 30, 
		RULE_ambiguousName = 31, RULE_compilationUnit = 32, RULE_packageDeclaration = 33, 
		RULE_packageModifier = 34, RULE_importDeclaration = 35, RULE_singleTypeImportDeclaration = 36, 
		RULE_typeImportOnDemandDeclaration = 37, RULE_singleStaticImportDeclaration = 38, 
		RULE_staticImportOnDemandDeclaration = 39, RULE_typeDeclaration = 40, 
		RULE_classDeclaration = 41, RULE_normalClassDeclaration = 42, RULE_classModifier = 43, 
		RULE_typeParameters = 44, RULE_typeParameterList = 45, RULE_superclass = 46, 
		RULE_superinterfaces = 47, RULE_interfaceTypeList = 48, RULE_classBody = 49, 
		RULE_classBodyDeclaration = 50, RULE_classMemberDeclaration = 51, RULE_fieldDeclaration = 52, 
		RULE_fieldModifier = 53, RULE_variableDeclaratorList = 54, RULE_variableDeclarator = 55, 
		RULE_variableDeclaratorId = 56, RULE_variableInitializer = 57, RULE_unannType = 58, 
		RULE_unannPrimitiveType = 59, RULE_unannReferenceType = 60, RULE_unannClassOrInterfaceType = 61, 
		RULE_unannClassType = 62, RULE_unannClassType_lf_unannClassOrInterfaceType = 63, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 64, RULE_unannInterfaceType = 65, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 66, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 67, 
		RULE_unannTypeVariable = 68, RULE_unannArrayType = 69, RULE_methodDeclaration = 70, 
		RULE_methodModifier = 71, RULE_methodHeader = 72, RULE_result = 73, RULE_methodDeclarator = 74, 
		RULE_formalParameterList = 75, RULE_formalParameters = 76, RULE_formalParameter = 77, 
		RULE_variableModifier = 78, RULE_lastFormalParameter = 79, RULE_receiverParameter = 80, 
		RULE_throws_ = 81, RULE_exceptionTypeList = 82, RULE_exceptionType = 83, 
		RULE_methodBody = 84, RULE_instanceInitializer = 85, RULE_staticInitializer = 86, 
		RULE_constructorDeclaration = 87, RULE_constructorModifier = 88, RULE_constructorDeclarator = 89, 
		RULE_simpleTypeName = 90, RULE_constructorBody = 91, RULE_explicitConstructorInvocation = 92, 
		RULE_enumDeclaration = 93, RULE_enumBody = 94, RULE_enumConstantList = 95, 
		RULE_enumConstant = 96, RULE_enumConstantModifier = 97, RULE_enumBodyDeclarations = 98, 
		RULE_interfaceDeclaration = 99, RULE_normalInterfaceDeclaration = 100, 
		RULE_interfaceModifier = 101, RULE_extendsInterfaces = 102, RULE_interfaceBody = 103, 
		RULE_interfaceMemberDeclaration = 104, RULE_constantDeclaration = 105, 
		RULE_constantModifier = 106, RULE_interfaceMethodDeclaration = 107, RULE_interfaceMethodModifier = 108, 
		RULE_annotationTypeDeclaration = 109, RULE_annotationTypeBody = 110, RULE_annotationTypeMemberDeclaration = 111, 
		RULE_annotationTypeElementDeclaration = 112, RULE_annotationTypeElementModifier = 113, 
		RULE_defaultValue = 114, RULE_annotation = 115, RULE_normalAnnotation = 116, 
		RULE_elementValuePairList = 117, RULE_elementValuePair = 118, RULE_elementValue = 119, 
		RULE_elementValueArrayInitializer = 120, RULE_elementValueList = 121, 
		RULE_markerAnnotation = 122, RULE_singleElementAnnotation = 123, RULE_arrayInitializer = 124, 
		RULE_variableInitializerList = 125, RULE_block = 126, RULE_blockStatements = 127, 
		RULE_blockStatement = 128, RULE_localVariableDeclarationStatement = 129, 
		RULE_localVariableDeclaration = 130, RULE_statement = 131, RULE_statementNoShortIf = 132, 
		RULE_statementWithoutTrailingSubstatement = 133, RULE_emptyStatement = 134, 
		RULE_labeledStatement = 135, RULE_labeledStatementNoShortIf = 136, RULE_expressionStatement = 137, 
		RULE_statementExpression = 138, RULE_ifThenStatement = 139, RULE_ifThenElseStatement = 140, 
		RULE_ifThenElseStatementNoShortIf = 141, RULE_assertStatement = 142, RULE_switchStatement = 143, 
		RULE_switchBlock = 144, RULE_switchBlockStatementGroup = 145, RULE_switchLabels = 146, 
		RULE_switchLabel = 147, RULE_enumConstantName = 148, RULE_whileStatement = 149, 
		RULE_whileStatementNoShortIf = 150, RULE_doStatement = 151, RULE_forStatement = 152, 
		RULE_forStatementNoShortIf = 153, RULE_basicForStatement = 154, RULE_basicForStatementNoShortIf = 155, 
		RULE_forInit = 156, RULE_forUpdate = 157, RULE_statementExpressionList = 158, 
		RULE_enhancedForStatement = 159, RULE_enhancedForStatementNoShortIf = 160, 
		RULE_breakStatement = 161, RULE_continueStatement = 162, RULE_returnStatement = 163, 
		RULE_throwStatement = 164, RULE_synchronizedStatement = 165, RULE_tryStatement = 166, 
		RULE_catches = 167, RULE_catchClause = 168, RULE_catchFormalParameter = 169, 
		RULE_catchType = 170, RULE_finally_ = 171, RULE_tryWithResourcesStatement = 172, 
		RULE_resourceSpecification = 173, RULE_resourceList = 174, RULE_resource = 175, 
		RULE_primary = 176, RULE_primaryNoNewArray = 177, RULE_primaryNoNewArray_lf_arrayAccess = 178, 
		RULE_primaryNoNewArray_lfno_arrayAccess = 179, RULE_primaryNoNewArray_lf_primary = 180, 
		RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 181, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 182, 
		RULE_primaryNoNewArray_lfno_primary = 183, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 184, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 185, 
		RULE_classInstanceCreationExpression = 186, RULE_classInstanceCreationExpression_lf_primary = 187, 
		RULE_classInstanceCreationExpression_lfno_primary = 188, RULE_typeArgumentsOrDiamond = 189, 
		RULE_fieldAccess = 190, RULE_fieldAccess_lf_primary = 191, RULE_fieldAccess_lfno_primary = 192, 
		RULE_arrayAccess = 193, RULE_arrayAccess_lf_primary = 194, RULE_arrayAccess_lfno_primary = 195, 
		RULE_methodInvocation = 196, RULE_methodInvocation_lf_primary = 197, RULE_methodInvocation_lfno_primary = 198, 
		RULE_argumentList = 199, RULE_methodReference = 200, RULE_methodReference_lf_primary = 201, 
		RULE_methodReference_lfno_primary = 202, RULE_arrayCreationExpression = 203, 
		RULE_dimExprs = 204, RULE_dimExpr = 205, RULE_constantExpression = 206, 
		RULE_expression = 207, RULE_lambdaExpression = 208, RULE_lambdaParameters = 209, 
		RULE_inferredFormalParameterList = 210, RULE_lambdaBody = 211, RULE_assignmentExpression = 212, 
		RULE_assignment = 213, RULE_leftHandSide = 214, RULE_assignmentOperator = 215, 
		RULE_conditionalExpression = 216, RULE_conditionalOrExpression = 217, 
		RULE_conditionalAndExpression = 218, RULE_inclusiveOrExpression = 219, 
		RULE_exclusiveOrExpression = 220, RULE_andExpression = 221, RULE_equalityExpression = 222, 
		RULE_relationalExpression = 223, RULE_compareOperator = 224, RULE_shiftExpression = 225, 
		RULE_additiveExpression = 226, RULE_multiplicativeExpression = 227, RULE_unaryExpression = 228, 
		RULE_preIncrementExpression = 229, RULE_preDecrementExpression = 230, 
		RULE_unaryExpressionNotPlusMinus = 231, RULE_postfixExpression = 232, 
		RULE_postIncrementExpression = 233, RULE_postIncrementExpression_lf_postfixExpression = 234, 
		RULE_postDecrementExpression = 235, RULE_postDecrementExpression_lf_postfixExpression = 236, 
		RULE_castExpression = 237;
	public static readonly string[] ruleNames = {
		"literal", "type", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName", 
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier", 
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration", 
		"classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters", 
		"typeParameterList", "superclass", "superinterfaces", "interfaceTypeList", 
		"classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
		"fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
		"unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
		"unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
		"unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
		"unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
		"methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression", 
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary", 
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "compareOperator", "shiftExpression", "additiveExpression", 
		"multiplicativeExpression", "unaryExpression", "preIncrementExpression", 
		"preDecrementExpression", "unaryExpressionNotPlusMinus", "postfixExpression", 
		"postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
		"postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
		"castExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", null, "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
		"BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
		"MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java8.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Java8Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(Java8Parser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(Java8Parser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(Java8Parser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(Java8Parser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(Java8Parser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(Java8Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			State = 480;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 478; primitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; referenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			State = 496;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 482; annotation();
					}
					}
					State = 487;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 488; numericType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 492;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 489; annotation();
					}
					}
					State = 494;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 495; Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_numericType);
		try {
			State = 500;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498; integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499; floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPointType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			_la = _input.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_referenceType);
		try {
			State = 509;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506; classOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507; typeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 508; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 511; classType_lfno_classOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 512; interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 519;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 517;
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 515; classType_lf_classOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 516; interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 521;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_classType);
		int _la;
		try {
			State = 544;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 522; annotation();
					}
					}
					State = 527;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 528; Match(Identifier);
				State = 530;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 529; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; classOrInterfaceType();
				State = 533; Match(DOT);
				State = 537;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 534; annotation();
					}
					}
					State = 539;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 540; Match(Identifier);
				State = 542;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 541; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(DOT);
			State = 550;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 547; annotation();
				}
				}
				State = 552;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 553; Match(Identifier);
			State = 555;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 554; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 557; annotation();
				}
				}
				State = 562;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 563; Match(Identifier);
			State = 565;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 564; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 573; annotation();
				}
				}
				State = 578;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 579; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_arrayType);
		try {
			State = 590;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581; primitiveType();
				State = 582; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584; classOrInterfaceType();
				State = 585; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 587; typeVariable();
				State = 588; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDims(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 592; annotation();
				}
				}
				State = 597;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 598; Match(LBRACK);
			State = 599; Match(RBRACK);
			State = 610;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 603;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 600; annotation();
						}
						}
						State = 605;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 606; Match(LBRACK);
					State = 607; Match(RBRACK);
					}
					} 
				}
				State = 612;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 613; typeParameterModifier();
				}
				}
				State = 618;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 619; Match(Identifier);
			State = 621;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 620; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeBound);
		int _la;
		try {
			State = 635;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 625; Match(EXTENDS);
				State = 626; typeVariable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627; Match(EXTENDS);
				State = 628; classOrInterfaceType();
				State = 632;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 629; additionalBound();
					}
					}
					State = 634;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(BITAND);
			State = 638; interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(LT);
			State = 641; typeArgumentList();
			State = 642; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; typeArgument();
			State = 649;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 645; Match(COMMA);
				State = 646; typeArgument();
				}
				}
				State = 651;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typeArgument);
		try {
			State = 654;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 652; referenceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 653; wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 656; annotation();
				}
				}
				State = 661;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 662; Match(QUESTION);
			State = 664;
			_la = _input.La(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 663; wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_wildcardBounds);
		try {
			State = 670;
			switch (_input.La(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 666; Match(EXTENDS);
				State = 667; referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 668; Match(SUPER);
				State = 669; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(_ctx, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 673; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 680;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 675;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 676; Match(DOT);
					State = 677; Match(Identifier);
					}
					} 
				}
				State = 682;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			State = 688;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684; packageOrTypeName(0);
				State = 685; Match(DOT);
				State = 686; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(_ctx, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 691; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 698;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 693;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 694; Match(DOT);
					State = 695; Match(Identifier);
					}
					} 
				}
				State = 700;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			State = 706;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 702; ambiguousName(0);
				State = 703; Match(DOT);
				State = 704; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(_ctx, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 711; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 718;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 713;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 714; Match(DOT);
					State = 715; Match(Identifier);
					}
					} 
				}
				State = 720;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Java8Parser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 721; packageDeclaration();
				}
				break;
			}
			State = 727;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT) {
				{
				{
				State = 724; importDeclaration();
				}
				}
				State = 729;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 733;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 730; typeDeclaration();
				}
				}
				State = 735;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 736; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 738; packageModifier();
				}
				}
				State = 743;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 744; Match(PACKAGE);
			State = 745; Match(Identifier);
			State = 750;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 746; Match(DOT);
				State = 747; Match(Identifier);
				}
				}
				State = 752;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 753; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 755; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_importDeclaration);
		try {
			State = 761;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 757; singleTypeImportDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 758; typeImportOnDemandDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 759; singleStaticImportDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 760; staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763; Match(IMPORT);
			State = 764; typeName();
			State = 765; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(IMPORT);
			State = 768; packageOrTypeName(0);
			State = 769; Match(DOT);
			State = 770; Match(MUL);
			State = 771; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStaticImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773; Match(IMPORT);
			State = 774; Match(STATIC);
			State = 775; typeName();
			State = 776; Match(DOT);
			State = 777; Match(Identifier);
			State = 778; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; Match(IMPORT);
			State = 781; Match(STATIC);
			State = 782; typeName();
			State = 783; Match(DOT);
			State = 784; Match(MUL);
			State = 785; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_typeDeclaration);
		try {
			State = 790;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 787; classDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 788; interfaceDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 789; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_classDeclaration);
		try {
			State = 794;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792; normalClassDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 796; classModifier();
				}
				}
				State = 801;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 802; Match(CLASS);
			State = 803; Match(Identifier);
			State = 805;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 804; typeParameters();
				}
			}

			State = 808;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 807; superclass();
				}
			}

			State = 811;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 810; superinterfaces();
				}
			}

			State = 813; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_classModifier);
		try {
			State = 823;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 815; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 817; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 818; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 819; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 820; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 821; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 822; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 825; Match(LT);
			State = 826; typeParameterList();
			State = 827; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; typeParameter();
			State = 834;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 830; Match(COMMA);
				State = 831; typeParameter();
				}
				}
				State = 836;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837; Match(EXTENDS);
			State = 838; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperinterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(IMPLEMENTS);
			State = 841; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843; interfaceType();
			State = 848;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 844; Match(COMMA);
				State = 845; interfaceType();
				}
				}
				State = 850;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851; Match(LBRACE);
			State = 855;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 852; classBodyDeclaration();
				}
				}
				State = 857;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 858; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_classBodyDeclaration);
		try {
			State = 864;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 860; classMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 861; instanceInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 862; staticInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 863; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_classMemberDeclaration);
		try {
			State = 871;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866; fieldDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867; methodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 868; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 869; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 870; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || _la==AT) {
				{
				{
				State = 873; fieldModifier();
				}
				}
				State = 878;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 879; unannType();
			State = 880; variableDeclaratorList();
			State = 881; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_fieldModifier);
		try {
			State = 891;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 883; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 884; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 885; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 886; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 887; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 888; Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 889; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 890; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893; variableDeclarator();
			State = 898;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 894; Match(COMMA);
				State = 895; variableDeclarator();
				}
				}
				State = 900;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901; variableDeclaratorId();
			State = 904;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 902; Match(ASSIGN);
				State = 903; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906; Match(Identifier);
			State = 908;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 907; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_variableInitializer);
		try {
			State = 912;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 910; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 911; arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_unannType);
		try {
			State = 916;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914; unannPrimitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915; unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_unannPrimitiveType);
		try {
			State = 920;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918; numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_unannReferenceType);
		try {
			State = 925;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922; unannClassOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; unannTypeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 924; unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 927; unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 928; unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 935;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 933;
					switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						State = 931; unannClassType_lf_unannClassOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 932; unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 937;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_unannClassType);
		int _la;
		try {
			State = 954;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 938; Match(Identifier);
				State = 940;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 939; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 942; unannClassOrInterfaceType();
				State = 943; Match(DOT);
				State = 947;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 944; annotation();
					}
					}
					State = 949;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 950; Match(Identifier);
				State = 952;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 951; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956; Match(DOT);
			State = 960;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 957; annotation();
				}
				}
				State = 962;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 963; Match(Identifier);
			State = 965;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 964; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967; Match(Identifier);
			State = 969;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 968; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 973; unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_unannArrayType);
		try {
			State = 988;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 979; unannPrimitiveType();
				State = 980; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 982; unannClassOrInterfaceType();
				State = 983; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 985; unannTypeVariable();
				State = 986; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED))) != 0) || _la==AT) {
				{
				{
				State = 990; methodModifier();
				}
				}
				State = 995;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 996; methodHeader();
			State = 997; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_methodModifier);
		try {
			State = 1009;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 999; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1000; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1001; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1002; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1003; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1004; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1005; Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1006; Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1007; Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1008; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_methodHeader);
		int _la;
		try {
			State = 1028;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011; result();
				State = 1012; methodDeclarator();
				State = 1014;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1013; throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1016; typeParameters();
				State = 1020;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1017; annotation();
					}
					}
					State = 1022;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1023; result();
				State = 1024; methodDeclarator();
				State = 1026;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1025; throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_result);
		try {
			State = 1032;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1030; unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1031; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1034; Match(Identifier);
			State = 1035; Match(LPAREN);
			State = 1037;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1036; formalParameterList();
				}
			}

			State = 1039; Match(RPAREN);
			State = 1041;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1040; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_formalParameterList);
		try {
			State = 1048;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1043; formalParameters();
				State = 1044; Match(COMMA);
				State = 1045; lastFormalParameter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1047; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_formalParameters);
		try {
			int _alt;
			State = 1066;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1050; formalParameter();
				State = 1055;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1051; Match(COMMA);
						State = 1052; formalParameter();
						}
						} 
					}
					State = 1057;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1058; receiverParameter();
				State = 1063;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1059; Match(COMMA);
						State = 1060; formalParameter();
						}
						} 
					}
					State = 1065;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1068; variableModifier();
				}
				}
				State = 1073;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1074; unannType();
			State = 1075; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_variableModifier);
		try {
			State = 1079;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1077; annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1098;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1084;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1081; variableModifier();
					}
					}
					State = 1086;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1087; unannType();
				State = 1091;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1088; annotation();
					}
					}
					State = 1093;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1094; Match(ELLIPSIS);
				State = 1095; variableDeclaratorId();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1097; formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1100; annotation();
				}
				}
				State = 1105;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1106; unannType();
			State = 1109;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1107; Match(Identifier);
				State = 1108; Match(DOT);
				}
			}

			State = 1111; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrows_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(_ctx, State);
		EnterRule(_localctx, 162, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; Match(THROWS);
			State = 1114; exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116; exceptionType();
			State = 1121;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1117; Match(COMMA);
				State = 1118; exceptionType();
				}
				}
				State = 1123;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_exceptionType);
		try {
			State = 1126;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124; classType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125; typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_methodBody);
		try {
			State = 1130;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134; Match(STATIC);
			State = 1135; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==AT) {
				{
				{
				State = 1137; constructorModifier();
				}
				}
				State = 1142;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1143; constructorDeclarator();
			State = 1145;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 1144; throws_();
				}
			}

			State = 1147; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_constructorModifier);
		try {
			State = 1153;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1149; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1150; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1151; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1152; Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1156;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1155; typeParameters();
				}
			}

			State = 1158; simpleTypeName();
			State = 1159; Match(LPAREN);
			State = 1161;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1160; formalParameterList();
				}
			}

			State = 1163; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1165; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167; Match(LBRACE);
			State = 1169;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 1168; explicitConstructorInvocation();
				}
				break;
			}
			State = 1172;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1171; blockStatements();
				}
			}

			State = 1174; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1222;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1177;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1176; typeArguments();
					}
				}

				State = 1179; Match(THIS);
				State = 1180; Match(LPAREN);
				State = 1182;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1181; argumentList();
					}
				}

				State = 1184; Match(RPAREN);
				State = 1185; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1187;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1186; typeArguments();
					}
				}

				State = 1189; Match(SUPER);
				State = 1190; Match(LPAREN);
				State = 1192;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1191; argumentList();
					}
				}

				State = 1194; Match(RPAREN);
				State = 1195; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1196; expressionName();
				State = 1197; Match(DOT);
				State = 1199;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1198; typeArguments();
					}
				}

				State = 1201; Match(SUPER);
				State = 1202; Match(LPAREN);
				State = 1204;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1203; argumentList();
					}
				}

				State = 1206; Match(RPAREN);
				State = 1207; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1209; primary();
				State = 1210; Match(DOT);
				State = 1212;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1211; typeArguments();
					}
				}

				State = 1214; Match(SUPER);
				State = 1215; Match(LPAREN);
				State = 1217;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1216; argumentList();
					}
				}

				State = 1219; Match(RPAREN);
				State = 1220; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1227;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1224; classModifier();
				}
				}
				State = 1229;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1230; Match(ENUM);
			State = 1231; Match(Identifier);
			State = 1233;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1232; superinterfaces();
				}
			}

			State = 1235; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237; Match(LBRACE);
			State = 1239;
			_la = _input.La(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 1238; enumConstantList();
				}
			}

			State = 1242;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1241; Match(COMMA);
				}
			}

			State = 1245;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1244; enumBodyDeclarations();
				}
			}

			State = 1247; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1249; enumConstant();
			State = 1254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1250; Match(COMMA);
					State = 1251; enumConstant();
					}
					} 
				}
				State = 1256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1260;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1257; enumConstantModifier();
				}
				}
				State = 1262;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1263; Match(Identifier);
			State = 1269;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1264; Match(LPAREN);
				State = 1266;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1265; argumentList();
					}
				}

				State = 1268; Match(RPAREN);
				}
			}

			State = 1272;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 1271; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1276; Match(SEMI);
			State = 1280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1277; classBodyDeclaration();
				}
				}
				State = 1282;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_interfaceDeclaration);
		try {
			State = 1285;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1283; normalInterfaceDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284; annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1287; interfaceModifier();
				}
				}
				State = 1292;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1293; Match(INTERFACE);
			State = 1294; Match(Identifier);
			State = 1296;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1295; typeParameters();
				}
			}

			State = 1299;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 1298; extendsInterfaces();
				}
			}

			State = 1301; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_interfaceModifier);
		try {
			State = 1310;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1303; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1304; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1305; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1306; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1307; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1308; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1309; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendsInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1312; Match(EXTENDS);
			State = 1313; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315; Match(LBRACE);
			State = 1319;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << VOID) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1316; interfaceMemberDeclaration();
				}
				}
				State = 1321;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1322; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_interfaceMemberDeclaration);
		try {
			State = 1329;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1324; constantDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1325; interfaceMethodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1326; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1327; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1328; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==AT) {
				{
				{
				State = 1331; constantModifier();
				}
				}
				State = 1336;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1337; unannType();
			State = 1338; variableDeclaratorList();
			State = 1339; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_constantModifier);
		try {
			State = 1345;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1341; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1342; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1343; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1344; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << DEFAULT) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1347; interfaceMethodModifier();
				}
				}
				State = 1352;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1353; methodHeader();
			State = 1354; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_interfaceMethodModifier);
		try {
			State = 1362;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1356; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1357; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1358; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1359; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1360; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1361; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1364; interfaceModifier();
					}
					} 
				}
				State = 1369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			}
			State = 1370; Match(AT);
			State = 1371; Match(INTERFACE);
			State = 1372; Match(Identifier);
			State = 1373; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375; Match(LBRACE);
			State = 1379;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==Identifier || _la==AT) {
				{
				{
				State = 1376; annotationTypeMemberDeclaration();
				}
				}
				State = 1381;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1382; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1389;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1384; annotationTypeElementDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1385; constantDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1386; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1387; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1388; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1391; annotationTypeElementModifier();
				}
				}
				State = 1396;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1397; unannType();
			State = 1398; Match(Identifier);
			State = 1399; Match(LPAREN);
			State = 1400; Match(RPAREN);
			State = 1402;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1401; dims();
				}
			}

			State = 1405;
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 1404; defaultValue();
				}
			}

			State = 1407; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_annotationTypeElementModifier);
		try {
			State = 1412;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1409; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1411; Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414; Match(DEFAULT);
			State = 1415; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_annotation);
		try {
			State = 1420;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1417; normalAnnotation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418; markerAnnotation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1419; singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1422; Match(AT);
			State = 1423; typeName();
			State = 1424; Match(LPAREN);
			State = 1426;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1425; elementValuePairList();
				}
			}

			State = 1428; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430; elementValuePair();
			State = 1435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1431; Match(COMMA);
				State = 1432; elementValuePair();
				}
				}
				State = 1437;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438; Match(Identifier);
			State = 1439; Match(ASSIGN);
			State = 1440; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_elementValue);
		try {
			State = 1445;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1442; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1443; elementValueArrayInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1444; annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; Match(LBRACE);
			State = 1449;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1448; elementValueList();
				}
			}

			State = 1452;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1451; Match(COMMA);
				}
			}

			State = 1454; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1456; elementValue();
			State = 1461;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1457; Match(COMMA);
					State = 1458; elementValue();
					}
					} 
				}
				State = 1463;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(AT);
			State = 1465; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleElementAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; Match(AT);
			State = 1468; typeName();
			State = 1469; Match(LPAREN);
			State = 1470; elementValue();
			State = 1471; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473; Match(LBRACE);
			State = 1475;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1474; variableInitializerList();
				}
			}

			State = 1478;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1477; Match(COMMA);
				}
			}

			State = 1480; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1482; variableInitializer();
			State = 1487;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1483; Match(COMMA);
					State = 1484; variableInitializer();
					}
					} 
				}
				State = 1489;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; Match(LBRACE);
			State = 1492;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1491; blockStatements();
				}
			}

			State = 1494; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1496; blockStatement();
			State = 1500;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				{
				State = 1497; blockStatement();
				}
				}
				State = 1502;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_blockStatement);
		try {
			State = 1506;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1503; localVariableDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1504; classDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1505; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1508; localVariableDeclaration();
			State = 1509; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1511; variableModifier();
				}
				}
				State = 1516;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1517; unannType();
			State = 1518; variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_statement);
		try {
			State = 1526;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1520; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1521; labeledStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1522; ifThenStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1523; ifThenElseStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1524; whileStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1525; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_statementNoShortIf);
		try {
			State = 1533;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1528; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1529; labeledStatementNoShortIf();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1530; ifThenElseStatementNoShortIf();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1531; whileStatementNoShortIf();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1532; forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithoutTrailingSubstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1547;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1535; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1536; emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case INC:
			case DEC:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1537; expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1538; assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1539; switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1540; doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1541; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1542; continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1543; returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1544; synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1545; throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1546; tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1551; Match(Identifier);
			State = 1552; Match(COLON);
			State = 1553; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; Match(Identifier);
			State = 1556; Match(COLON);
			State = 1557; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559; statementExpression();
			State = 1560; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_statementExpression);
		try {
			State = 1569;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1562; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1563; preIncrementExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1564; preDecrementExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1565; postIncrementExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1566; postDecrementExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1567; methodInvocation();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1568; classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1571; Match(IF);
			State = 1572; Match(LPAREN);
			State = 1573; expression();
			State = 1574; Match(RPAREN);
			State = 1575; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577; Match(IF);
			State = 1578; Match(LPAREN);
			State = 1579; expression();
			State = 1580; Match(RPAREN);
			State = 1581; statementNoShortIf();
			State = 1582; Match(ELSE);
			State = 1583; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; Match(IF);
			State = 1586; Match(LPAREN);
			State = 1587; expression();
			State = 1588; Match(RPAREN);
			State = 1589; statementNoShortIf();
			State = 1590; Match(ELSE);
			State = 1591; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_assertStatement);
		try {
			State = 1603;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1593; Match(ASSERT);
				State = 1594; expression();
				State = 1595; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597; Match(ASSERT);
				State = 1598; expression();
				State = 1599; Match(COLON);
				State = 1600; expression();
				State = 1601; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605; Match(SWITCH);
			State = 1606; Match(LPAREN);
			State = 1607; expression();
			State = 1608; Match(RPAREN);
			State = 1609; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611; Match(LBRACE);
			State = 1615;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1612; switchBlockStatementGroup();
					}
					} 
				}
				State = 1617;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			}
			State = 1621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1618; switchLabel();
				}
				}
				State = 1623;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1624; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1626; switchLabels();
			State = 1627; blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629; switchLabel();
			State = 1633;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1630; switchLabel();
				}
				}
				State = 1635;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_switchLabel);
		try {
			State = 1646;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1636; Match(CASE);
				State = 1637; constantExpression();
				State = 1638; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1640; Match(CASE);
				State = 1641; enumConstantName();
				State = 1642; Match(COLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1644; Match(DEFAULT);
				State = 1645; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; Match(WHILE);
			State = 1651; Match(LPAREN);
			State = 1652; expression();
			State = 1653; Match(RPAREN);
			State = 1654; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656; Match(WHILE);
			State = 1657; Match(LPAREN);
			State = 1658; expression();
			State = 1659; Match(RPAREN);
			State = 1660; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; Match(DO);
			State = 1663; statement();
			State = 1664; Match(WHILE);
			State = 1665; Match(LPAREN);
			State = 1666; expression();
			State = 1667; Match(RPAREN);
			State = 1668; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_forStatement);
		try {
			State = 1672;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1670; basicForStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671; enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_forStatementNoShortIf);
		try {
			State = 1676;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1674; basicForStatementNoShortIf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675; enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; Match(FOR);
			State = 1679; Match(LPAREN);
			State = 1681;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1680; forInit();
				}
			}

			State = 1683; Match(SEMI);
			State = 1685;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1684; expression();
				}
			}

			State = 1687; Match(SEMI);
			State = 1689;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1688; forUpdate();
				}
			}

			State = 1691; Match(RPAREN);
			State = 1692; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1694; Match(FOR);
			State = 1695; Match(LPAREN);
			State = 1697;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1696; forInit();
				}
			}

			State = 1699; Match(SEMI);
			State = 1701;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1700; expression();
				}
			}

			State = 1703; Match(SEMI);
			State = 1705;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1704; forUpdate();
				}
			}

			State = 1707; Match(RPAREN);
			State = 1708; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_forInit);
		try {
			State = 1712;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1710; statementExpressionList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1711; localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1716; statementExpression();
			State = 1721;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1717; Match(COMMA);
				State = 1718; statementExpression();
				}
				}
				State = 1723;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724; Match(FOR);
			State = 1725; Match(LPAREN);
			State = 1729;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1726; variableModifier();
				}
				}
				State = 1731;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1732; unannType();
			State = 1733; variableDeclaratorId();
			State = 1734; Match(COLON);
			State = 1735; expression();
			State = 1736; Match(RPAREN);
			State = 1737; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1739; Match(FOR);
			State = 1740; Match(LPAREN);
			State = 1744;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1741; variableModifier();
				}
				}
				State = 1746;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1747; unannType();
			State = 1748; variableDeclaratorId();
			State = 1749; Match(COLON);
			State = 1750; expression();
			State = 1751; Match(RPAREN);
			State = 1752; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(BREAK);
			State = 1756;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1755; Match(Identifier);
				}
			}

			State = 1758; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1760; Match(CONTINUE);
			State = 1762;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1761; Match(Identifier);
				}
			}

			State = 1764; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1766; Match(RETURN);
			State = 1768;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1767; expression();
				}
			}

			State = 1770; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772; Match(THROW);
			State = 1773; expression();
			State = 1774; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynchronizedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; Match(SYNCHRONIZED);
			State = 1777; Match(LPAREN);
			State = 1778; expression();
			State = 1779; Match(RPAREN);
			State = 1780; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_tryStatement);
		int _la;
		try {
			State = 1794;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1782; Match(TRY);
				State = 1783; block();
				State = 1784; catches();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1786; Match(TRY);
				State = 1787; block();
				State = 1789;
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1788; catches();
					}
				}

				State = 1791; finally_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1793; tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1796; catchClause();
			State = 1800;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CATCH) {
				{
				{
				State = 1797; catchClause();
				}
				}
				State = 1802;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803; Match(CATCH);
			State = 1804; Match(LPAREN);
			State = 1805; catchFormalParameter();
			State = 1806; Match(RPAREN);
			State = 1807; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1812;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1809; variableModifier();
				}
				}
				State = 1814;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1815; catchType();
			State = 1816; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1818; unannClassType();
			State = 1823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITOR) {
				{
				{
				State = 1819; Match(BITOR);
				State = 1820; classType();
				}
				}
				State = 1825;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(_ctx, State);
		EnterRule(_localctx, 342, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826; Match(FINALLY);
			State = 1827; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryWithResourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829; Match(TRY);
			State = 1830; resourceSpecification();
			State = 1831; block();
			State = 1833;
			_la = _input.La(1);
			if (_la==CATCH) {
				{
				State = 1832; catches();
				}
			}

			State = 1836;
			_la = _input.La(1);
			if (_la==FINALLY) {
				{
				State = 1835; finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838; Match(LPAREN);
			State = 1839; resourceList();
			State = 1841;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1840; Match(SEMI);
				}
			}

			State = 1843; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1845; resource();
			State = 1850;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1846; Match(SEMI);
					State = 1847; resource();
					}
					} 
				}
				State = 1852;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1853; variableModifier();
				}
				}
				State = 1858;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1859; unannType();
			State = 1860; variableDeclaratorId();
			State = 1861; Match(ASSIGN);
			State = 1862; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1864; primaryNoNewArray_lfno_primary();
				}
				break;

			case 2:
				{
				State = 1865; arrayCreationExpression();
				}
				break;
			}
			State = 1871;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1868; primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1873;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 1903;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1874; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1875; typeName();
				State = 1880;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1876; Match(LBRACK);
					State = 1877; Match(RBRACK);
					}
					}
					State = 1882;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1883; Match(DOT);
				State = 1884; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1886; Match(VOID);
				State = 1887; Match(DOT);
				State = 1888; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1889; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1890; typeName();
				State = 1891; Match(DOT);
				State = 1892; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1894; Match(LPAREN);
				State = 1895; expression();
				State = 1896; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1898; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1899; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1900; arrayAccess();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1901; methodInvocation();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1902; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 1935;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1908; typeName();
				State = 1913;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1909; Match(LBRACK);
					State = 1910; Match(RBRACK);
					}
					}
					State = 1915;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1916; Match(DOT);
				State = 1917; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1919; Match(VOID);
				State = 1920; Match(DOT);
				State = 1921; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1922; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1923; typeName();
				State = 1924; Match(DOT);
				State = 1925; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1927; Match(LPAREN);
				State = 1928; expression();
				State = 1929; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1931; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1932; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1933; methodInvocation();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1934; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 1942;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1937; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1938; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1939; arrayAccess_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1940; methodInvocation_lf_primary();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1941; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 1950;
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1946; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1947; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1948; methodInvocation_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1949; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 1992;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953; typeName();
				State = 1958;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1954; Match(LBRACK);
					State = 1955; Match(RBRACK);
					}
					}
					State = 1960;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1961; Match(DOT);
				State = 1962; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1964; unannPrimitiveType();
				State = 1969;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1965; Match(LBRACK);
					State = 1966; Match(RBRACK);
					}
					}
					State = 1971;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1972; Match(DOT);
				State = 1973; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1975; Match(VOID);
				State = 1976; Match(DOT);
				State = 1977; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1978; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1979; typeName();
				State = 1980; Match(DOT);
				State = 1981; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1983; Match(LPAREN);
				State = 1984; expression();
				State = 1985; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1987; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1988; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1989; arrayAccess_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1990; methodInvocation_lfno_primary();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1991; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2035;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1996; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1997; typeName();
				State = 2002;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1998; Match(LBRACK);
					State = 1999; Match(RBRACK);
					}
					}
					State = 2004;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2005; Match(DOT);
				State = 2006; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2008; unannPrimitiveType();
				State = 2013;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2009; Match(LBRACK);
					State = 2010; Match(RBRACK);
					}
					}
					State = 2015;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2016; Match(DOT);
				State = 2017; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2019; Match(VOID);
				State = 2020; Match(DOT);
				State = 2021; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2022; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2023; typeName();
				State = 2024; Match(DOT);
				State = 2025; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2027; Match(LPAREN);
				State = 2028; expression();
				State = 2029; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2031; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2032; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2033; methodInvocation_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2034; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2120;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2037; Match(NEW);
				State = 2039;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2038; typeArguments();
					}
				}

				State = 2044;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2041; annotation();
					}
					}
					State = 2046;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2047; Match(Identifier);
				State = 2058;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2048; Match(DOT);
					State = 2052;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2049; annotation();
						}
						}
						State = 2054;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2055; Match(Identifier);
					}
					}
					State = 2060;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2062;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2061; typeArgumentsOrDiamond();
					}
				}

				State = 2064; Match(LPAREN);
				State = 2066;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2065; argumentList();
					}
				}

				State = 2068; Match(RPAREN);
				State = 2070;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2069; classBody();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2072; expressionName();
				State = 2073; Match(DOT);
				State = 2074; Match(NEW);
				State = 2076;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2075; typeArguments();
					}
				}

				State = 2081;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2078; annotation();
					}
					}
					State = 2083;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2084; Match(Identifier);
				State = 2086;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2085; typeArgumentsOrDiamond();
					}
				}

				State = 2088; Match(LPAREN);
				State = 2090;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2089; argumentList();
					}
				}

				State = 2092; Match(RPAREN);
				State = 2094;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2093; classBody();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2096; primary();
				State = 2097; Match(DOT);
				State = 2098; Match(NEW);
				State = 2100;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2099; typeArguments();
					}
				}

				State = 2105;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2102; annotation();
					}
					}
					State = 2107;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2108; Match(Identifier);
				State = 2110;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2109; typeArgumentsOrDiamond();
					}
				}

				State = 2112; Match(LPAREN);
				State = 2114;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2113; argumentList();
					}
				}

				State = 2116; Match(RPAREN);
				State = 2118;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2117; classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2122; Match(DOT);
			State = 2123; Match(NEW);
			State = 2125;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2124; typeArguments();
				}
			}

			State = 2130;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2127; annotation();
				}
				}
				State = 2132;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2133; Match(Identifier);
			State = 2135;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2134; typeArgumentsOrDiamond();
				}
			}

			State = 2137; Match(LPAREN);
			State = 2139;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2138; argumentList();
				}
			}

			State = 2141; Match(RPAREN);
			State = 2143;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 2142; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2204;
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2145; Match(NEW);
				State = 2147;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2146; typeArguments();
					}
				}

				State = 2152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2149; annotation();
					}
					}
					State = 2154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2155; Match(Identifier);
				State = 2166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2156; Match(DOT);
					State = 2160;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2157; annotation();
						}
						}
						State = 2162;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2163; Match(Identifier);
					}
					}
					State = 2168;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2170;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2169; typeArgumentsOrDiamond();
					}
				}

				State = 2172; Match(LPAREN);
				State = 2174;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2173; argumentList();
					}
				}

				State = 2176; Match(RPAREN);
				State = 2178;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 2177; classBody();
					}
					break;
				}
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2180; expressionName();
				State = 2181; Match(DOT);
				State = 2182; Match(NEW);
				State = 2184;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2183; typeArguments();
					}
				}

				State = 2189;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2186; annotation();
					}
					}
					State = 2191;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2192; Match(Identifier);
				State = 2194;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2193; typeArgumentsOrDiamond();
					}
				}

				State = 2196; Match(LPAREN);
				State = 2198;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2197; argumentList();
					}
				}

				State = 2200; Match(RPAREN);
				State = 2202;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 2201; classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_typeArgumentsOrDiamond);
		try {
			State = 2209;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2206; typeArguments();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2207; Match(LT);
				State = 2208; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_fieldAccess);
		try {
			State = 2224;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2211; primary();
				State = 2212; Match(DOT);
				State = 2213; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2215; Match(SUPER);
				State = 2216; Match(DOT);
				State = 2217; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2218; typeName();
				State = 2219; Match(DOT);
				State = 2220; Match(SUPER);
				State = 2221; Match(DOT);
				State = 2222; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226; Match(DOT);
			State = 2227; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_fieldAccess_lfno_primary);
		try {
			State = 2238;
			switch (_input.La(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2229; Match(SUPER);
				State = 2230; Match(DOT);
				State = 2231; Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232; typeName();
				State = 2233; Match(DOT);
				State = 2234; Match(SUPER);
				State = 2235; Match(DOT);
				State = 2236; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 2240; expressionName();
				State = 2241; Match(LBRACK);
				State = 2242; expression();
				State = 2243; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2245; primaryNoNewArray_lfno_arrayAccess();
				State = 2246; Match(LBRACK);
				State = 2247; expression();
				State = 2248; Match(RBRACK);
				}
				break;
			}
			State = 2259;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 2252; primaryNoNewArray_lf_arrayAccess();
				State = 2253; Match(LBRACK);
				State = 2254; expression();
				State = 2255; Match(RBRACK);
				}
				}
				State = 2261;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2262; primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2263; Match(LBRACK);
			State = 2264; expression();
			State = 2265; Match(RBRACK);
			}
			State = 2274;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2267; primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2268; Match(LBRACK);
					State = 2269; expression();
					State = 2270; Match(RBRACK);
					}
					} 
				}
				State = 2276;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 2277; expressionName();
				State = 2278; Match(LBRACK);
				State = 2279; expression();
				State = 2280; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2282; primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2283; Match(LBRACK);
				State = 2284; expression();
				State = 2285; Match(RBRACK);
				}
				break;
			}
			State = 2296;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2289; primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2290; Match(LBRACK);
					State = 2291; expression();
					State = 2292; Match(RBRACK);
					}
					} 
				}
				State = 2298;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_methodInvocation);
		int _la;
		try {
			State = 2367;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2299; methodName();
				State = 2300; Match(LPAREN);
				State = 2302;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2301; argumentList();
					}
				}

				State = 2304; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2306; typeName();
				State = 2307; Match(DOT);
				State = 2309;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2308; typeArguments();
					}
				}

				State = 2311; Match(Identifier);
				State = 2312; Match(LPAREN);
				State = 2314;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2313; argumentList();
					}
				}

				State = 2316; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2318; expressionName();
				State = 2319; Match(DOT);
				State = 2321;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2320; typeArguments();
					}
				}

				State = 2323; Match(Identifier);
				State = 2324; Match(LPAREN);
				State = 2326;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2325; argumentList();
					}
				}

				State = 2328; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2330; primary();
				State = 2331; Match(DOT);
				State = 2333;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2332; typeArguments();
					}
				}

				State = 2335; Match(Identifier);
				State = 2336; Match(LPAREN);
				State = 2338;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2337; argumentList();
					}
				}

				State = 2340; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2342; Match(SUPER);
				State = 2343; Match(DOT);
				State = 2345;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2344; typeArguments();
					}
				}

				State = 2347; Match(Identifier);
				State = 2348; Match(LPAREN);
				State = 2350;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2349; argumentList();
					}
				}

				State = 2352; Match(RPAREN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2353; typeName();
				State = 2354; Match(DOT);
				State = 2355; Match(SUPER);
				State = 2356; Match(DOT);
				State = 2358;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2357; typeArguments();
					}
				}

				State = 2360; Match(Identifier);
				State = 2361; Match(LPAREN);
				State = 2363;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2362; argumentList();
					}
				}

				State = 2365; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2369; Match(DOT);
			State = 2371;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2370; typeArguments();
				}
			}

			State = 2373; Match(Identifier);
			State = 2374; Match(LPAREN);
			State = 2376;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2375; argumentList();
				}
			}

			State = 2378; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2436;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2380; methodName();
				State = 2381; Match(LPAREN);
				State = 2383;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2382; argumentList();
					}
				}

				State = 2385; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2387; typeName();
				State = 2388; Match(DOT);
				State = 2390;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2389; typeArguments();
					}
				}

				State = 2392; Match(Identifier);
				State = 2393; Match(LPAREN);
				State = 2395;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2394; argumentList();
					}
				}

				State = 2397; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2399; expressionName();
				State = 2400; Match(DOT);
				State = 2402;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2401; typeArguments();
					}
				}

				State = 2404; Match(Identifier);
				State = 2405; Match(LPAREN);
				State = 2407;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2406; argumentList();
					}
				}

				State = 2409; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2411; Match(SUPER);
				State = 2412; Match(DOT);
				State = 2414;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2413; typeArguments();
					}
				}

				State = 2416; Match(Identifier);
				State = 2417; Match(LPAREN);
				State = 2419;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2418; argumentList();
					}
				}

				State = 2421; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2422; typeName();
				State = 2423; Match(DOT);
				State = 2424; Match(SUPER);
				State = 2425; Match(DOT);
				State = 2427;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2426; typeArguments();
					}
				}

				State = 2429; Match(Identifier);
				State = 2430; Match(LPAREN);
				State = 2432;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2431; argumentList();
					}
				}

				State = 2434; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2438; expression();
			State = 2443;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2439; Match(COMMA);
				State = 2440; expression();
				}
				}
				State = 2445;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_methodReference);
		int _la;
		try {
			State = 2493;
			switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2446; expressionName();
				State = 2447; Match(COLONCOLON);
				State = 2449;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2448; typeArguments();
					}
				}

				State = 2451; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2453; referenceType();
				State = 2454; Match(COLONCOLON);
				State = 2456;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2455; typeArguments();
					}
				}

				State = 2458; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2460; primary();
				State = 2461; Match(COLONCOLON);
				State = 2463;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2462; typeArguments();
					}
				}

				State = 2465; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2467; Match(SUPER);
				State = 2468; Match(COLONCOLON);
				State = 2470;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2469; typeArguments();
					}
				}

				State = 2472; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2473; typeName();
				State = 2474; Match(DOT);
				State = 2475; Match(SUPER);
				State = 2476; Match(COLONCOLON);
				State = 2478;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2477; typeArguments();
					}
				}

				State = 2480; Match(Identifier);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2482; classType();
				State = 2483; Match(COLONCOLON);
				State = 2485;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2484; typeArguments();
					}
				}

				State = 2487; Match(NEW);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2489; arrayType();
				State = 2490; Match(COLONCOLON);
				State = 2491; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2495; Match(COLONCOLON);
			State = 2497;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2496; typeArguments();
				}
			}

			State = 2499; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2541;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2501; expressionName();
				State = 2502; Match(COLONCOLON);
				State = 2504;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2503; typeArguments();
					}
				}

				State = 2506; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2508; referenceType();
				State = 2509; Match(COLONCOLON);
				State = 2511;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2510; typeArguments();
					}
				}

				State = 2513; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2515; Match(SUPER);
				State = 2516; Match(COLONCOLON);
				State = 2518;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2517; typeArguments();
					}
				}

				State = 2520; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2521; typeName();
				State = 2522; Match(DOT);
				State = 2523; Match(SUPER);
				State = 2524; Match(COLONCOLON);
				State = 2526;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2525; typeArguments();
					}
				}

				State = 2528; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2530; classType();
				State = 2531; Match(COLONCOLON);
				State = 2533;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2532; typeArguments();
					}
				}

				State = 2535; Match(NEW);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2537; arrayType();
				State = 2538; Match(COLONCOLON);
				State = 2539; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_arrayCreationExpression);
		try {
			State = 2565;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2543; Match(NEW);
				State = 2544; primitiveType();
				State = 2545; dimExprs();
				State = 2547;
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 2546; dims();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2549; Match(NEW);
				State = 2550; classOrInterfaceType();
				State = 2551; dimExprs();
				State = 2553;
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 2552; dims();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2555; Match(NEW);
				State = 2556; primitiveType();
				State = 2557; dims();
				State = 2558; arrayInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2560; Match(NEW);
				State = 2561; classOrInterfaceType();
				State = 2562; dims();
				State = 2563; arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567; dimExpr();
			State = 2571;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2568; dimExpr();
					}
					} 
				}
				State = 2573;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2577;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2574; annotation();
				}
				}
				State = 2579;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2580; Match(LBRACK);
			State = 2581; expression();
			State = 2582; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2584; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_expression);
		try {
			State = 2588;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2586; lambdaExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2587; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2590; lambdaParameters();
			State = 2591; Match(ARROW);
			State = 2592; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_lambdaParameters);
		int _la;
		try {
			State = 2604;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2594; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2595; Match(LPAREN);
				State = 2597;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
					{
					State = 2596; formalParameterList();
					}
				}

				State = 2599; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2600; Match(LPAREN);
				State = 2601; inferredFormalParameterList();
				State = 2602; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInferredFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606; Match(Identifier);
			State = 2611;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2607; Match(COMMA);
				State = 2608; Match(Identifier);
				}
				}
				State = 2613;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_lambdaBody);
		try {
			State = 2616;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2614; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2615; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_assignmentExpression);
		try {
			State = 2620;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2618; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2619; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622; leftHandSide();
			State = 2623; assignmentOperator();
			State = 2624; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_leftHandSide);
		try {
			State = 2629;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2626; expressionName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2627; fieldAccess();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2628; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2631;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ASSIGN - 66)) | (1L << (ADD_ASSIGN - 66)) | (1L << (SUB_ASSIGN - 66)) | (1L << (MUL_ASSIGN - 66)) | (1L << (DIV_ASSIGN - 66)) | (1L << (AND_ASSIGN - 66)) | (1L << (OR_ASSIGN - 66)) | (1L << (XOR_ASSIGN - 66)) | (1L << (MOD_ASSIGN - 66)) | (1L << (LSHIFT_ASSIGN - 66)) | (1L << (RSHIFT_ASSIGN - 66)) | (1L << (URSHIFT_ASSIGN - 66)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_conditionalExpression);
		try {
			State = 2640;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2633; conditionalOrExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2634; conditionalOrExpression(0);
				State = 2635; Match(QUESTION);
				State = 2636; expression();
				State = 2637; Match(COLON);
				State = 2638; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2643; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2650;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2645;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2646; Match(OR);
					State = 2647; conditionalAndExpression(0);
					}
					} 
				}
				State = 2652;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 436;
		EnterRecursionRule(_localctx, 436, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2654; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2661;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2656;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2657; Match(AND);
					State = 2658; inclusiveOrExpression(0);
					}
					} 
				}
				State = 2663;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 438;
		EnterRecursionRule(_localctx, 438, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2665; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2672;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2667;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2668; Match(BITOR);
					State = 2669; exclusiveOrExpression(0);
					}
					} 
				}
				State = 2674;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2676; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2683;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2678;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2679; Match(CARET);
					State = 2680; andExpression(0);
					}
					} 
				}
				State = 2685;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 442;
		EnterRecursionRule(_localctx, 442, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2687; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2694;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2689;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2690; Match(BITAND);
					State = 2691; equalityExpression(0);
					}
					} 
				}
				State = 2696;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 444;
		EnterRecursionRule(_localctx, 444, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2698; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2708;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2706;
					switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2700;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2701; Match(EQUAL);
						State = 2702; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2703;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2704; Match(NOTEQUAL);
						State = 2705; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2710;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2712; shiftExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2723;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2721;
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2714;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2715; compareOperator();
						State = 2716; shiftExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2718;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2719; Match(INSTANCEOF);
						State = 2720; referenceType();
						}
						break;
					}
					} 
				}
				State = 2725;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2726;
			_la = _input.La(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (GT - 67)) | (1L << (LT - 67)) | (1L << (LE - 67)) | (1L << (GE - 67)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(_ctx, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 450;
		EnterRecursionRule(_localctx, 450, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2729; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2746;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2744;
					switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2731;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2732; Match(LT);
						State = 2733; Match(LT);
						State = 2734; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2735;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2736; Match(GT);
						State = 2737; Match(GT);
						State = 2738; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2739;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2740; Match(GT);
						State = 2741; Match(GT);
						State = 2742; Match(GT);
						State = 2743; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2748;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 452;
		EnterRecursionRule(_localctx, 452, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2750; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2760;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,313,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2758;
					switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2752;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2753; Match(ADD);
						State = 2754; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2755;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2756; Match(SUB);
						State = 2757; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2762;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,313,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 454;
		EnterRecursionRule(_localctx, 454, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2764; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2777;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,315,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2775;
					switch ( Interpreter.AdaptivePredict(_input,314,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2766;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2767; Match(MUL);
						State = 2768; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2769;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2770; Match(DIV);
						State = 2771; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2772;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2773; Match(MOD);
						State = 2774; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2779;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,315,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_unaryExpression);
		try {
			State = 2787;
			switch (_input.La(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2780; preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2781; preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2782; Match(ADD);
				State = 2783; unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2784; Match(SUB);
				State = 2785; unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2786; unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 458, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2789; Match(INC);
			State = 2790; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2792; Match(DEC);
			State = 2793; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2801;
			switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2795; postfixExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2796; Match(TILDE);
				State = 2797; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2798; Match(BANG);
				State = 2799; unaryExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2800; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2805;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				State = 2803; primary();
				}
				break;

			case 2:
				{
				State = 2804; expressionName();
				}
				break;
			}
			State = 2811;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,320,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2809;
					switch (_input.La(1)) {
					case INC:
						{
						State = 2807; postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 2808; postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2813;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,320,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2814; postfixExpression();
			State = 2815; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2817; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2819; postfixExpression();
			State = 2820; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2822; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_castExpression);
		int _la;
		try {
			State = 2851;
			switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2824; Match(LPAREN);
				State = 2825; primitiveType();
				State = 2826; Match(RPAREN);
				State = 2827; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829; Match(LPAREN);
				State = 2830; referenceType();
				State = 2834;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 2831; additionalBound();
					}
					}
					State = 2836;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2837; Match(RPAREN);
				State = 2838; unaryExpressionNotPlusMinus();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2840; Match(LPAREN);
				State = 2841; referenceType();
				State = 2845;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 2842; additionalBound();
					}
					}
					State = 2847;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2848; Match(RPAREN);
				State = 2849; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return packageName_sempred((PackageNameContext)_localctx, predIndex);

		case 28: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);

		case 31: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);

		case 217: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 218: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 219: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 220: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 221: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 222: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 223: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 225: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);

		case 226: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 227: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);

		case 14: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(_ctx, 2);

		case 16: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3m\xB28\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x5\x3\x1E3\n\x3\x3\x4\a\x4\x1E6\n\x4\f\x4\xE\x4\x1E9"+
		"\v\x4\x3\x4\x3\x4\a\x4\x1ED\n\x4\f\x4\xE\x4\x1F0\v\x4\x3\x4\x5\x4\x1F3"+
		"\n\x4\x3\x5\x3\x5\x5\x5\x1F7\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x5\b\x200\n\b\x3\t\x3\t\x5\t\x204\n\t\x3\t\x3\t\a\t\x208\n\t\f\t\xE\t"+
		"\x20B\v\t\x3\n\a\n\x20E\n\n\f\n\xE\n\x211\v\n\x3\n\x3\n\x5\n\x215\n\n"+
		"\x3\n\x3\n\x3\n\a\n\x21A\n\n\f\n\xE\n\x21D\v\n\x3\n\x3\n\x5\n\x221\n\n"+
		"\x5\n\x223\n\n\x3\v\x3\v\a\v\x227\n\v\f\v\xE\v\x22A\v\v\x3\v\x3\v\x5\v"+
		"\x22E\n\v\x3\f\a\f\x231\n\f\f\f\xE\f\x234\v\f\x3\f\x3\f\x5\f\x238\n\f"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\a\x10\x241\n\x10\f\x10\xE\x10"+
		"\x244\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x251\n\x11\x3\x12\a\x12\x254\n\x12\f\x12\xE"+
		"\x12\x257\v\x12\x3\x12\x3\x12\x3\x12\a\x12\x25C\n\x12\f\x12\xE\x12\x25F"+
		"\v\x12\x3\x12\x3\x12\a\x12\x263\n\x12\f\x12\xE\x12\x266\v\x12\x3\x13\a"+
		"\x13\x269\n\x13\f\x13\xE\x13\x26C\v\x13\x3\x13\x3\x13\x5\x13\x270\n\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x279\n\x15\f\x15"+
		"\xE\x15\x27C\v\x15\x5\x15\x27E\n\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\x28A\n\x18\f\x18\xE\x18\x28D"+
		"\v\x18\x3\x19\x3\x19\x5\x19\x291\n\x19\x3\x1A\a\x1A\x294\n\x1A\f\x1A\xE"+
		"\x1A\x297\v\x1A\x3\x1A\x3\x1A\x5\x1A\x29B\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x5\x1B\x2A1\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C"+
		"\x2A9\n\x1C\f\x1C\xE\x1C\x2AC\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x5\x1D\x2B3\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x2BB"+
		"\n\x1E\f\x1E\xE\x1E\x2BE\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F"+
		"\x2C5\n\x1F\x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\a!\x2CF\n!\f!\xE!\x2D2\v!"+
		"\x3\"\x5\"\x2D5\n\"\x3\"\a\"\x2D8\n\"\f\"\xE\"\x2DB\v\"\x3\"\a\"\x2DE"+
		"\n\"\f\"\xE\"\x2E1\v\"\x3\"\x3\"\x3#\a#\x2E6\n#\f#\xE#\x2E9\v#\x3#\x3"+
		"#\x3#\x3#\a#\x2EF\n#\f#\xE#\x2F2\v#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x5"+
		"%\x2FC\n%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x5*\x319\n*\x3+"+
		"\x3+\x5+\x31D\n+\x3,\a,\x320\n,\f,\xE,\x323\v,\x3,\x3,\x3,\x5,\x328\n"+
		",\x3,\x5,\x32B\n,\x3,\x5,\x32E\n,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x5-\x33A\n-\x3.\x3.\x3.\x3.\x3/\x3/\x3/\a/\x343\n/\f/\xE/\x346\v"+
		"/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\a\x32"+
		"\x351\n\x32\f\x32\xE\x32\x354\v\x32\x3\x33\x3\x33\a\x33\x358\n\x33\f\x33"+
		"\xE\x33\x35B\v\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x363"+
		"\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x36A\n\x35\x3\x36\a\x36"+
		"\x36D\n\x36\f\x36\xE\x36\x370\v\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x37E\n\x37\x3"+
		"\x38\x3\x38\x3\x38\a\x38\x383\n\x38\f\x38\xE\x38\x386\v\x38\x3\x39\x3"+
		"\x39\x3\x39\x5\x39\x38B\n\x39\x3:\x3:\x5:\x38F\n:\x3;\x3;\x5;\x393\n;"+
		"\x3<\x3<\x5<\x397\n<\x3=\x3=\x5=\x39B\n=\x3>\x3>\x3>\x5>\x3A0\n>\x3?\x3"+
		"?\x5?\x3A4\n?\x3?\x3?\a?\x3A8\n?\f?\xE?\x3AB\v?\x3@\x3@\x5@\x3AF\n@\x3"+
		"@\x3@\x3@\a@\x3B4\n@\f@\xE@\x3B7\v@\x3@\x3@\x5@\x3BB\n@\x5@\x3BD\n@\x3"+
		"\x41\x3\x41\a\x41\x3C1\n\x41\f\x41\xE\x41\x3C4\v\x41\x3\x41\x3\x41\x5"+
		"\x41\x3C8\n\x41\x3\x42\x3\x42\x5\x42\x3CC\n\x42\x3\x43\x3\x43\x3\x44\x3"+
		"\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5"+
		"G\x3DF\nG\x3H\aH\x3E2\nH\fH\xEH\x3E5\vH\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3"+
		"I\x3I\x3I\x3I\x3I\x3I\x5I\x3F4\nI\x3J\x3J\x3J\x5J\x3F9\nJ\x3J\x3J\aJ\x3FD"+
		"\nJ\fJ\xEJ\x400\vJ\x3J\x3J\x3J\x5J\x405\nJ\x5J\x407\nJ\x3K\x3K\x5K\x40B"+
		"\nK\x3L\x3L\x3L\x5L\x410\nL\x3L\x3L\x5L\x414\nL\x3M\x3M\x3M\x3M\x3M\x5"+
		"M\x41B\nM\x3N\x3N\x3N\aN\x420\nN\fN\xEN\x423\vN\x3N\x3N\x3N\aN\x428\n"+
		"N\fN\xEN\x42B\vN\x5N\x42D\nN\x3O\aO\x430\nO\fO\xEO\x433\vO\x3O\x3O\x3"+
		"O\x3P\x3P\x5P\x43A\nP\x3Q\aQ\x43D\nQ\fQ\xEQ\x440\vQ\x3Q\x3Q\aQ\x444\n"+
		"Q\fQ\xEQ\x447\vQ\x3Q\x3Q\x3Q\x3Q\x5Q\x44D\nQ\x3R\aR\x450\nR\fR\xER\x453"+
		"\vR\x3R\x3R\x3R\x5R\x458\nR\x3R\x3R\x3S\x3S\x3S\x3T\x3T\x3T\aT\x462\n"+
		"T\fT\xET\x465\vT\x3U\x3U\x5U\x469\nU\x3V\x3V\x5V\x46D\nV\x3W\x3W\x3X\x3"+
		"X\x3X\x3Y\aY\x475\nY\fY\xEY\x478\vY\x3Y\x3Y\x5Y\x47C\nY\x3Y\x3Y\x3Z\x3"+
		"Z\x3Z\x3Z\x5Z\x484\nZ\x3[\x5[\x487\n[\x3[\x3[\x3[\x5[\x48C\n[\x3[\x3["+
		"\x3\\\x3\\\x3]\x3]\x5]\x494\n]\x3]\x5]\x497\n]\x3]\x3]\x3^\x5^\x49C\n"+
		"^\x3^\x3^\x3^\x5^\x4A1\n^\x3^\x3^\x3^\x5^\x4A6\n^\x3^\x3^\x3^\x5^\x4AB"+
		"\n^\x3^\x3^\x3^\x3^\x3^\x5^\x4B2\n^\x3^\x3^\x3^\x5^\x4B7\n^\x3^\x3^\x3"+
		"^\x3^\x3^\x3^\x5^\x4BF\n^\x3^\x3^\x3^\x5^\x4C4\n^\x3^\x3^\x3^\x5^\x4C9"+
		"\n^\x3_\a_\x4CC\n_\f_\xE_\x4CF\v_\x3_\x3_\x3_\x5_\x4D4\n_\x3_\x3_\x3`"+
		"\x3`\x5`\x4DA\n`\x3`\x5`\x4DD\n`\x3`\x5`\x4E0\n`\x3`\x3`\x3\x61\x3\x61"+
		"\x3\x61\a\x61\x4E7\n\x61\f\x61\xE\x61\x4EA\v\x61\x3\x62\a\x62\x4ED\n\x62"+
		"\f\x62\xE\x62\x4F0\v\x62\x3\x62\x3\x62\x3\x62\x5\x62\x4F5\n\x62\x3\x62"+
		"\x5\x62\x4F8\n\x62\x3\x62\x5\x62\x4FB\n\x62\x3\x63\x3\x63\x3\x64\x3\x64"+
		"\a\x64\x501\n\x64\f\x64\xE\x64\x504\v\x64\x3\x65\x3\x65\x5\x65\x508\n"+
		"\x65\x3\x66\a\x66\x50B\n\x66\f\x66\xE\x66\x50E\v\x66\x3\x66\x3\x66\x3"+
		"\x66\x5\x66\x513\n\x66\x3\x66\x5\x66\x516\n\x66\x3\x66\x3\x66\x3g\x3g"+
		"\x3g\x3g\x3g\x3g\x3g\x5g\x521\ng\x3h\x3h\x3h\x3i\x3i\ai\x528\ni\fi\xE"+
		"i\x52B\vi\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x5j\x534\nj\x3k\ak\x537\nk\fk\xE"+
		"k\x53A\vk\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x5l\x544\nl\x3m\am\x547\nm\f"+
		"m\xEm\x54A\vm\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3n\x3n\x5n\x555\nn\x3o\ao\x558"+
		"\no\fo\xEo\x55B\vo\x3o\x3o\x3o\x3o\x3o\x3p\x3p\ap\x564\np\fp\xEp\x567"+
		"\vp\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x5q\x570\nq\x3r\ar\x573\nr\fr\xEr\x576"+
		"\vr\x3r\x3r\x3r\x3r\x3r\x5r\x57D\nr\x3r\x5r\x580\nr\x3r\x3r\x3s\x3s\x3"+
		"s\x5s\x587\ns\x3t\x3t\x3t\x3u\x3u\x3u\x5u\x58F\nu\x3v\x3v\x3v\x3v\x5v"+
		"\x595\nv\x3v\x3v\x3w\x3w\x3w\aw\x59C\nw\fw\xEw\x59F\vw\x3x\x3x\x3x\x3"+
		"x\x3y\x3y\x3y\x5y\x5A8\ny\x3z\x3z\x5z\x5AC\nz\x3z\x5z\x5AF\nz\x3z\x3z"+
		"\x3{\x3{\x3{\a{\x5B6\n{\f{\xE{\x5B9\v{\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3"+
		"}\x3}\x3~\x3~\x5~\x5C6\n~\x3~\x5~\x5C9\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F"+
		"\a\x7F\x5D0\n\x7F\f\x7F\xE\x7F\x5D3\v\x7F\x3\x80\x3\x80\x5\x80\x5D7\n"+
		"\x80\x3\x80\x3\x80\x3\x81\x3\x81\a\x81\x5DD\n\x81\f\x81\xE\x81\x5E0\v"+
		"\x81\x3\x82\x3\x82\x3\x82\x5\x82\x5E5\n\x82\x3\x83\x3\x83\x3\x83\x3\x84"+
		"\a\x84\x5EB\n\x84\f\x84\xE\x84\x5EE\v\x84\x3\x84\x3\x84\x3\x84\x3\x85"+
		"\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\x5F9\n\x85\x3\x86\x3\x86\x3"+
		"\x86\x3\x86\x3\x86\x5\x86\x600\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87"+
		"\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\x60E\n\x87\x3"+
		"\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3"+
		"\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5"+
		"\x8C\x624\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F"+
		"\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\x646\n\x90\x3\x91\x3\x91\x3\x91\x3"+
		"\x91\x3\x91\x3\x91\x3\x92\x3\x92\a\x92\x650\n\x92\f\x92\xE\x92\x653\v"+
		"\x92\x3\x92\a\x92\x656\n\x92\f\x92\xE\x92\x659\v\x92\x3\x92\x3\x92\x3"+
		"\x93\x3\x93\x3\x93\x3\x94\x3\x94\a\x94\x662\n\x94\f\x94\xE\x94\x665\v"+
		"\x94\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x5\x95\x671\n\x95\x3\x96\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97"+
		"\x3\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x99\x3\x99\x3\x99"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A\x5\x9A\x68B\n\x9A\x3"+
		"\x9B\x3\x9B\x5\x9B\x68F\n\x9B\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x694\n\x9C\x3"+
		"\x9C\x3\x9C\x5\x9C\x698\n\x9C\x3\x9C\x3\x9C\x5\x9C\x69C\n\x9C\x3\x9C\x3"+
		"\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x6A4\n\x9D\x3\x9D\x3\x9D\x5\x9D"+
		"\x6A8\n\x9D\x3\x9D\x3\x9D\x5\x9D\x6AC\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9E"+
		"\x3\x9E\x5\x9E\x6B3\n\x9E\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3\xA0\a\xA0\x6BA"+
		"\n\xA0\f\xA0\xE\xA0\x6BD\v\xA0\x3\xA1\x3\xA1\x3\xA1\a\xA1\x6C2\n\xA1\f"+
		"\xA1\xE\xA1\x6C5\v\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1"+
		"\x3\xA2\x3\xA2\x3\xA2\a\xA2\x6D1\n\xA2\f\xA2\xE\xA2\x6D4\v\xA2\x3\xA2"+
		"\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x5\xA3\x6DF\n"+
		"\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x5\xA4\x6E5\n\xA4\x3\xA4\x3\xA4\x3\xA5"+
		"\x3\xA5\x5\xA5\x6EB\n\xA5\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3"+
		"\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\x5\xA8\x700\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x705"+
		"\n\xA8\x3\xA9\x3\xA9\a\xA9\x709\n\xA9\f\xA9\xE\xA9\x70C\v\xA9\x3\xAA\x3"+
		"\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAB\a\xAB\x715\n\xAB\f\xAB\xE\xAB"+
		"\x718\v\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAC\a\xAC\x720\n\xAC"+
		"\f\xAC\xE\xAC\x723\v\xAC\x3\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3"+
		"\xAE\x5\xAE\x72C\n\xAE\x3\xAE\x5\xAE\x72F\n\xAE\x3\xAF\x3\xAF\x3\xAF\x5"+
		"\xAF\x734\n\xAF\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\a\xB0\x73B\n\xB0\f"+
		"\xB0\xE\xB0\x73E\v\xB0\x3\xB1\a\xB1\x741\n\xB1\f\xB1\xE\xB1\x744\v\xB1"+
		"\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x5\xB2\x74D\n\xB2\x3"+
		"\xB2\a\xB2\x750\n\xB2\f\xB2\xE\xB2\x753\v\xB2\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\a\xB3\x759\n\xB3\f\xB3\xE\xB3\x75C\v\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x772\n\xB3\x3\xB4"+
		"\x3\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\a\xB5\x77A\n\xB5\f\xB5\xE\xB5\x77D"+
		"\v\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x792\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x799\n\xB6"+
		"\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8\x7A1\n\xB8\x3\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\a\xB9\x7A7\n\xB9\f\xB9\xE\xB9\x7AA\v\xB9\x3\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9\x7B2\n\xB9\f\xB9\xE\xB9\x7B5\v"+
		"\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3"+
		"\xB9\x5\xB9\x7CB\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\a\xBB"+
		"\x7D3\n\xBB\f\xBB\xE\xBB\x7D6\v\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\a\xBB\x7DE\n\xBB\f\xBB\xE\xBB\x7E1\v\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\x7F6\n\xBB\x3\xBC\x3"+
		"\xBC\x5\xBC\x7FA\n\xBC\x3\xBC\a\xBC\x7FD\n\xBC\f\xBC\xE\xBC\x800\v\xBC"+
		"\x3\xBC\x3\xBC\x3\xBC\a\xBC\x805\n\xBC\f\xBC\xE\xBC\x808\v\xBC\x3\xBC"+
		"\a\xBC\x80B\n\xBC\f\xBC\xE\xBC\x80E\v\xBC\x3\xBC\x5\xBC\x811\n\xBC\x3"+
		"\xBC\x3\xBC\x5\xBC\x815\n\xBC\x3\xBC\x3\xBC\x5\xBC\x819\n\xBC\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x5\xBC\x81F\n\xBC\x3\xBC\a\xBC\x822\n\xBC\f\xBC\xE"+
		"\xBC\x825\v\xBC\x3\xBC\x3\xBC\x5\xBC\x829\n\xBC\x3\xBC\x3\xBC\x5\xBC\x82D"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x831\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x837\n\xBC\x3\xBC\a\xBC\x83A\n\xBC\f\xBC\xE\xBC\x83D\v\xBC\x3\xBC"+
		"\x3\xBC\x5\xBC\x841\n\xBC\x3\xBC\x3\xBC\x5\xBC\x845\n\xBC\x3\xBC\x3\xBC"+
		"\x5\xBC\x849\n\xBC\x5\xBC\x84B\n\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x850"+
		"\n\xBD\x3\xBD\a\xBD\x853\n\xBD\f\xBD\xE\xBD\x856\v\xBD\x3\xBD\x3\xBD\x5"+
		"\xBD\x85A\n\xBD\x3\xBD\x3\xBD\x5\xBD\x85E\n\xBD\x3\xBD\x3\xBD\x5\xBD\x862"+
		"\n\xBD\x3\xBE\x3\xBE\x5\xBE\x866\n\xBE\x3\xBE\a\xBE\x869\n\xBE\f\xBE\xE"+
		"\xBE\x86C\v\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x871\n\xBE\f\xBE\xE\xBE\x874"+
		"\v\xBE\x3\xBE\a\xBE\x877\n\xBE\f\xBE\xE\xBE\x87A\v\xBE\x3\xBE\x5\xBE\x87D"+
		"\n\xBE\x3\xBE\x3\xBE\x5\xBE\x881\n\xBE\x3\xBE\x3\xBE\x5\xBE\x885\n\xBE"+
		"\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x88B\n\xBE\x3\xBE\a\xBE\x88E\n\xBE"+
		"\f\xBE\xE\xBE\x891\v\xBE\x3\xBE\x3\xBE\x5\xBE\x895\n\xBE\x3\xBE\x3\xBE"+
		"\x5\xBE\x899\n\xBE\x3\xBE\x3\xBE\x5\xBE\x89D\n\xBE\x5\xBE\x89F\n\xBE\x3"+
		"\xBF\x3\xBF\x3\xBF\x5\xBF\x8A4\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x8B3\n"+
		"\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3"+
		"\xC2\x3\xC2\x3\xC2\x5\xC2\x8C1\n\xC2\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3\x8CD\n\xC3\x3\xC3\x3\xC3\x3"+
		"\xC3\x3\xC3\x3\xC3\a\xC3\x8D4\n\xC3\f\xC3\xE\xC3\x8D7\v\xC3\x3\xC4\x3"+
		"\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x8E3"+
		"\n\xC4\f\xC4\xE\xC4\x8E6\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x8F2\n\xC5\x3\xC5\x3\xC5\x3\xC5\x3"+
		"\xC5\x3\xC5\a\xC5\x8F9\n\xC5\f\xC5\xE\xC5\x8FC\v\xC5\x3\xC6\x3\xC6\x3"+
		"\xC6\x5\xC6\x901\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x908"+
		"\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x90D\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x914\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x919\n\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x920\n\xC6\x3\xC6\x3\xC6\x3\xC6"+
		"\x5\xC6\x925\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x92C\n\xC6"+
		"\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x931\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x939\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x93E\n\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x942\n\xC6\x3\xC7\x3\xC7\x5\xC7\x946\n\xC7\x3\xC7\x3"+
		"\xC7\x3\xC7\x5\xC7\x94B\n\xC7\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x952\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x959\n\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x5\xC8\x95E\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x965\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x96A\n\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x5\xC8\x971\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x976"+
		"\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x97E\n\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x5\xC8\x983\n\xC8\x3\xC8\x3\xC8\x5\xC8\x987\n\xC8\x3"+
		"\xC9\x3\xC9\x3\xC9\a\xC9\x98C\n\xC9\f\xC9\xE\xC9\x98F\v\xC9\x3\xCA\x3"+
		"\xCA\x3\xCA\x5\xCA\x994\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA"+
		"\x99B\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9A2\n\xCA\x3\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9A9\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x3\xCA\x5\xCA\x9B1\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x5\xCA\x9B8\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9C0"+
		"\n\xCA\x3\xCB\x3\xCB\x5\xCB\x9C4\n\xCB\x3\xCB\x3\xCB\x3\xCC\x3\xCC\x3"+
		"\xCC\x5\xCC\x9CB\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9D2"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9D9\n\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9E1\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x5\xCC\x9E8\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x5\xCC\x9F0\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x9F6\n\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\x9FC\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\xA08\n\xCD\x3\xCE\x3"+
		"\xCE\a\xCE\xA0C\n\xCE\f\xCE\xE\xCE\xA0F\v\xCE\x3\xCF\a\xCF\xA12\n\xCF"+
		"\f\xCF\xE\xCF\xA15\v\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xD0\x3\xD0\x3"+
		"\xD1\x3\xD1\x5\xD1\xA1F\n\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD3\x3\xD3"+
		"\x3\xD3\x5\xD3\xA28\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\xA2F"+
		"\n\xD3\x3\xD4\x3\xD4\x3\xD4\a\xD4\xA34\n\xD4\f\xD4\xE\xD4\xA37\v\xD4\x3"+
		"\xD5\x3\xD5\x5\xD5\xA3B\n\xD5\x3\xD6\x3\xD6\x5\xD6\xA3F\n\xD6\x3\xD7\x3"+
		"\xD7\x3\xD7\x3\xD7\x3\xD8\x3\xD8\x3\xD8\x5\xD8\xA48\n\xD8\x3\xD9\x3\xD9"+
		"\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x5\xDA\xA53\n\xDA\x3"+
		"\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\a\xDB\xA5B\n\xDB\f\xDB\xE\xDB"+
		"\xA5E\v\xDB\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\a\xDC\xA66\n\xDC"+
		"\f\xDC\xE\xDC\xA69\v\xDC\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\x3\xDD\a\xDD"+
		"\xA71\n\xDD\f\xDD\xE\xDD\xA74\v\xDD\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\a\xDE\xA7C\n\xDE\f\xDE\xE\xDE\xA7F\v\xDE\x3\xDF\x3\xDF\x3\xDF"+
		"\x3\xDF\x3\xDF\x3\xDF\a\xDF\xA87\n\xDF\f\xDF\xE\xDF\xA8A\v\xDF\x3\xE0"+
		"\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\a\xE0\xA95\n"+
		"\xE0\f\xE0\xE\xE0\xA98\v\xE0\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1"+
		"\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\xAA4\n\xE1\f\xE1\xE\xE1\xAA7\v\xE1"+
		"\x3\xE2\x3\xE2\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3"+
		"\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\x3\xE3\a\xE3\xABB\n"+
		"\xE3\f\xE3\xE\xE3\xABE\v\xE3\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4"+
		"\x3\xE4\x3\xE4\x3\xE4\a\xE4\xAC9\n\xE4\f\xE4\xE\xE4\xACC\v\xE4\x3\xE5"+
		"\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5"+
		"\x3\xE5\a\xE5\xADA\n\xE5\f\xE5\xE\xE5\xADD\v\xE5\x3\xE6\x3\xE6\x3\xE6"+
		"\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x5\xE6\xAE6\n\xE6\x3\xE7\x3\xE7\x3\xE7\x3"+
		"\xE8\x3\xE8\x3\xE8\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x5\xE9\xAF4"+
		"\n\xE9\x3\xEA\x3\xEA\x5\xEA\xAF8\n\xEA\x3\xEA\x3\xEA\a\xEA\xAFC\n\xEA"+
		"\f\xEA\xE\xEA\xAFF\v\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEC\x3\xEC\x3\xED\x3"+
		"\xED\x3\xED\x3\xEE\x3\xEE\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3\xEF\x3"+
		"\xEF\x3\xEF\a\xEF\xB13\n\xEF\f\xEF\xE\xEF\xB16\v\xEF\x3\xEF\x3\xEF\x3"+
		"\xEF\x3\xEF\x3\xEF\x3\xEF\a\xEF\xB1E\n\xEF\f\xEF\xE\xEF\xB21\v\xEF\x3"+
		"\xEF\x3\xEF\x3\xEF\x5\xEF\xB26\n\xEF\x3\xEF\x2\x2\xF\x36:@\x1B4\x1B6\x1B8"+
		"\x1BA\x1BC\x1BE\x1C0\x1C4\x1C6\x1C8\xF0\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x182"+
		"\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192\x2\x194"+
		"\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4\x2\x1A6"+
		"\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6\x2\x1B8"+
		"\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8\x2\x1CA"+
		"\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA\x2\x1DC"+
		"\x2\x2\a\x3\x2\x35:\a\x2\a\a\n\n\x1D\x1D\x1F\x1F\'\'\x4\x2\x10\x10\x16"+
		"\x16\x4\x2\x44\x44]g\x4\x2\x45\x46LM\xC15\x2\x1DE\x3\x2\x2\x2\x4\x1E2"+
		"\x3\x2\x2\x2\x6\x1F2\x3\x2\x2\x2\b\x1F6\x3\x2\x2\x2\n\x1F8\x3\x2\x2\x2"+
		"\f\x1FA\x3\x2\x2\x2\xE\x1FF\x3\x2\x2\x2\x10\x203\x3\x2\x2\x2\x12\x222"+
		"\x3\x2\x2\x2\x14\x224\x3\x2\x2\x2\x16\x232\x3\x2\x2\x2\x18\x239\x3\x2"+
		"\x2\x2\x1A\x23B\x3\x2\x2\x2\x1C\x23D\x3\x2\x2\x2\x1E\x242\x3\x2\x2\x2"+
		" \x250\x3\x2\x2\x2\"\x255\x3\x2\x2\x2$\x26A\x3\x2\x2\x2&\x271\x3\x2\x2"+
		"\x2(\x27D\x3\x2\x2\x2*\x27F\x3\x2\x2\x2,\x282\x3\x2\x2\x2.\x286\x3\x2"+
		"\x2\x2\x30\x290\x3\x2\x2\x2\x32\x295\x3\x2\x2\x2\x34\x2A0\x3\x2\x2\x2"+
		"\x36\x2A2\x3\x2\x2\x2\x38\x2B2\x3\x2\x2\x2:\x2B4\x3\x2\x2\x2<\x2C4\x3"+
		"\x2\x2\x2>\x2C6\x3\x2\x2\x2@\x2C8\x3\x2\x2\x2\x42\x2D4\x3\x2\x2\x2\x44"+
		"\x2E7\x3\x2\x2\x2\x46\x2F5\x3\x2\x2\x2H\x2FB\x3\x2\x2\x2J\x2FD\x3\x2\x2"+
		"\x2L\x301\x3\x2\x2\x2N\x307\x3\x2\x2\x2P\x30E\x3\x2\x2\x2R\x318\x3\x2"+
		"\x2\x2T\x31C\x3\x2\x2\x2V\x321\x3\x2\x2\x2X\x339\x3\x2\x2\x2Z\x33B\x3"+
		"\x2\x2\x2\\\x33F\x3\x2\x2\x2^\x347\x3\x2\x2\x2`\x34A\x3\x2\x2\x2\x62\x34D"+
		"\x3\x2\x2\x2\x64\x355\x3\x2\x2\x2\x66\x362\x3\x2\x2\x2h\x369\x3\x2\x2"+
		"\x2j\x36E\x3\x2\x2\x2l\x37D\x3\x2\x2\x2n\x37F\x3\x2\x2\x2p\x387\x3\x2"+
		"\x2\x2r\x38C\x3\x2\x2\x2t\x392\x3\x2\x2\x2v\x396\x3\x2\x2\x2x\x39A\x3"+
		"\x2\x2\x2z\x39F\x3\x2\x2\x2|\x3A3\x3\x2\x2\x2~\x3BC\x3\x2\x2\x2\x80\x3BE"+
		"\x3\x2\x2\x2\x82\x3C9\x3\x2\x2\x2\x84\x3CD\x3\x2\x2\x2\x86\x3CF\x3\x2"+
		"\x2\x2\x88\x3D1\x3\x2\x2\x2\x8A\x3D3\x3\x2\x2\x2\x8C\x3DE\x3\x2\x2\x2"+
		"\x8E\x3E3\x3\x2\x2\x2\x90\x3F3\x3\x2\x2\x2\x92\x406\x3\x2\x2\x2\x94\x40A"+
		"\x3\x2\x2\x2\x96\x40C\x3\x2\x2\x2\x98\x41A\x3\x2\x2\x2\x9A\x42C\x3\x2"+
		"\x2\x2\x9C\x431\x3\x2\x2\x2\x9E\x439\x3\x2\x2\x2\xA0\x44C\x3\x2\x2\x2"+
		"\xA2\x451\x3\x2\x2\x2\xA4\x45B\x3\x2\x2\x2\xA6\x45E\x3\x2\x2\x2\xA8\x468"+
		"\x3\x2\x2\x2\xAA\x46C\x3\x2\x2\x2\xAC\x46E\x3\x2\x2\x2\xAE\x470\x3\x2"+
		"\x2\x2\xB0\x476\x3\x2\x2\x2\xB2\x483\x3\x2\x2\x2\xB4\x486\x3\x2\x2\x2"+
		"\xB6\x48F\x3\x2\x2\x2\xB8\x491\x3\x2\x2\x2\xBA\x4C8\x3\x2\x2\x2\xBC\x4CD"+
		"\x3\x2\x2\x2\xBE\x4D7\x3\x2\x2\x2\xC0\x4E3\x3\x2\x2\x2\xC2\x4EE\x3\x2"+
		"\x2\x2\xC4\x4FC\x3\x2\x2\x2\xC6\x4FE\x3\x2\x2\x2\xC8\x507\x3\x2\x2\x2"+
		"\xCA\x50C\x3\x2\x2\x2\xCC\x520\x3\x2\x2\x2\xCE\x522\x3\x2\x2\x2\xD0\x525"+
		"\x3\x2\x2\x2\xD2\x533\x3\x2\x2\x2\xD4\x538\x3\x2\x2\x2\xD6\x543\x3\x2"+
		"\x2\x2\xD8\x548\x3\x2\x2\x2\xDA\x554\x3\x2\x2\x2\xDC\x559\x3\x2\x2\x2"+
		"\xDE\x561\x3\x2\x2\x2\xE0\x56F\x3\x2\x2\x2\xE2\x574\x3\x2\x2\x2\xE4\x586"+
		"\x3\x2\x2\x2\xE6\x588\x3\x2\x2\x2\xE8\x58E\x3\x2\x2\x2\xEA\x590\x3\x2"+
		"\x2\x2\xEC\x598\x3\x2\x2\x2\xEE\x5A0\x3\x2\x2\x2\xF0\x5A7\x3\x2\x2\x2"+
		"\xF2\x5A9\x3\x2\x2\x2\xF4\x5B2\x3\x2\x2\x2\xF6\x5BA\x3\x2\x2\x2\xF8\x5BD"+
		"\x3\x2\x2\x2\xFA\x5C3\x3\x2\x2\x2\xFC\x5CC\x3\x2\x2\x2\xFE\x5D4\x3\x2"+
		"\x2\x2\x100\x5DA\x3\x2\x2\x2\x102\x5E4\x3\x2\x2\x2\x104\x5E6\x3\x2\x2"+
		"\x2\x106\x5EC\x3\x2\x2\x2\x108\x5F8\x3\x2\x2\x2\x10A\x5FF\x3\x2\x2\x2"+
		"\x10C\x60D\x3\x2\x2\x2\x10E\x60F\x3\x2\x2\x2\x110\x611\x3\x2\x2\x2\x112"+
		"\x615\x3\x2\x2\x2\x114\x619\x3\x2\x2\x2\x116\x623\x3\x2\x2\x2\x118\x625"+
		"\x3\x2\x2\x2\x11A\x62B\x3\x2\x2\x2\x11C\x633\x3\x2\x2\x2\x11E\x645\x3"+
		"\x2\x2\x2\x120\x647\x3\x2\x2\x2\x122\x64D\x3\x2\x2\x2\x124\x65C\x3\x2"+
		"\x2\x2\x126\x65F\x3\x2\x2\x2\x128\x670\x3\x2\x2\x2\x12A\x672\x3\x2\x2"+
		"\x2\x12C\x674\x3\x2\x2\x2\x12E\x67A\x3\x2\x2\x2\x130\x680\x3\x2\x2\x2"+
		"\x132\x68A\x3\x2\x2\x2\x134\x68E\x3\x2\x2\x2\x136\x690\x3\x2\x2\x2\x138"+
		"\x6A0\x3\x2\x2\x2\x13A\x6B2\x3\x2\x2\x2\x13C\x6B4\x3\x2\x2\x2\x13E\x6B6"+
		"\x3\x2\x2\x2\x140\x6BE\x3\x2\x2\x2\x142\x6CD\x3\x2\x2\x2\x144\x6DC\x3"+
		"\x2\x2\x2\x146\x6E2\x3\x2\x2\x2\x148\x6E8\x3\x2\x2\x2\x14A\x6EE\x3\x2"+
		"\x2\x2\x14C\x6F2\x3\x2\x2\x2\x14E\x704\x3\x2\x2\x2\x150\x706\x3\x2\x2"+
		"\x2\x152\x70D\x3\x2\x2\x2\x154\x716\x3\x2\x2\x2\x156\x71C\x3\x2\x2\x2"+
		"\x158\x724\x3\x2\x2\x2\x15A\x727\x3\x2\x2\x2\x15C\x730\x3\x2\x2\x2\x15E"+
		"\x737\x3\x2\x2\x2\x160\x742\x3\x2\x2\x2\x162\x74C\x3\x2\x2\x2\x164\x771"+
		"\x3\x2\x2\x2\x166\x773\x3\x2\x2\x2\x168\x791\x3\x2\x2\x2\x16A\x798\x3"+
		"\x2\x2\x2\x16C\x79A\x3\x2\x2\x2\x16E\x7A0\x3\x2\x2\x2\x170\x7CA\x3\x2"+
		"\x2\x2\x172\x7CC\x3\x2\x2\x2\x174\x7F5\x3\x2\x2\x2\x176\x84A\x3\x2\x2"+
		"\x2\x178\x84C\x3\x2\x2\x2\x17A\x89E\x3\x2\x2\x2\x17C\x8A3\x3\x2\x2\x2"+
		"\x17E\x8B2\x3\x2\x2\x2\x180\x8B4\x3\x2\x2\x2\x182\x8C0\x3\x2\x2\x2\x184"+
		"\x8CC\x3\x2\x2\x2\x186\x8D8\x3\x2\x2\x2\x188\x8F1\x3\x2\x2\x2\x18A\x941"+
		"\x3\x2\x2\x2\x18C\x943\x3\x2\x2\x2\x18E\x986\x3\x2\x2\x2\x190\x988\x3"+
		"\x2\x2\x2\x192\x9BF\x3\x2\x2\x2\x194\x9C1\x3\x2\x2\x2\x196\x9EF\x3\x2"+
		"\x2\x2\x198\xA07\x3\x2\x2\x2\x19A\xA09\x3\x2\x2\x2\x19C\xA13\x3\x2\x2"+
		"\x2\x19E\xA1A\x3\x2\x2\x2\x1A0\xA1E\x3\x2\x2\x2\x1A2\xA20\x3\x2\x2\x2"+
		"\x1A4\xA2E\x3\x2\x2\x2\x1A6\xA30\x3\x2\x2\x2\x1A8\xA3A\x3\x2\x2\x2\x1AA"+
		"\xA3E\x3\x2\x2\x2\x1AC\xA40\x3\x2\x2\x2\x1AE\xA47\x3\x2\x2\x2\x1B0\xA49"+
		"\x3\x2\x2\x2\x1B2\xA52\x3\x2\x2\x2\x1B4\xA54\x3\x2\x2\x2\x1B6\xA5F\x3"+
		"\x2\x2\x2\x1B8\xA6A\x3\x2\x2\x2\x1BA\xA75\x3\x2\x2\x2\x1BC\xA80\x3\x2"+
		"\x2\x2\x1BE\xA8B\x3\x2\x2\x2\x1C0\xA99\x3\x2\x2\x2\x1C2\xAA8\x3\x2\x2"+
		"\x2\x1C4\xAAA\x3\x2\x2\x2\x1C6\xABF\x3\x2\x2\x2\x1C8\xACD\x3\x2\x2\x2"+
		"\x1CA\xAE5\x3\x2\x2\x2\x1CC\xAE7\x3\x2\x2\x2\x1CE\xAEA\x3\x2\x2\x2\x1D0"+
		"\xAF3\x3\x2\x2\x2\x1D2\xAF7\x3\x2\x2\x2\x1D4\xB00\x3\x2\x2\x2\x1D6\xB03"+
		"\x3\x2\x2\x2\x1D8\xB05\x3\x2\x2\x2\x1DA\xB08\x3\x2\x2\x2\x1DC\xB25\x3"+
		"\x2\x2\x2\x1DE\x1DF\t\x2\x2\x2\x1DF\x3\x3\x2\x2\x2\x1E0\x1E3\x5\x6\x4"+
		"\x2\x1E1\x1E3\x5\xE\b\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E1\x3\x2\x2\x2\x1E3"+
		"\x5\x3\x2\x2\x2\x1E4\x1E6\x5\xE8u\x2\x1E5\x1E4\x3\x2\x2\x2\x1E6\x1E9\x3"+
		"\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1EA\x3\x2"+
		"\x2\x2\x1E9\x1E7\x3\x2\x2\x2\x1EA\x1F3\x5\b\x5\x2\x1EB\x1ED\x5\xE8u\x2"+
		"\x1EC\x1EB\x3\x2\x2\x2\x1ED\x1F0\x3\x2\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE"+
		"\x1EF\x3\x2\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0\x1EE\x3\x2\x2\x2\x1F1\x1F3"+
		"\a\x5\x2\x2\x1F2\x1E7\x3\x2\x2\x2\x1F2\x1EE\x3\x2\x2\x2\x1F3\a\x3\x2\x2"+
		"\x2\x1F4\x1F7\x5\n\x6\x2\x1F5\x1F7\x5\f\a\x2\x1F6\x1F4\x3\x2\x2\x2\x1F6"+
		"\x1F5\x3\x2\x2\x2\x1F7\t\x3\x2\x2\x2\x1F8\x1F9\t\x3\x2\x2\x1F9\v\x3\x2"+
		"\x2\x2\x1FA\x1FB\t\x4\x2\x2\x1FB\r\x3\x2\x2\x2\x1FC\x200\x5\x10\t\x2\x1FD"+
		"\x200\x5\x1E\x10\x2\x1FE\x200\x5 \x11\x2\x1FF\x1FC\x3\x2\x2\x2\x1FF\x1FD"+
		"\x3\x2\x2\x2\x1FF\x1FE\x3\x2\x2\x2\x200\xF\x3\x2\x2\x2\x201\x204\x5\x16"+
		"\f\x2\x202\x204\x5\x1C\xF\x2\x203\x201\x3\x2\x2\x2\x203\x202\x3\x2\x2"+
		"\x2\x204\x209\x3\x2\x2\x2\x205\x208\x5\x14\v\x2\x206\x208\x5\x1A\xE\x2"+
		"\x207\x205\x3\x2\x2\x2\x207\x206\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2\x209"+
		"\x207\x3\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x11\x3\x2\x2\x2\x20B\x209"+
		"\x3\x2\x2\x2\x20C\x20E\x5\xE8u\x2\x20D\x20C\x3\x2\x2\x2\x20E\x211\x3\x2"+
		"\x2\x2\x20F\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x212\x3\x2\x2"+
		"\x2\x211\x20F\x3\x2\x2\x2\x212\x214\ah\x2\x2\x213\x215\x5,\x17\x2\x214"+
		"\x213\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x223\x3\x2\x2\x2\x216\x217"+
		"\x5\x10\t\x2\x217\x21B\a\x43\x2\x2\x218\x21A\x5\xE8u\x2\x219\x218\x3\x2"+
		"\x2\x2\x21A\x21D\x3\x2\x2\x2\x21B\x219\x3\x2\x2\x2\x21B\x21C\x3\x2\x2"+
		"\x2\x21C\x21E\x3\x2\x2\x2\x21D\x21B\x3\x2\x2\x2\x21E\x220\ah\x2\x2\x21F"+
		"\x221\x5,\x17\x2\x220\x21F\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x223"+
		"\x3\x2\x2\x2\x222\x20F\x3\x2\x2\x2\x222\x216\x3\x2\x2\x2\x223\x13\x3\x2"+
		"\x2\x2\x224\x228\a\x43\x2\x2\x225\x227\x5\xE8u\x2\x226\x225\x3\x2\x2\x2"+
		"\x227\x22A\x3\x2\x2\x2\x228\x226\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229"+
		"\x22B\x3\x2\x2\x2\x22A\x228\x3\x2\x2\x2\x22B\x22D\ah\x2\x2\x22C\x22E\x5"+
		",\x17\x2\x22D\x22C\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x15\x3\x2\x2"+
		"\x2\x22F\x231\x5\xE8u\x2\x230\x22F\x3\x2\x2\x2\x231\x234\x3\x2\x2\x2\x232"+
		"\x230\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x235\x3\x2\x2\x2\x234\x232"+
		"\x3\x2\x2\x2\x235\x237\ah\x2\x2\x236\x238\x5,\x17\x2\x237\x236\x3\x2\x2"+
		"\x2\x237\x238\x3\x2\x2\x2\x238\x17\x3\x2\x2\x2\x239\x23A\x5\x12\n\x2\x23A"+
		"\x19\x3\x2\x2\x2\x23B\x23C\x5\x14\v\x2\x23C\x1B\x3\x2\x2\x2\x23D\x23E"+
		"\x5\x16\f\x2\x23E\x1D\x3\x2\x2\x2\x23F\x241\x5\xE8u\x2\x240\x23F\x3\x2"+
		"\x2\x2\x241\x244\x3\x2\x2\x2\x242\x240\x3\x2\x2\x2\x242\x243\x3\x2\x2"+
		"\x2\x243\x245\x3\x2\x2\x2\x244\x242\x3\x2\x2\x2\x245\x246\ah\x2\x2\x246"+
		"\x1F\x3\x2\x2\x2\x247\x248\x5\x6\x4\x2\x248\x249\x5\"\x12\x2\x249\x251"+
		"\x3\x2\x2\x2\x24A\x24B\x5\x10\t\x2\x24B\x24C\x5\"\x12\x2\x24C\x251\x3"+
		"\x2\x2\x2\x24D\x24E\x5\x1E\x10\x2\x24E\x24F\x5\"\x12\x2\x24F\x251\x3\x2"+
		"\x2\x2\x250\x247\x3\x2\x2\x2\x250\x24A\x3\x2\x2\x2\x250\x24D\x3\x2\x2"+
		"\x2\x251!\x3\x2\x2\x2\x252\x254\x5\xE8u\x2\x253\x252\x3\x2\x2\x2\x254"+
		"\x257\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x258"+
		"\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x258\x259\a?\x2\x2\x259\x264\a@\x2"+
		"\x2\x25A\x25C\x5\xE8u\x2\x25B\x25A\x3\x2\x2\x2\x25C\x25F\x3\x2\x2\x2\x25D"+
		"\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x260\x3\x2\x2\x2\x25F\x25D"+
		"\x3\x2\x2\x2\x260\x261\a?\x2\x2\x261\x263\a@\x2\x2\x262\x25D\x3\x2\x2"+
		"\x2\x263\x266\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2"+
		"\x265#\x3\x2\x2\x2\x266\x264\x3\x2\x2\x2\x267\x269\x5&\x14\x2\x268\x267"+
		"\x3\x2\x2\x2\x269\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B\x3"+
		"\x2\x2\x2\x26B\x26D\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26D\x26F\ah\x2"+
		"\x2\x26E\x270\x5(\x15\x2\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270"+
		"%\x3\x2\x2\x2\x271\x272\x5\xE8u\x2\x272\'\x3\x2\x2\x2\x273\x274\a\x13"+
		"\x2\x2\x274\x27E\x5\x1E\x10\x2\x275\x276\a\x13\x2\x2\x276\x27A\x5\x10"+
		"\t\x2\x277\x279\x5*\x16\x2\x278\x277\x3\x2\x2\x2\x279\x27C\x3\x2\x2\x2"+
		"\x27A\x278\x3\x2\x2\x2\x27A\x27B\x3\x2\x2\x2\x27B\x27E\x3\x2\x2\x2\x27C"+
		"\x27A\x3\x2\x2\x2\x27D\x273\x3\x2\x2\x2\x27D\x275\x3\x2\x2\x2\x27E)\x3"+
		"\x2\x2\x2\x27F\x280\aW\x2\x2\x280\x281\x5\x18\r\x2\x281+\x3\x2\x2\x2\x282"+
		"\x283\a\x46\x2\x2\x283\x284\x5.\x18\x2\x284\x285\a\x45\x2\x2\x285-\x3"+
		"\x2\x2\x2\x286\x28B\x5\x30\x19\x2\x287\x288\a\x42\x2\x2\x288\x28A\x5\x30"+
		"\x19\x2\x289\x287\x3\x2\x2\x2\x28A\x28D\x3\x2\x2\x2\x28B\x289\x3\x2\x2"+
		"\x2\x28B\x28C\x3\x2\x2\x2\x28C/\x3\x2\x2\x2\x28D\x28B\x3\x2\x2\x2\x28E"+
		"\x291\x5\xE\b\x2\x28F\x291\x5\x32\x1A\x2\x290\x28E\x3\x2\x2\x2\x290\x28F"+
		"\x3\x2\x2\x2\x291\x31\x3\x2\x2\x2\x292\x294\x5\xE8u\x2\x293\x292\x3\x2"+
		"\x2\x2\x294\x297\x3\x2\x2\x2\x295\x293\x3\x2\x2\x2\x295\x296\x3\x2\x2"+
		"\x2\x296\x298\x3\x2\x2\x2\x297\x295\x3\x2\x2\x2\x298\x29A\aI\x2\x2\x299"+
		"\x29B\x5\x34\x1B\x2\x29A\x299\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x33"+
		"\x3\x2\x2\x2\x29C\x29D\a\x13\x2\x2\x29D\x2A1\x5\xE\b\x2\x29E\x29F\a*\x2"+
		"\x2\x29F\x2A1\x5\xE\b\x2\x2A0\x29C\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1"+
		"\x35\x3\x2\x2\x2\x2A2\x2A3\b\x1C\x1\x2\x2A3\x2A4\ah\x2\x2\x2A4\x2AA\x3"+
		"\x2\x2\x2\x2A5\x2A6\f\x3\x2\x2\x2A6\x2A7\a\x43\x2\x2\x2A7\x2A9\ah\x2\x2"+
		"\x2A8\x2A5\x3\x2\x2\x2\x2A9\x2AC\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA"+
		"\x2AB\x3\x2\x2\x2\x2AB\x37\x3\x2\x2\x2\x2AC\x2AA\x3\x2\x2\x2\x2AD\x2B3"+
		"\ah\x2\x2\x2AE\x2AF\x5:\x1E\x2\x2AF\x2B0\a\x43\x2\x2\x2B0\x2B1\ah\x2\x2"+
		"\x2B1\x2B3\x3\x2\x2\x2\x2B2\x2AD\x3\x2\x2\x2\x2B2\x2AE\x3\x2\x2\x2\x2B3"+
		"\x39\x3\x2\x2\x2\x2B4\x2B5\b\x1E\x1\x2\x2B5\x2B6\ah\x2\x2\x2B6\x2BC\x3"+
		"\x2\x2\x2\x2B7\x2B8\f\x3\x2\x2\x2B8\x2B9\a\x43\x2\x2\x2B9\x2BB\ah\x2\x2"+
		"\x2BA\x2B7\x3\x2\x2\x2\x2BB\x2BE\x3\x2\x2\x2\x2BC\x2BA\x3\x2\x2\x2\x2BC"+
		"\x2BD\x3\x2\x2\x2\x2BD;\x3\x2\x2\x2\x2BE\x2BC\x3\x2\x2\x2\x2BF\x2C5\a"+
		"h\x2\x2\x2C0\x2C1\x5@!\x2\x2C1\x2C2\a\x43\x2\x2\x2C2\x2C3\ah\x2\x2\x2C3"+
		"\x2C5\x3\x2\x2\x2\x2C4\x2BF\x3\x2\x2\x2\x2C4\x2C0\x3\x2\x2\x2\x2C5=\x3"+
		"\x2\x2\x2\x2C6\x2C7\ah\x2\x2\x2C7?\x3\x2\x2\x2\x2C8\x2C9\b!\x1\x2\x2C9"+
		"\x2CA\ah\x2\x2\x2CA\x2D0\x3\x2\x2\x2\x2CB\x2CC\f\x3\x2\x2\x2CC\x2CD\a"+
		"\x43\x2\x2\x2CD\x2CF\ah\x2\x2\x2CE\x2CB\x3\x2\x2\x2\x2CF\x2D2\x3\x2\x2"+
		"\x2\x2D0\x2CE\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x41\x3\x2\x2\x2\x2D2"+
		"\x2D0\x3\x2\x2\x2\x2D3\x2D5\x5\x44#\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4\x2D5"+
		"\x3\x2\x2\x2\x2D5\x2D9\x3\x2\x2\x2\x2D6\x2D8\x5H%\x2\x2D7\x2D6\x3\x2\x2"+
		"\x2\x2D8\x2DB\x3\x2\x2\x2\x2D9\x2D7\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2"+
		"\x2DA\x2DF\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DC\x2DE\x5R*\x2\x2DD\x2DC"+
		"\x3\x2\x2\x2\x2DE\x2E1\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3"+
		"\x2\x2\x2\x2E0\x2E2\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2\x2E2\x2E3\a\x2\x2"+
		"\x3\x2E3\x43\x3\x2\x2\x2\x2E4\x2E6\x5\x46$\x2\x2E5\x2E4\x3\x2\x2\x2\x2E6"+
		"\x2E9\x3\x2\x2\x2\x2E7\x2E5\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA"+
		"\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2EA\x2EB\a\"\x2\x2\x2EB\x2F0\ah\x2"+
		"\x2\x2EC\x2ED\a\x43\x2\x2\x2ED\x2EF\ah\x2\x2\x2EE\x2EC\x3\x2\x2\x2\x2EF"+
		"\x2F2\x3\x2\x2\x2\x2F0\x2EE\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F3"+
		"\x3\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2\x2F3\x2F4\a\x41\x2\x2\x2F4\x45\x3\x2"+
		"\x2\x2\x2F5\x2F6\x5\xE8u\x2\x2F6G\x3\x2\x2\x2\x2F7\x2FC\x5J&\x2\x2F8\x2FC"+
		"\x5L\'\x2\x2F9\x2FC\x5N(\x2\x2FA\x2FC\x5P)\x2\x2FB\x2F7\x3\x2\x2\x2\x2FB"+
		"\x2F8\x3\x2\x2\x2\x2FB\x2F9\x3\x2\x2\x2\x2FB\x2FA\x3\x2\x2\x2\x2FCI\x3"+
		"\x2\x2\x2\x2FD\x2FE\a\x1B\x2\x2\x2FE\x2FF\x5\x38\x1D\x2\x2FF\x300\a\x41"+
		"\x2\x2\x300K\x3\x2\x2\x2\x301\x302\a\x1B\x2\x2\x302\x303\x5:\x1E\x2\x303"+
		"\x304\a\x43\x2\x2\x304\x305\aU\x2\x2\x305\x306\a\x41\x2\x2\x306M\x3\x2"+
		"\x2\x2\x307\x308\a\x1B\x2\x2\x308\x309\a(\x2\x2\x309\x30A\x5\x38\x1D\x2"+
		"\x30A\x30B\a\x43\x2\x2\x30B\x30C\ah\x2\x2\x30C\x30D\a\x41\x2\x2\x30DO"+
		"\x3\x2\x2\x2\x30E\x30F\a\x1B\x2\x2\x30F\x310\a(\x2\x2\x310\x311\x5\x38"+
		"\x1D\x2\x311\x312\a\x43\x2\x2\x312\x313\aU\x2\x2\x313\x314\a\x41\x2\x2"+
		"\x314Q\x3\x2\x2\x2\x315\x319\x5T+\x2\x316\x319\x5\xC8\x65\x2\x317\x319"+
		"\a\x41\x2\x2\x318\x315\x3\x2\x2\x2\x318\x316\x3\x2\x2\x2\x318\x317\x3"+
		"\x2\x2\x2\x319S\x3\x2\x2\x2\x31A\x31D\x5V,\x2\x31B\x31D\x5\xBC_\x2\x31C"+
		"\x31A\x3\x2\x2\x2\x31C\x31B\x3\x2\x2\x2\x31DU\x3\x2\x2\x2\x31E\x320\x5"+
		"X-\x2\x31F\x31E\x3\x2\x2\x2\x320\x323\x3\x2\x2\x2\x321\x31F\x3\x2\x2\x2"+
		"\x321\x322\x3\x2\x2\x2\x322\x324\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2\x324"+
		"\x325\a\v\x2\x2\x325\x327\ah\x2\x2\x326\x328\x5Z.\x2\x327\x326\x3\x2\x2"+
		"\x2\x327\x328\x3\x2\x2\x2\x328\x32A\x3\x2\x2\x2\x329\x32B\x5^\x30\x2\x32A"+
		"\x329\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B\x32D\x3\x2\x2\x2\x32C\x32E"+
		"\x5`\x31\x2\x32D\x32C\x3\x2\x2\x2\x32D\x32E\x3\x2\x2\x2\x32E\x32F\x3\x2"+
		"\x2\x2\x32F\x330\x5\x64\x33\x2\x330W\x3\x2\x2\x2\x331\x33A\x5\xE8u\x2"+
		"\x332\x33A\a%\x2\x2\x333\x33A\a$\x2\x2\x334\x33A\a#\x2\x2\x335\x33A\a"+
		"\x3\x2\x2\x336\x33A\a(\x2\x2\x337\x33A\a\x14\x2\x2\x338\x33A\a)\x2\x2"+
		"\x339\x331\x3\x2\x2\x2\x339\x332\x3\x2\x2\x2\x339\x333\x3\x2\x2\x2\x339"+
		"\x334\x3\x2\x2\x2\x339\x335\x3\x2\x2\x2\x339\x336\x3\x2\x2\x2\x339\x337"+
		"\x3\x2\x2\x2\x339\x338\x3\x2\x2\x2\x33AY\x3\x2\x2\x2\x33B\x33C\a\x46\x2"+
		"\x2\x33C\x33D\x5\\/\x2\x33D\x33E\a\x45\x2\x2\x33E[\x3\x2\x2\x2\x33F\x344"+
		"\x5$\x13\x2\x340\x341\a\x42\x2\x2\x341\x343\x5$\x13\x2\x342\x340\x3\x2"+
		"\x2\x2\x343\x346\x3\x2\x2\x2\x344\x342\x3\x2\x2\x2\x344\x345\x3\x2\x2"+
		"\x2\x345]\x3\x2\x2\x2\x346\x344\x3\x2\x2\x2\x347\x348\a\x13\x2\x2\x348"+
		"\x349\x5\x12\n\x2\x349_\x3\x2\x2\x2\x34A\x34B\a\x1A\x2\x2\x34B\x34C\x5"+
		"\x62\x32\x2\x34C\x61\x3\x2\x2\x2\x34D\x352\x5\x18\r\x2\x34E\x34F\a\x42"+
		"\x2\x2\x34F\x351\x5\x18\r\x2\x350\x34E\x3\x2\x2\x2\x351\x354\x3\x2\x2"+
		"\x2\x352\x350\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x63\x3\x2\x2\x2\x354"+
		"\x352\x3\x2\x2\x2\x355\x359\a=\x2\x2\x356\x358\x5\x66\x34\x2\x357\x356"+
		"\x3\x2\x2\x2\x358\x35B\x3\x2\x2\x2\x359\x357\x3\x2\x2\x2\x359\x35A\x3"+
		"\x2\x2\x2\x35A\x35C\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2\x35C\x35D\a>\x2"+
		"\x2\x35D\x65\x3\x2\x2\x2\x35E\x363\x5h\x35\x2\x35F\x363\x5\xACW\x2\x360"+
		"\x363\x5\xAEX\x2\x361\x363\x5\xB0Y\x2\x362\x35E\x3\x2\x2\x2\x362\x35F"+
		"\x3\x2\x2\x2\x362\x360\x3\x2\x2\x2\x362\x361\x3\x2\x2\x2\x363g\x3\x2\x2"+
		"\x2\x364\x36A\x5j\x36\x2\x365\x36A\x5\x8EH\x2\x366\x36A\x5T+\x2\x367\x36A"+
		"\x5\xC8\x65\x2\x368\x36A\a\x41\x2\x2\x369\x364\x3\x2\x2\x2\x369\x365\x3"+
		"\x2\x2\x2\x369\x366\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x369\x368\x3\x2"+
		"\x2\x2\x36Ai\x3\x2\x2\x2\x36B\x36D\x5l\x37\x2\x36C\x36B\x3\x2\x2\x2\x36D"+
		"\x370\x3\x2\x2\x2\x36E\x36C\x3\x2\x2\x2\x36E\x36F\x3\x2\x2\x2\x36F\x371"+
		"\x3\x2\x2\x2\x370\x36E\x3\x2\x2\x2\x371\x372\x5v<\x2\x372\x373\x5n\x38"+
		"\x2\x373\x374\a\x41\x2\x2\x374k\x3\x2\x2\x2\x375\x37E\x5\xE8u\x2\x376"+
		"\x37E\a%\x2\x2\x377\x37E\a$\x2\x2\x378\x37E\a#\x2\x2\x379\x37E\a(\x2\x2"+
		"\x37A\x37E\a\x14\x2\x2\x37B\x37E\a\x30\x2\x2\x37C\x37E\a\x33\x2\x2\x37D"+
		"\x375\x3\x2\x2\x2\x37D\x376\x3\x2\x2\x2\x37D\x377\x3\x2\x2\x2\x37D\x378"+
		"\x3\x2\x2\x2\x37D\x379\x3\x2\x2\x2\x37D\x37A\x3\x2\x2\x2\x37D\x37B\x3"+
		"\x2\x2\x2\x37D\x37C\x3\x2\x2\x2\x37Em\x3\x2\x2\x2\x37F\x384\x5p\x39\x2"+
		"\x380\x381\a\x42\x2\x2\x381\x383\x5p\x39\x2\x382\x380\x3\x2\x2\x2\x383"+
		"\x386\x3\x2\x2\x2\x384\x382\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385o\x3"+
		"\x2\x2\x2\x386\x384\x3\x2\x2\x2\x387\x38A\x5r:\x2\x388\x389\a\x44\x2\x2"+
		"\x389\x38B\x5t;\x2\x38A\x388\x3\x2\x2\x2\x38A\x38B\x3\x2\x2\x2\x38Bq\x3"+
		"\x2\x2\x2\x38C\x38E\ah\x2\x2\x38D\x38F\x5\"\x12\x2\x38E\x38D\x3\x2\x2"+
		"\x2\x38E\x38F\x3\x2\x2\x2\x38Fs\x3\x2\x2\x2\x390\x393\x5\x1A0\xD1\x2\x391"+
		"\x393\x5\xFA~\x2\x392\x390\x3\x2\x2\x2\x392\x391\x3\x2\x2\x2\x393u\x3"+
		"\x2\x2\x2\x394\x397\x5x=\x2\x395\x397\x5z>\x2\x396\x394\x3\x2\x2\x2\x396"+
		"\x395\x3\x2\x2\x2\x397w\x3\x2\x2\x2\x398\x39B\x5\b\x5\x2\x399\x39B\a\x5"+
		"\x2\x2\x39A\x398\x3\x2\x2\x2\x39A\x399\x3\x2\x2\x2\x39By\x3\x2\x2\x2\x39C"+
		"\x3A0\x5|?\x2\x39D\x3A0\x5\x8A\x46\x2\x39E\x3A0\x5\x8CG\x2\x39F\x39C\x3"+
		"\x2\x2\x2\x39F\x39D\x3\x2\x2\x2\x39F\x39E\x3\x2\x2\x2\x3A0{\x3\x2\x2\x2"+
		"\x3A1\x3A4\x5\x82\x42\x2\x3A2\x3A4\x5\x88\x45\x2\x3A3\x3A1\x3\x2\x2\x2"+
		"\x3A3\x3A2\x3\x2\x2\x2\x3A4\x3A9\x3\x2\x2\x2\x3A5\x3A8\x5\x80\x41\x2\x3A6"+
		"\x3A8\x5\x86\x44\x2\x3A7\x3A5\x3\x2\x2\x2\x3A7\x3A6\x3\x2\x2\x2\x3A8\x3AB"+
		"\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA}\x3\x2\x2"+
		"\x2\x3AB\x3A9\x3\x2\x2\x2\x3AC\x3AE\ah\x2\x2\x3AD\x3AF\x5,\x17\x2\x3AE"+
		"\x3AD\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3BD\x3\x2\x2\x2\x3B0\x3B1"+
		"\x5|?\x2\x3B1\x3B5\a\x43\x2\x2\x3B2\x3B4\x5\xE8u\x2\x3B3\x3B2\x3\x2\x2"+
		"\x2\x3B4\x3B7\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B5\x3B6\x3\x2\x2\x2"+
		"\x3B6\x3B8\x3\x2\x2\x2\x3B7\x3B5\x3\x2\x2\x2\x3B8\x3BA\ah\x2\x2\x3B9\x3BB"+
		"\x5,\x17\x2\x3BA\x3B9\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BD\x3\x2"+
		"\x2\x2\x3BC\x3AC\x3\x2\x2\x2\x3BC\x3B0\x3\x2\x2\x2\x3BD\x7F\x3\x2\x2\x2"+
		"\x3BE\x3C2\a\x43\x2\x2\x3BF\x3C1\x5\xE8u\x2\x3C0\x3BF\x3\x2\x2\x2\x3C1"+
		"\x3C4\x3\x2\x2\x2\x3C2\x3C0\x3\x2\x2\x2\x3C2\x3C3\x3\x2\x2\x2\x3C3\x3C5"+
		"\x3\x2\x2\x2\x3C4\x3C2\x3\x2\x2\x2\x3C5\x3C7\ah\x2\x2\x3C6\x3C8\x5,\x17"+
		"\x2\x3C7\x3C6\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x81\x3\x2\x2\x2\x3C9"+
		"\x3CB\ah\x2\x2\x3CA\x3CC\x5,\x17\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3"+
		"\x2\x2\x2\x3CC\x83\x3\x2\x2\x2\x3CD\x3CE\x5~@\x2\x3CE\x85\x3\x2\x2\x2"+
		"\x3CF\x3D0\x5\x80\x41\x2\x3D0\x87\x3\x2\x2\x2\x3D1\x3D2\x5\x82\x42\x2"+
		"\x3D2\x89\x3\x2\x2\x2\x3D3\x3D4\ah\x2\x2\x3D4\x8B\x3\x2\x2\x2\x3D5\x3D6"+
		"\x5x=\x2\x3D6\x3D7\x5\"\x12\x2\x3D7\x3DF\x3\x2\x2\x2\x3D8\x3D9\x5|?\x2"+
		"\x3D9\x3DA\x5\"\x12\x2\x3DA\x3DF\x3\x2\x2\x2\x3DB\x3DC\x5\x8A\x46\x2\x3DC"+
		"\x3DD\x5\"\x12\x2\x3DD\x3DF\x3\x2\x2\x2\x3DE\x3D5\x3\x2\x2\x2\x3DE\x3D8"+
		"\x3\x2\x2\x2\x3DE\x3DB\x3\x2\x2\x2\x3DF\x8D\x3\x2\x2\x2\x3E0\x3E2\x5\x90"+
		"I\x2\x3E1\x3E0\x3\x2\x2\x2\x3E2\x3E5\x3\x2\x2\x2\x3E3\x3E1\x3\x2\x2\x2"+
		"\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E6\x3\x2\x2\x2\x3E5\x3E3\x3\x2\x2\x2\x3E6"+
		"\x3E7\x5\x92J\x2\x3E7\x3E8\x5\xAAV\x2\x3E8\x8F\x3\x2\x2\x2\x3E9\x3F4\x5"+
		"\xE8u\x2\x3EA\x3F4\a%\x2\x2\x3EB\x3F4\a$\x2\x2\x3EC\x3F4\a#\x2\x2\x3ED"+
		"\x3F4\a\x3\x2\x2\x3EE\x3F4\a(\x2\x2\x3EF\x3F4\a\x14\x2\x2\x3F0\x3F4\a"+
		",\x2\x2\x3F1\x3F4\a \x2\x2\x3F2\x3F4\a)\x2\x2\x3F3\x3E9\x3\x2\x2\x2\x3F3"+
		"\x3EA\x3\x2\x2\x2\x3F3\x3EB\x3\x2\x2\x2\x3F3\x3EC\x3\x2\x2\x2\x3F3\x3ED"+
		"\x3\x2\x2\x2\x3F3\x3EE\x3\x2\x2\x2\x3F3\x3EF\x3\x2\x2\x2\x3F3\x3F0\x3"+
		"\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F3\x3F2\x3\x2\x2\x2\x3F4\x91\x3\x2\x2"+
		"\x2\x3F5\x3F6\x5\x94K\x2\x3F6\x3F8\x5\x96L\x2\x3F7\x3F9\x5\xA4S\x2\x3F8"+
		"\x3F7\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x407\x3\x2\x2\x2\x3FA\x3FE"+
		"\x5Z.\x2\x3FB\x3FD\x5\xE8u\x2\x3FC\x3FB\x3\x2\x2\x2\x3FD\x400\x3\x2\x2"+
		"\x2\x3FE\x3FC\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x401\x3\x2\x2\x2"+
		"\x400\x3FE\x3\x2\x2\x2\x401\x402\x5\x94K\x2\x402\x404\x5\x96L\x2\x403"+
		"\x405\x5\xA4S\x2\x404\x403\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x407"+
		"\x3\x2\x2\x2\x406\x3F5\x3\x2\x2\x2\x406\x3FA\x3\x2\x2\x2\x407\x93\x3\x2"+
		"\x2\x2\x408\x40B\x5v<\x2\x409\x40B\a\x32\x2\x2\x40A\x408\x3\x2\x2\x2\x40A"+
		"\x409\x3\x2\x2\x2\x40B\x95\x3\x2\x2\x2\x40C\x40D\ah\x2\x2\x40D\x40F\a"+
		";\x2\x2\x40E\x410\x5\x98M\x2\x40F\x40E\x3\x2\x2\x2\x40F\x410\x3\x2\x2"+
		"\x2\x410\x411\x3\x2\x2\x2\x411\x413\a<\x2\x2\x412\x414\x5\"\x12\x2\x413"+
		"\x412\x3\x2\x2\x2\x413\x414\x3\x2\x2\x2\x414\x97\x3\x2\x2\x2\x415\x416"+
		"\x5\x9AN\x2\x416\x417\a\x42\x2\x2\x417\x418\x5\xA0Q\x2\x418\x41B\x3\x2"+
		"\x2\x2\x419\x41B\x5\xA0Q\x2\x41A\x415\x3\x2\x2\x2\x41A\x419\x3\x2\x2\x2"+
		"\x41B\x99\x3\x2\x2\x2\x41C\x421\x5\x9CO\x2\x41D\x41E\a\x42\x2\x2\x41E"+
		"\x420\x5\x9CO\x2\x41F\x41D\x3\x2\x2\x2\x420\x423\x3\x2\x2\x2\x421\x41F"+
		"\x3\x2\x2\x2\x421\x422\x3\x2\x2\x2\x422\x42D\x3\x2\x2\x2\x423\x421\x3"+
		"\x2\x2\x2\x424\x429\x5\xA2R\x2\x425\x426\a\x42\x2\x2\x426\x428\x5\x9C"+
		"O\x2\x427\x425\x3\x2\x2\x2\x428\x42B\x3\x2\x2\x2\x429\x427\x3\x2\x2\x2"+
		"\x429\x42A\x3\x2\x2\x2\x42A\x42D\x3\x2\x2\x2\x42B\x429\x3\x2\x2\x2\x42C"+
		"\x41C\x3\x2\x2\x2\x42C\x424\x3\x2\x2\x2\x42D\x9B\x3\x2\x2\x2\x42E\x430"+
		"\x5\x9EP\x2\x42F\x42E\x3\x2\x2\x2\x430\x433\x3\x2\x2\x2\x431\x42F\x3\x2"+
		"\x2\x2\x431\x432\x3\x2\x2\x2\x432\x434\x3\x2\x2\x2\x433\x431\x3\x2\x2"+
		"\x2\x434\x435\x5v<\x2\x435\x436\x5r:\x2\x436\x9D\x3\x2\x2\x2\x437\x43A"+
		"\x5\xE8u\x2\x438\x43A\a\x14\x2\x2\x439\x437\x3\x2\x2\x2\x439\x438\x3\x2"+
		"\x2\x2\x43A\x9F\x3\x2\x2\x2\x43B\x43D\x5\x9EP\x2\x43C\x43B\x3\x2\x2\x2"+
		"\x43D\x440\x3\x2\x2\x2\x43E\x43C\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F"+
		"\x441\x3\x2\x2\x2\x440\x43E\x3\x2\x2\x2\x441\x445\x5v<\x2\x442\x444\x5"+
		"\xE8u\x2\x443\x442\x3\x2\x2\x2\x444\x447\x3\x2\x2\x2\x445\x443\x3\x2\x2"+
		"\x2\x445\x446\x3\x2\x2\x2\x446\x448\x3\x2\x2\x2\x447\x445\x3\x2\x2\x2"+
		"\x448\x449\aj\x2\x2\x449\x44A\x5r:\x2\x44A\x44D\x3\x2\x2\x2\x44B\x44D"+
		"\x5\x9CO\x2\x44C\x43E\x3\x2\x2\x2\x44C\x44B\x3\x2\x2\x2\x44D\xA1\x3\x2"+
		"\x2\x2\x44E\x450\x5\xE8u\x2\x44F\x44E\x3\x2\x2\x2\x450\x453\x3\x2\x2\x2"+
		"\x451\x44F\x3\x2\x2\x2\x451\x452\x3\x2\x2\x2\x452\x454\x3\x2\x2\x2\x453"+
		"\x451\x3\x2\x2\x2\x454\x457\x5v<\x2\x455\x456\ah\x2\x2\x456\x458\a\x43"+
		"\x2\x2\x457\x455\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x459\x3\x2\x2"+
		"\x2\x459\x45A\a-\x2\x2\x45A\xA3\x3\x2\x2\x2\x45B\x45C\a/\x2\x2\x45C\x45D"+
		"\x5\xA6T\x2\x45D\xA5\x3\x2\x2\x2\x45E\x463\x5\xA8U\x2\x45F\x460\a\x42"+
		"\x2\x2\x460\x462\x5\xA8U\x2\x461\x45F\x3\x2\x2\x2\x462\x465\x3\x2\x2\x2"+
		"\x463\x461\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\xA7\x3\x2\x2\x2\x465"+
		"\x463\x3\x2\x2\x2\x466\x469\x5\x12\n\x2\x467\x469\x5\x1E\x10\x2\x468\x466"+
		"\x3\x2\x2\x2\x468\x467\x3\x2\x2\x2\x469\xA9\x3\x2\x2\x2\x46A\x46D\x5\xFE"+
		"\x80\x2\x46B\x46D\a\x41\x2\x2\x46C\x46A\x3\x2\x2\x2\x46C\x46B\x3\x2\x2"+
		"\x2\x46D\xAB\x3\x2\x2\x2\x46E\x46F\x5\xFE\x80\x2\x46F\xAD\x3\x2\x2\x2"+
		"\x470\x471\a(\x2\x2\x471\x472\x5\xFE\x80\x2\x472\xAF\x3\x2\x2\x2\x473"+
		"\x475\x5\xB2Z\x2\x474\x473\x3\x2\x2\x2\x475\x478\x3\x2\x2\x2\x476\x474"+
		"\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x479\x3\x2\x2\x2\x478\x476\x3"+
		"\x2\x2\x2\x479\x47B\x5\xB4[\x2\x47A\x47C\x5\xA4S\x2\x47B\x47A\x3\x2\x2"+
		"\x2\x47B\x47C\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x47E\x5\xB8]\x2\x47E"+
		"\xB1\x3\x2\x2\x2\x47F\x484\x5\xE8u\x2\x480\x484\a%\x2\x2\x481\x484\a$"+
		"\x2\x2\x482\x484\a#\x2\x2\x483\x47F\x3\x2\x2\x2\x483\x480\x3\x2\x2\x2"+
		"\x483\x481\x3\x2\x2\x2\x483\x482\x3\x2\x2\x2\x484\xB3\x3\x2\x2\x2\x485"+
		"\x487\x5Z.\x2\x486\x485\x3\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487\x488\x3"+
		"\x2\x2\x2\x488\x489\x5\xB6\\\x2\x489\x48B\a;\x2\x2\x48A\x48C\x5\x98M\x2"+
		"\x48B\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48D\x3\x2\x2\x2\x48D"+
		"\x48E\a<\x2\x2\x48E\xB5\x3\x2\x2\x2\x48F\x490\ah\x2\x2\x490\xB7\x3\x2"+
		"\x2\x2\x491\x493\a=\x2\x2\x492\x494\x5\xBA^\x2\x493\x492\x3\x2\x2\x2\x493"+
		"\x494\x3\x2\x2\x2\x494\x496\x3\x2\x2\x2\x495\x497\x5\x100\x81\x2\x496"+
		"\x495\x3\x2\x2\x2\x496\x497\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x499"+
		"\a>\x2\x2\x499\xB9\x3\x2\x2\x2\x49A\x49C\x5,\x17\x2\x49B\x49A\x3\x2\x2"+
		"\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49D\x3\x2\x2\x2\x49D\x49E\a-\x2\x2\x49E"+
		"\x4A0\a;\x2\x2\x49F\x4A1\x5\x190\xC9\x2\x4A0\x49F\x3\x2\x2\x2\x4A0\x4A1"+
		"\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2\x4A3\a<\x2\x2\x4A3\x4C9\a\x41"+
		"\x2\x2\x4A4\x4A6\x5,\x17\x2\x4A5\x4A4\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2"+
		"\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4A8\a*\x2\x2\x4A8\x4AA\a;\x2\x2\x4A9\x4AB"+
		"\x5\x190\xC9\x2\x4AA\x4A9\x3\x2\x2\x2\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4AC"+
		"\x3\x2\x2\x2\x4AC\x4AD\a<\x2\x2\x4AD\x4C9\a\x41\x2\x2\x4AE\x4AF\x5<\x1F"+
		"\x2\x4AF\x4B1\a\x43\x2\x2\x4B0\x4B2\x5,\x17\x2\x4B1\x4B0\x3\x2\x2\x2\x4B1"+
		"\x4B2\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4B4\a*\x2\x2\x4B4\x4B6\a"+
		";\x2\x2\x4B5\x4B7\x5\x190\xC9\x2\x4B6\x4B5\x3\x2\x2\x2\x4B6\x4B7\x3\x2"+
		"\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4B9\a<\x2\x2\x4B9\x4BA\a\x41\x2\x2"+
		"\x4BA\x4C9\x3\x2\x2\x2\x4BB\x4BC\x5\x162\xB2\x2\x4BC\x4BE\a\x43\x2\x2"+
		"\x4BD\x4BF\x5,\x17\x2\x4BE\x4BD\x3\x2\x2\x2\x4BE\x4BF\x3\x2\x2\x2\x4BF"+
		"\x4C0\x3\x2\x2\x2\x4C0\x4C1\a*\x2\x2\x4C1\x4C3\a;\x2\x2\x4C2\x4C4\x5\x190"+
		"\xC9\x2\x4C3\x4C2\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C5\x3\x2\x2"+
		"\x2\x4C5\x4C6\a<\x2\x2\x4C6\x4C7\a\x41\x2\x2\x4C7\x4C9\x3\x2\x2\x2\x4C8"+
		"\x49B\x3\x2\x2\x2\x4C8\x4A5\x3\x2\x2\x2\x4C8\x4AE\x3\x2\x2\x2\x4C8\x4BB"+
		"\x3\x2\x2\x2\x4C9\xBB\x3\x2\x2\x2\x4CA\x4CC\x5X-\x2\x4CB\x4CA\x3\x2\x2"+
		"\x2\x4CC\x4CF\x3\x2\x2\x2\x4CD\x4CB\x3\x2\x2\x2\x4CD\x4CE\x3\x2\x2\x2"+
		"\x4CE\x4D0\x3\x2\x2\x2\x4CF\x4CD\x3\x2\x2\x2\x4D0\x4D1\a\x12\x2\x2\x4D1"+
		"\x4D3\ah\x2\x2\x4D2\x4D4\x5`\x31\x2\x4D3\x4D2\x3\x2\x2\x2\x4D3\x4D4\x3"+
		"\x2\x2\x2\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4D6\x5\xBE`\x2\x4D6\xBD\x3\x2\x2"+
		"\x2\x4D7\x4D9\a=\x2\x2\x4D8\x4DA\x5\xC0\x61\x2\x4D9\x4D8\x3\x2\x2\x2\x4D9"+
		"\x4DA\x3\x2\x2\x2\x4DA\x4DC\x3\x2\x2\x2\x4DB\x4DD\a\x42\x2\x2\x4DC\x4DB"+
		"\x3\x2\x2\x2\x4DC\x4DD\x3\x2\x2\x2\x4DD\x4DF\x3\x2\x2\x2\x4DE\x4E0\x5"+
		"\xC6\x64\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x4E1\x3\x2"+
		"\x2\x2\x4E1\x4E2\a>\x2\x2\x4E2\xBF\x3\x2\x2\x2\x4E3\x4E8\x5\xC2\x62\x2"+
		"\x4E4\x4E5\a\x42\x2\x2\x4E5\x4E7\x5\xC2\x62\x2\x4E6\x4E4\x3\x2\x2\x2\x4E7"+
		"\x4EA\x3\x2\x2\x2\x4E8\x4E6\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\xC1"+
		"\x3\x2\x2\x2\x4EA\x4E8\x3\x2\x2\x2\x4EB\x4ED\x5\xC4\x63\x2\x4EC\x4EB\x3"+
		"\x2\x2\x2\x4ED\x4F0\x3\x2\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EE\x4EF\x3\x2"+
		"\x2\x2\x4EF\x4F1\x3\x2\x2\x2\x4F0\x4EE\x3\x2\x2\x2\x4F1\x4F7\ah\x2\x2"+
		"\x4F2\x4F4\a;\x2\x2\x4F3\x4F5\x5\x190\xC9\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4"+
		"\x4F5\x3\x2\x2\x2\x4F5\x4F6\x3\x2\x2\x2\x4F6\x4F8\a<\x2\x2\x4F7\x4F2\x3"+
		"\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x4FA\x3\x2\x2\x2\x4F9\x4FB\x5\x64"+
		"\x33\x2\x4FA\x4F9\x3\x2\x2\x2\x4FA\x4FB\x3\x2\x2\x2\x4FB\xC3\x3\x2\x2"+
		"\x2\x4FC\x4FD\x5\xE8u\x2\x4FD\xC5\x3\x2\x2\x2\x4FE\x502\a\x41\x2\x2\x4FF"+
		"\x501\x5\x66\x34\x2\x500\x4FF\x3\x2\x2\x2\x501\x504\x3\x2\x2\x2\x502\x500"+
		"\x3\x2\x2\x2\x502\x503\x3\x2\x2\x2\x503\xC7\x3\x2\x2\x2\x504\x502\x3\x2"+
		"\x2\x2\x505\x508\x5\xCA\x66\x2\x506\x508\x5\xDCo\x2\x507\x505\x3\x2\x2"+
		"\x2\x507\x506\x3\x2\x2\x2\x508\xC9\x3\x2\x2\x2\x509\x50B\x5\xCCg\x2\x50A"+
		"\x509\x3\x2\x2\x2\x50B\x50E\x3\x2\x2\x2\x50C\x50A\x3\x2\x2\x2\x50C\x50D"+
		"\x3\x2\x2\x2\x50D\x50F\x3\x2\x2\x2\x50E\x50C\x3\x2\x2\x2\x50F\x510\a\x1E"+
		"\x2\x2\x510\x512\ah\x2\x2\x511\x513\x5Z.\x2\x512\x511\x3\x2\x2\x2\x512"+
		"\x513\x3\x2\x2\x2\x513\x515\x3\x2\x2\x2\x514\x516\x5\xCEh\x2\x515\x514"+
		"\x3\x2\x2\x2\x515\x516\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x518\x5"+
		"\xD0i\x2\x518\xCB\x3\x2\x2\x2\x519\x521\x5\xE8u\x2\x51A\x521\a%\x2\x2"+
		"\x51B\x521\a$\x2\x2\x51C\x521\a#\x2\x2\x51D\x521\a\x3\x2\x2\x51E\x521"+
		"\a(\x2\x2\x51F\x521\a)\x2\x2\x520\x519\x3\x2\x2\x2\x520\x51A\x3\x2\x2"+
		"\x2\x520\x51B\x3\x2\x2\x2\x520\x51C\x3\x2\x2\x2\x520\x51D\x3\x2\x2\x2"+
		"\x520\x51E\x3\x2\x2\x2\x520\x51F\x3\x2\x2\x2\x521\xCD\x3\x2\x2\x2\x522"+
		"\x523\a\x13\x2\x2\x523\x524\x5\x62\x32\x2\x524\xCF\x3\x2\x2\x2\x525\x529"+
		"\a=\x2\x2\x526\x528\x5\xD2j\x2\x527\x526\x3\x2\x2\x2\x528\x52B\x3\x2\x2"+
		"\x2\x529\x527\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52C\x3\x2\x2\x2"+
		"\x52B\x529\x3\x2\x2\x2\x52C\x52D\a>\x2\x2\x52D\xD1\x3\x2\x2\x2\x52E\x534"+
		"\x5\xD4k\x2\x52F\x534\x5\xD8m\x2\x530\x534\x5T+\x2\x531\x534\x5\xC8\x65"+
		"\x2\x532\x534\a\x41\x2\x2\x533\x52E\x3\x2\x2\x2\x533\x52F\x3\x2\x2\x2"+
		"\x533\x530\x3\x2\x2\x2\x533\x531\x3\x2\x2\x2\x533\x532\x3\x2\x2\x2\x534"+
		"\xD3\x3\x2\x2\x2\x535\x537\x5\xD6l\x2\x536\x535\x3\x2\x2\x2\x537\x53A"+
		"\x3\x2\x2\x2\x538\x536\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2\x539\x53B\x3"+
		"\x2\x2\x2\x53A\x538\x3\x2\x2\x2\x53B\x53C\x5v<\x2\x53C\x53D\x5n\x38\x2"+
		"\x53D\x53E\a\x41\x2\x2\x53E\xD5\x3\x2\x2\x2\x53F\x544\x5\xE8u\x2\x540"+
		"\x544\a%\x2\x2\x541\x544\a(\x2\x2\x542\x544\a\x14\x2\x2\x543\x53F\x3\x2"+
		"\x2\x2\x543\x540\x3\x2\x2\x2\x543\x541\x3\x2\x2\x2\x543\x542\x3\x2\x2"+
		"\x2\x544\xD7\x3\x2\x2\x2\x545\x547\x5\xDAn\x2\x546\x545\x3\x2\x2\x2\x547"+
		"\x54A\x3\x2\x2\x2\x548\x546\x3\x2\x2\x2\x548\x549\x3\x2\x2\x2\x549\x54B"+
		"\x3\x2\x2\x2\x54A\x548\x3\x2\x2\x2\x54B\x54C\x5\x92J\x2\x54C\x54D\x5\xAA"+
		"V\x2\x54D\xD9\x3\x2\x2\x2\x54E\x555\x5\xE8u\x2\x54F\x555\a%\x2\x2\x550"+
		"\x555\a\x3\x2\x2\x551\x555\a\xE\x2\x2\x552\x555\a(\x2\x2\x553\x555\a)"+
		"\x2\x2\x554\x54E\x3\x2\x2\x2\x554\x54F\x3\x2\x2\x2\x554\x550\x3\x2\x2"+
		"\x2\x554\x551\x3\x2\x2\x2\x554\x552\x3\x2\x2\x2\x554\x553\x3\x2\x2\x2"+
		"\x555\xDB\x3\x2\x2\x2\x556\x558\x5\xCCg\x2\x557\x556\x3\x2\x2\x2\x558"+
		"\x55B\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55C"+
		"\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55C\x55D\ai\x2\x2\x55D\x55E\a\x1E"+
		"\x2\x2\x55E\x55F\ah\x2\x2\x55F\x560\x5\xDEp\x2\x560\xDD\x3\x2\x2\x2\x561"+
		"\x565\a=\x2\x2\x562\x564\x5\xE0q\x2\x563\x562\x3\x2\x2\x2\x564\x567\x3"+
		"\x2\x2\x2\x565\x563\x3\x2\x2\x2\x565\x566\x3\x2\x2\x2\x566\x568\x3\x2"+
		"\x2\x2\x567\x565\x3\x2\x2\x2\x568\x569\a>\x2\x2\x569\xDF\x3\x2\x2\x2\x56A"+
		"\x570\x5\xE2r\x2\x56B\x570\x5\xD4k\x2\x56C\x570\x5T+\x2\x56D\x570\x5\xC8"+
		"\x65\x2\x56E\x570\a\x41\x2\x2\x56F\x56A\x3\x2\x2\x2\x56F\x56B\x3\x2\x2"+
		"\x2\x56F\x56C\x3\x2\x2\x2\x56F\x56D\x3\x2\x2\x2\x56F\x56E\x3\x2\x2\x2"+
		"\x570\xE1\x3\x2\x2\x2\x571\x573\x5\xE4s\x2\x572\x571\x3\x2\x2\x2\x573"+
		"\x576\x3\x2\x2\x2\x574\x572\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x577"+
		"\x3\x2\x2\x2\x576\x574\x3\x2\x2\x2\x577\x578\x5v<\x2\x578\x579\ah\x2\x2"+
		"\x579\x57A\a;\x2\x2\x57A\x57C\a<\x2\x2\x57B\x57D\x5\"\x12\x2\x57C\x57B"+
		"\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D\x57F\x3\x2\x2\x2\x57E\x580\x5"+
		"\xE6t\x2\x57F\x57E\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x581\x3\x2\x2"+
		"\x2\x581\x582\a\x41\x2\x2\x582\xE3\x3\x2\x2\x2\x583\x587\x5\xE8u\x2\x584"+
		"\x587\a%\x2\x2\x585\x587\a\x3\x2\x2\x586\x583\x3\x2\x2\x2\x586\x584\x3"+
		"\x2\x2\x2\x586\x585\x3\x2\x2\x2\x587\xE5\x3\x2\x2\x2\x588\x589\a\xE\x2"+
		"\x2\x589\x58A\x5\xF0y\x2\x58A\xE7\x3\x2\x2\x2\x58B\x58F\x5\xEAv\x2\x58C"+
		"\x58F\x5\xF6|\x2\x58D\x58F\x5\xF8}\x2\x58E\x58B\x3\x2\x2\x2\x58E\x58C"+
		"\x3\x2\x2\x2\x58E\x58D\x3\x2\x2\x2\x58F\xE9\x3\x2\x2\x2\x590\x591\ai\x2"+
		"\x2\x591\x592\x5\x38\x1D\x2\x592\x594\a;\x2\x2\x593\x595\x5\xECw\x2\x594"+
		"\x593\x3\x2\x2\x2\x594\x595\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x597"+
		"\a<\x2\x2\x597\xEB\x3\x2\x2\x2\x598\x59D\x5\xEEx\x2\x599\x59A\a\x42\x2"+
		"\x2\x59A\x59C\x5\xEEx\x2\x59B\x599\x3\x2\x2\x2\x59C\x59F\x3\x2\x2\x2\x59D"+
		"\x59B\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E\xED\x3\x2\x2\x2\x59F\x59D"+
		"\x3\x2\x2\x2\x5A0\x5A1\ah\x2\x2\x5A1\x5A2\a\x44\x2\x2\x5A2\x5A3\x5\xF0"+
		"y\x2\x5A3\xEF\x3\x2\x2\x2\x5A4\x5A8\x5\x1B2\xDA\x2\x5A5\x5A8\x5\xF2z\x2"+
		"\x5A6\x5A8\x5\xE8u\x2\x5A7\x5A4\x3\x2\x2\x2\x5A7\x5A5\x3\x2\x2\x2\x5A7"+
		"\x5A6\x3\x2\x2\x2\x5A8\xF1\x3\x2\x2\x2\x5A9\x5AB\a=\x2\x2\x5AA\x5AC\x5"+
		"\xF4{\x2\x5AB\x5AA\x3\x2\x2\x2\x5AB\x5AC\x3\x2\x2\x2\x5AC\x5AE\x3\x2\x2"+
		"\x2\x5AD\x5AF\a\x42\x2\x2\x5AE\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2"+
		"\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B1\a>\x2\x2\x5B1\xF3\x3\x2\x2\x2\x5B2\x5B7"+
		"\x5\xF0y\x2\x5B3\x5B4\a\x42\x2\x2\x5B4\x5B6\x5\xF0y\x2\x5B5\x5B3\x3\x2"+
		"\x2\x2\x5B6\x5B9\x3\x2\x2\x2\x5B7\x5B5\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2"+
		"\x2\x5B8\xF5\x3\x2\x2\x2\x5B9\x5B7\x3\x2\x2\x2\x5BA\x5BB\ai\x2\x2\x5BB"+
		"\x5BC\x5\x38\x1D\x2\x5BC\xF7\x3\x2\x2\x2\x5BD\x5BE\ai\x2\x2\x5BE\x5BF"+
		"\x5\x38\x1D\x2\x5BF\x5C0\a;\x2\x2\x5C0\x5C1\x5\xF0y\x2\x5C1\x5C2\a<\x2"+
		"\x2\x5C2\xF9\x3\x2\x2\x2\x5C3\x5C5\a=\x2\x2\x5C4\x5C6\x5\xFC\x7F\x2\x5C5"+
		"\x5C4\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C8\x3\x2\x2\x2\x5C7\x5C9"+
		"\a\x42\x2\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x5CA\x3"+
		"\x2\x2\x2\x5CA\x5CB\a>\x2\x2\x5CB\xFB\x3\x2\x2\x2\x5CC\x5D1\x5t;\x2\x5CD"+
		"\x5CE\a\x42\x2\x2\x5CE\x5D0\x5t;\x2\x5CF\x5CD\x3\x2\x2\x2\x5D0\x5D3\x3"+
		"\x2\x2\x2\x5D1\x5CF\x3\x2\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2\xFD\x3\x2\x2"+
		"\x2\x5D3\x5D1\x3\x2\x2\x2\x5D4\x5D6\a=\x2\x2\x5D5\x5D7\x5\x100\x81\x2"+
		"\x5D6\x5D5\x3\x2\x2\x2\x5D6\x5D7\x3\x2\x2\x2\x5D7\x5D8\x3\x2\x2\x2\x5D8"+
		"\x5D9\a>\x2\x2\x5D9\xFF\x3\x2\x2\x2\x5DA\x5DE\x5\x102\x82\x2\x5DB\x5DD"+
		"\x5\x102\x82\x2\x5DC\x5DB\x3\x2\x2\x2\x5DD\x5E0\x3\x2\x2\x2\x5DE\x5DC"+
		"\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x101\x3\x2\x2\x2\x5E0\x5DE\x3"+
		"\x2\x2\x2\x5E1\x5E5\x5\x104\x83\x2\x5E2\x5E5\x5T+\x2\x5E3\x5E5\x5\x108"+
		"\x85\x2\x5E4\x5E1\x3\x2\x2\x2\x5E4\x5E2\x3\x2\x2\x2\x5E4\x5E3\x3\x2\x2"+
		"\x2\x5E5\x103\x3\x2\x2\x2\x5E6\x5E7\x5\x106\x84\x2\x5E7\x5E8\a\x41\x2"+
		"\x2\x5E8\x105\x3\x2\x2\x2\x5E9\x5EB\x5\x9EP\x2\x5EA\x5E9\x3\x2\x2\x2\x5EB"+
		"\x5EE\x3\x2\x2\x2\x5EC\x5EA\x3\x2\x2\x2\x5EC\x5ED\x3\x2\x2\x2\x5ED\x5EF"+
		"\x3\x2\x2\x2\x5EE\x5EC\x3\x2\x2\x2\x5EF\x5F0\x5v<\x2\x5F0\x5F1\x5n\x38"+
		"\x2\x5F1\x107\x3\x2\x2\x2\x5F2\x5F9\x5\x10C\x87\x2\x5F3\x5F9\x5\x110\x89"+
		"\x2\x5F4\x5F9\x5\x118\x8D\x2\x5F5\x5F9\x5\x11A\x8E\x2\x5F6\x5F9\x5\x12C"+
		"\x97\x2\x5F7\x5F9\x5\x132\x9A\x2\x5F8\x5F2\x3\x2\x2\x2\x5F8\x5F3\x3\x2"+
		"\x2\x2\x5F8\x5F4\x3\x2\x2\x2\x5F8\x5F5\x3\x2\x2\x2\x5F8\x5F6\x3\x2\x2"+
		"\x2\x5F8\x5F7\x3\x2\x2\x2\x5F9\x109\x3\x2\x2\x2\x5FA\x600\x5\x10C\x87"+
		"\x2\x5FB\x600\x5\x112\x8A\x2\x5FC\x600\x5\x11C\x8F\x2\x5FD\x600\x5\x12E"+
		"\x98\x2\x5FE\x600\x5\x134\x9B\x2\x5FF\x5FA\x3\x2\x2\x2\x5FF\x5FB\x3\x2"+
		"\x2\x2\x5FF\x5FC\x3\x2\x2\x2\x5FF\x5FD\x3\x2\x2\x2\x5FF\x5FE\x3\x2\x2"+
		"\x2\x600\x10B\x3\x2\x2\x2\x601\x60E\x5\xFE\x80\x2\x602\x60E\x5\x10E\x88"+
		"\x2\x603\x60E\x5\x114\x8B\x2\x604\x60E\x5\x11E\x90\x2\x605\x60E\x5\x120"+
		"\x91\x2\x606\x60E\x5\x130\x99\x2\x607\x60E\x5\x144\xA3\x2\x608\x60E\x5"+
		"\x146\xA4\x2\x609\x60E\x5\x148\xA5\x2\x60A\x60E\x5\x14C\xA7\x2\x60B\x60E"+
		"\x5\x14A\xA6\x2\x60C\x60E\x5\x14E\xA8\x2\x60D\x601\x3\x2\x2\x2\x60D\x602"+
		"\x3\x2\x2\x2\x60D\x603\x3\x2\x2\x2\x60D\x604\x3\x2\x2\x2\x60D\x605\x3"+
		"\x2\x2\x2\x60D\x606\x3\x2\x2\x2\x60D\x607\x3\x2\x2\x2\x60D\x608\x3\x2"+
		"\x2\x2\x60D\x609\x3\x2\x2\x2\x60D\x60A\x3\x2\x2\x2\x60D\x60B\x3\x2\x2"+
		"\x2\x60D\x60C\x3\x2\x2\x2\x60E\x10D\x3\x2\x2\x2\x60F\x610\a\x41\x2\x2"+
		"\x610\x10F\x3\x2\x2\x2\x611\x612\ah\x2\x2\x612\x613\aJ\x2\x2\x613\x614"+
		"\x5\x108\x85\x2\x614\x111\x3\x2\x2\x2\x615\x616\ah\x2\x2\x616\x617\aJ"+
		"\x2\x2\x617\x618\x5\x10A\x86\x2\x618\x113\x3\x2\x2\x2\x619\x61A\x5\x116"+
		"\x8C\x2\x61A\x61B\a\x41\x2\x2\x61B\x115\x3\x2\x2\x2\x61C\x624\x5\x1AC"+
		"\xD7\x2\x61D\x624\x5\x1CC\xE7\x2\x61E\x624\x5\x1CE\xE8\x2\x61F\x624\x5"+
		"\x1D4\xEB\x2\x620\x624\x5\x1D8\xED\x2\x621\x624\x5\x18A\xC6\x2\x622\x624"+
		"\x5\x176\xBC\x2\x623\x61C\x3\x2\x2\x2\x623\x61D\x3\x2\x2\x2\x623\x61E"+
		"\x3\x2\x2\x2\x623\x61F\x3\x2\x2\x2\x623\x620\x3\x2\x2\x2\x623\x621\x3"+
		"\x2\x2\x2\x623\x622\x3\x2\x2\x2\x624\x117\x3\x2\x2\x2\x625\x626\a\x18"+
		"\x2\x2\x626\x627\a;\x2\x2\x627\x628\x5\x1A0\xD1\x2\x628\x629\a<\x2\x2"+
		"\x629\x62A\x5\x108\x85\x2\x62A\x119\x3\x2\x2\x2\x62B\x62C\a\x18\x2\x2"+
		"\x62C\x62D\a;\x2\x2\x62D\x62E\x5\x1A0\xD1\x2\x62E\x62F\a<\x2\x2\x62F\x630"+
		"\x5\x10A\x86\x2\x630\x631\a\x11\x2\x2\x631\x632\x5\x108\x85\x2\x632\x11B"+
		"\x3\x2\x2\x2\x633\x634\a\x18\x2\x2\x634\x635\a;\x2\x2\x635\x636\x5\x1A0"+
		"\xD1\x2\x636\x637\a<\x2\x2\x637\x638\x5\x10A\x86\x2\x638\x639\a\x11\x2"+
		"\x2\x639\x63A\x5\x10A\x86\x2\x63A\x11D\x3\x2\x2\x2\x63B\x63C\a\x4\x2\x2"+
		"\x63C\x63D\x5\x1A0\xD1\x2\x63D\x63E\a\x41\x2\x2\x63E\x646\x3\x2\x2\x2"+
		"\x63F\x640\a\x4\x2\x2\x640\x641\x5\x1A0\xD1\x2\x641\x642\aJ\x2\x2\x642"+
		"\x643\x5\x1A0\xD1\x2\x643\x644\a\x41\x2\x2\x644\x646\x3\x2\x2\x2\x645"+
		"\x63B\x3\x2\x2\x2\x645\x63F\x3\x2\x2\x2\x646\x11F\x3\x2\x2\x2\x647\x648"+
		"\a+\x2\x2\x648\x649\a;\x2\x2\x649\x64A\x5\x1A0\xD1\x2\x64A\x64B\a<\x2"+
		"\x2\x64B\x64C\x5\x122\x92\x2\x64C\x121\x3\x2\x2\x2\x64D\x651\a=\x2\x2"+
		"\x64E\x650\x5\x124\x93\x2\x64F\x64E\x3\x2\x2\x2\x650\x653\x3\x2\x2\x2"+
		"\x651\x64F\x3\x2\x2\x2\x651\x652\x3\x2\x2\x2\x652\x657\x3\x2\x2\x2\x653"+
		"\x651\x3\x2\x2\x2\x654\x656\x5\x128\x95\x2\x655\x654\x3\x2\x2\x2\x656"+
		"\x659\x3\x2\x2\x2\x657\x655\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x65A"+
		"\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x65A\x65B\a>\x2\x2\x65B\x123\x3\x2"+
		"\x2\x2\x65C\x65D\x5\x126\x94\x2\x65D\x65E\x5\x100\x81\x2\x65E\x125\x3"+
		"\x2\x2\x2\x65F\x663\x5\x128\x95\x2\x660\x662\x5\x128\x95\x2\x661\x660"+
		"\x3\x2\x2\x2\x662\x665\x3\x2\x2\x2\x663\x661\x3\x2\x2\x2\x663\x664\x3"+
		"\x2\x2\x2\x664\x127\x3\x2\x2\x2\x665\x663\x3\x2\x2\x2\x666\x667\a\b\x2"+
		"\x2\x667\x668\x5\x19E\xD0\x2\x668\x669\aJ\x2\x2\x669\x671\x3\x2\x2\x2"+
		"\x66A\x66B\a\b\x2\x2\x66B\x66C\x5\x12A\x96\x2\x66C\x66D\aJ\x2\x2\x66D"+
		"\x671\x3\x2\x2\x2\x66E\x66F\a\xE\x2\x2\x66F\x671\aJ\x2\x2\x670\x666\x3"+
		"\x2\x2\x2\x670\x66A\x3\x2\x2\x2\x670\x66E\x3\x2\x2\x2\x671\x129\x3\x2"+
		"\x2\x2\x672\x673\ah\x2\x2\x673\x12B\x3\x2\x2\x2\x674\x675\a\x34\x2\x2"+
		"\x675\x676\a;\x2\x2\x676\x677\x5\x1A0\xD1\x2\x677\x678\a<\x2\x2\x678\x679"+
		"\x5\x108\x85\x2\x679\x12D\x3\x2\x2\x2\x67A\x67B\a\x34\x2\x2\x67B\x67C"+
		"\a;\x2\x2\x67C\x67D\x5\x1A0\xD1\x2\x67D\x67E\a<\x2\x2\x67E\x67F\x5\x10A"+
		"\x86\x2\x67F\x12F\x3\x2\x2\x2\x680\x681\a\xF\x2\x2\x681\x682\x5\x108\x85"+
		"\x2\x682\x683\a\x34\x2\x2\x683\x684\a;\x2\x2\x684\x685\x5\x1A0\xD1\x2"+
		"\x685\x686\a<\x2\x2\x686\x687\a\x41\x2\x2\x687\x131\x3\x2\x2\x2\x688\x68B"+
		"\x5\x136\x9C\x2\x689\x68B\x5\x140\xA1\x2\x68A\x688\x3\x2\x2\x2\x68A\x689"+
		"\x3\x2\x2\x2\x68B\x133\x3\x2\x2\x2\x68C\x68F\x5\x138\x9D\x2\x68D\x68F"+
		"\x5\x142\xA2\x2\x68E\x68C\x3\x2\x2\x2\x68E\x68D\x3\x2\x2\x2\x68F\x135"+
		"\x3\x2\x2\x2\x690\x691\a\x17\x2\x2\x691\x693\a;\x2\x2\x692\x694\x5\x13A"+
		"\x9E\x2\x693\x692\x3\x2\x2\x2\x693\x694\x3\x2\x2\x2\x694\x695\x3\x2\x2"+
		"\x2\x695\x697\a\x41\x2\x2\x696\x698\x5\x1A0\xD1\x2\x697\x696\x3\x2\x2"+
		"\x2\x697\x698\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69B\a\x41\x2\x2"+
		"\x69A\x69C\x5\x13C\x9F\x2\x69B\x69A\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2"+
		"\x69C\x69D\x3\x2\x2\x2\x69D\x69E\a<\x2\x2\x69E\x69F\x5\x108\x85\x2\x69F"+
		"\x137\x3\x2\x2\x2\x6A0\x6A1\a\x17\x2\x2\x6A1\x6A3\a;\x2\x2\x6A2\x6A4\x5"+
		"\x13A\x9E\x2\x6A3\x6A2\x3\x2\x2\x2\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A5\x3"+
		"\x2\x2\x2\x6A5\x6A7\a\x41\x2\x2\x6A6\x6A8\x5\x1A0\xD1\x2\x6A7\x6A6\x3"+
		"\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x3\x2\x2\x2\x6A9\x6AB\a\x41"+
		"\x2\x2\x6AA\x6AC\x5\x13C\x9F\x2\x6AB\x6AA\x3\x2\x2\x2\x6AB\x6AC\x3\x2"+
		"\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AE\a<\x2\x2\x6AE\x6AF\x5\x10A\x86"+
		"\x2\x6AF\x139\x3\x2\x2\x2\x6B0\x6B3\x5\x13E\xA0\x2\x6B1\x6B3\x5\x106\x84"+
		"\x2\x6B2\x6B0\x3\x2\x2\x2\x6B2\x6B1\x3\x2\x2\x2\x6B3\x13B\x3\x2\x2\x2"+
		"\x6B4\x6B5\x5\x13E\xA0\x2\x6B5\x13D\x3\x2\x2\x2\x6B6\x6BB\x5\x116\x8C"+
		"\x2\x6B7\x6B8\a\x42\x2\x2\x6B8\x6BA\x5\x116\x8C\x2\x6B9\x6B7\x3\x2\x2"+
		"\x2\x6BA\x6BD\x3\x2\x2\x2\x6BB\x6B9\x3\x2\x2\x2\x6BB\x6BC\x3\x2\x2\x2"+
		"\x6BC\x13F\x3\x2\x2\x2\x6BD\x6BB\x3\x2\x2\x2\x6BE\x6BF\a\x17\x2\x2\x6BF"+
		"\x6C3\a;\x2\x2\x6C0\x6C2\x5\x9EP\x2\x6C1\x6C0\x3\x2\x2\x2\x6C2\x6C5\x3"+
		"\x2\x2\x2\x6C3\x6C1\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C6\x3\x2"+
		"\x2\x2\x6C5\x6C3\x3\x2\x2\x2\x6C6\x6C7\x5v<\x2\x6C7\x6C8\x5r:\x2\x6C8"+
		"\x6C9\aJ\x2\x2\x6C9\x6CA\x5\x1A0\xD1\x2\x6CA\x6CB\a<\x2\x2\x6CB\x6CC\x5"+
		"\x108\x85\x2\x6CC\x141\x3\x2\x2\x2\x6CD\x6CE\a\x17\x2\x2\x6CE\x6D2\a;"+
		"\x2\x2\x6CF\x6D1\x5\x9EP\x2\x6D0\x6CF\x3\x2\x2\x2\x6D1\x6D4\x3\x2\x2\x2"+
		"\x6D2\x6D0\x3\x2\x2\x2\x6D2\x6D3\x3\x2\x2\x2\x6D3\x6D5\x3\x2\x2\x2\x6D4"+
		"\x6D2\x3\x2\x2\x2\x6D5\x6D6\x5v<\x2\x6D6\x6D7\x5r:\x2\x6D7\x6D8\aJ\x2"+
		"\x2\x6D8\x6D9\x5\x1A0\xD1\x2\x6D9\x6DA\a<\x2\x2\x6DA\x6DB\x5\x10A\x86"+
		"\x2\x6DB\x143\x3\x2\x2\x2\x6DC\x6DE\a\x6\x2\x2\x6DD\x6DF\ah\x2\x2\x6DE"+
		"\x6DD\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2\x2\x6E0\x6E1"+
		"\a\x41\x2\x2\x6E1\x145\x3\x2\x2\x2\x6E2\x6E4\a\r\x2\x2\x6E3\x6E5\ah\x2"+
		"\x2\x6E4\x6E3\x3\x2\x2\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2"+
		"\x6E6\x6E7\a\x41\x2\x2\x6E7\x147\x3\x2\x2\x2\x6E8\x6EA\a&\x2\x2\x6E9\x6EB"+
		"\x5\x1A0\xD1\x2\x6EA\x6E9\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC"+
		"\x3\x2\x2\x2\x6EC\x6ED\a\x41\x2\x2\x6ED\x149\x3\x2\x2\x2\x6EE\x6EF\a."+
		"\x2\x2\x6EF\x6F0\x5\x1A0\xD1\x2\x6F0\x6F1\a\x41\x2\x2\x6F1\x14B\x3\x2"+
		"\x2\x2\x6F2\x6F3\a,\x2\x2\x6F3\x6F4\a;\x2\x2\x6F4\x6F5\x5\x1A0\xD1\x2"+
		"\x6F5\x6F6\a<\x2\x2\x6F6\x6F7\x5\xFE\x80\x2\x6F7\x14D\x3\x2\x2\x2\x6F8"+
		"\x6F9\a\x31\x2\x2\x6F9\x6FA\x5\xFE\x80\x2\x6FA\x6FB\x5\x150\xA9\x2\x6FB"+
		"\x705\x3\x2\x2\x2\x6FC\x6FD\a\x31\x2\x2\x6FD\x6FF\x5\xFE\x80\x2\x6FE\x700"+
		"\x5\x150\xA9\x2\x6FF\x6FE\x3\x2\x2\x2\x6FF\x700\x3\x2\x2\x2\x700\x701"+
		"\x3\x2\x2\x2\x701\x702\x5\x158\xAD\x2\x702\x705\x3\x2\x2\x2\x703\x705"+
		"\x5\x15A\xAE\x2\x704\x6F8\x3\x2\x2\x2\x704\x6FC\x3\x2\x2\x2\x704\x703"+
		"\x3\x2\x2\x2\x705\x14F\x3\x2\x2\x2\x706\x70A\x5\x152\xAA\x2\x707\x709"+
		"\x5\x152\xAA\x2\x708\x707\x3\x2\x2\x2\x709\x70C\x3\x2\x2\x2\x70A\x708"+
		"\x3\x2\x2\x2\x70A\x70B\x3\x2\x2\x2\x70B\x151\x3\x2\x2\x2\x70C\x70A\x3"+
		"\x2\x2\x2\x70D\x70E\a\t\x2\x2\x70E\x70F\a;\x2\x2\x70F\x710\x5\x154\xAB"+
		"\x2\x710\x711\a<\x2\x2\x711\x712\x5\xFE\x80\x2\x712\x153\x3\x2\x2\x2\x713"+
		"\x715\x5\x9EP\x2\x714\x713\x3\x2\x2\x2\x715\x718\x3\x2\x2\x2\x716\x714"+
		"\x3\x2\x2\x2\x716\x717\x3\x2\x2\x2\x717\x719\x3\x2\x2\x2\x718\x716\x3"+
		"\x2\x2\x2\x719\x71A\x5\x156\xAC\x2\x71A\x71B\x5r:\x2\x71B\x155\x3\x2\x2"+
		"\x2\x71C\x721\x5~@\x2\x71D\x71E\aX\x2\x2\x71E\x720\x5\x12\n\x2\x71F\x71D"+
		"\x3\x2\x2\x2\x720\x723\x3\x2\x2\x2\x721\x71F\x3\x2\x2\x2\x721\x722\x3"+
		"\x2\x2\x2\x722\x157\x3\x2\x2\x2\x723\x721\x3\x2\x2\x2\x724\x725\a\x15"+
		"\x2\x2\x725\x726\x5\xFE\x80\x2\x726\x159\x3\x2\x2\x2\x727\x728\a\x31\x2"+
		"\x2\x728\x729\x5\x15C\xAF\x2\x729\x72B\x5\xFE\x80\x2\x72A\x72C\x5\x150"+
		"\xA9\x2\x72B\x72A\x3\x2\x2\x2\x72B\x72C\x3\x2\x2\x2\x72C\x72E\x3\x2\x2"+
		"\x2\x72D\x72F\x5\x158\xAD\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3\x2\x2"+
		"\x2\x72F\x15B\x3\x2\x2\x2\x730\x731\a;\x2\x2\x731\x733\x5\x15E\xB0\x2"+
		"\x732\x734\a\x41\x2\x2\x733\x732\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2\x734"+
		"\x735\x3\x2\x2\x2\x735\x736\a<\x2\x2\x736\x15D\x3\x2\x2\x2\x737\x73C\x5"+
		"\x160\xB1\x2\x738\x739\a\x41\x2\x2\x739\x73B\x5\x160\xB1\x2\x73A\x738"+
		"\x3\x2\x2\x2\x73B\x73E\x3\x2\x2\x2\x73C\x73A\x3\x2\x2\x2\x73C\x73D\x3"+
		"\x2\x2\x2\x73D\x15F\x3\x2\x2\x2\x73E\x73C\x3\x2\x2\x2\x73F\x741\x5\x9E"+
		"P\x2\x740\x73F\x3\x2\x2\x2\x741\x744\x3\x2\x2\x2\x742\x740\x3\x2\x2\x2"+
		"\x742\x743\x3\x2\x2\x2\x743\x745\x3\x2\x2\x2\x744\x742\x3\x2\x2\x2\x745"+
		"\x746\x5v<\x2\x746\x747\x5r:\x2\x747\x748\a\x44\x2\x2\x748\x749\x5\x1A0"+
		"\xD1\x2\x749\x161\x3\x2\x2\x2\x74A\x74D\x5\x170\xB9\x2\x74B\x74D\x5\x198"+
		"\xCD\x2\x74C\x74A\x3\x2\x2\x2\x74C\x74B\x3\x2\x2\x2\x74D\x751\x3\x2\x2"+
		"\x2\x74E\x750\x5\x16A\xB6\x2\x74F\x74E\x3\x2\x2\x2\x750\x753\x3\x2\x2"+
		"\x2\x751\x74F\x3\x2\x2\x2\x751\x752\x3\x2\x2\x2\x752\x163\x3\x2\x2\x2"+
		"\x753\x751\x3\x2\x2\x2\x754\x772\x5\x2\x2\x2\x755\x75A\x5\x38\x1D\x2\x756"+
		"\x757\a?\x2\x2\x757\x759\a@\x2\x2\x758\x756\x3\x2\x2\x2\x759\x75C\x3\x2"+
		"\x2\x2\x75A\x758\x3\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x75D\x3\x2\x2"+
		"\x2\x75C\x75A\x3\x2\x2\x2\x75D\x75E\a\x43\x2\x2\x75E\x75F\a\v\x2\x2\x75F"+
		"\x772\x3\x2\x2\x2\x760\x761\a\x32\x2\x2\x761\x762\a\x43\x2\x2\x762\x772"+
		"\a\v\x2\x2\x763\x772\a-\x2\x2\x764\x765\x5\x38\x1D\x2\x765\x766\a\x43"+
		"\x2\x2\x766\x767\a-\x2\x2\x767\x772\x3\x2\x2\x2\x768\x769\a;\x2\x2\x769"+
		"\x76A\x5\x1A0\xD1\x2\x76A\x76B\a<\x2\x2\x76B\x772\x3\x2\x2\x2\x76C\x772"+
		"\x5\x176\xBC\x2\x76D\x772\x5\x17E\xC0\x2\x76E\x772\x5\x184\xC3\x2\x76F"+
		"\x772\x5\x18A\xC6\x2\x770\x772\x5\x192\xCA\x2\x771\x754\x3\x2\x2\x2\x771"+
		"\x755\x3\x2\x2\x2\x771\x760\x3\x2\x2\x2\x771\x763\x3\x2\x2\x2\x771\x764"+
		"\x3\x2\x2\x2\x771\x768\x3\x2\x2\x2\x771\x76C\x3\x2\x2\x2\x771\x76D\x3"+
		"\x2\x2\x2\x771\x76E\x3\x2\x2\x2\x771\x76F\x3\x2\x2\x2\x771\x770\x3\x2"+
		"\x2\x2\x772\x165\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774\x167\x3\x2\x2"+
		"\x2\x775\x792\x5\x2\x2\x2\x776\x77B\x5\x38\x1D\x2\x777\x778\a?\x2\x2\x778"+
		"\x77A\a@\x2\x2\x779\x777\x3\x2\x2\x2\x77A\x77D\x3\x2\x2\x2\x77B\x779\x3"+
		"\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77E\x3\x2\x2\x2\x77D\x77B\x3\x2"+
		"\x2\x2\x77E\x77F\a\x43\x2\x2\x77F\x780\a\v\x2\x2\x780\x792\x3\x2\x2\x2"+
		"\x781\x782\a\x32\x2\x2\x782\x783\a\x43\x2\x2\x783\x792\a\v\x2\x2\x784"+
		"\x792\a-\x2\x2\x785\x786\x5\x38\x1D\x2\x786\x787\a\x43\x2\x2\x787\x788"+
		"\a-\x2\x2\x788\x792\x3\x2\x2\x2\x789\x78A\a;\x2\x2\x78A\x78B\x5\x1A0\xD1"+
		"\x2\x78B\x78C\a<\x2\x2\x78C\x792\x3\x2\x2\x2\x78D\x792\x5\x176\xBC\x2"+
		"\x78E\x792\x5\x17E\xC0\x2\x78F\x792\x5\x18A\xC6\x2\x790\x792\x5\x192\xCA"+
		"\x2\x791\x775\x3\x2\x2\x2\x791\x776\x3\x2\x2\x2\x791\x781\x3\x2\x2\x2"+
		"\x791\x784\x3\x2\x2\x2\x791\x785\x3\x2\x2\x2\x791\x789\x3\x2\x2\x2\x791"+
		"\x78D\x3\x2\x2\x2\x791\x78E\x3\x2\x2\x2\x791\x78F\x3\x2\x2\x2\x791\x790"+
		"\x3\x2\x2\x2\x792\x169\x3\x2\x2\x2\x793\x799\x5\x178\xBD\x2\x794\x799"+
		"\x5\x180\xC1\x2\x795\x799\x5\x186\xC4\x2\x796\x799\x5\x18C\xC7\x2\x797"+
		"\x799\x5\x194\xCB\x2\x798\x793\x3\x2\x2\x2\x798\x794\x3\x2\x2\x2\x798"+
		"\x795\x3\x2\x2\x2\x798\x796\x3\x2\x2\x2\x798\x797\x3\x2\x2\x2\x799\x16B"+
		"\x3\x2\x2\x2\x79A\x79B\x3\x2\x2\x2\x79B\x16D\x3\x2\x2\x2\x79C\x7A1\x5"+
		"\x178\xBD\x2\x79D\x7A1\x5\x180\xC1\x2\x79E\x7A1\x5\x18C\xC7\x2\x79F\x7A1"+
		"\x5\x194\xCB\x2\x7A0\x79C\x3\x2\x2\x2\x7A0\x79D\x3\x2\x2\x2\x7A0\x79E"+
		"\x3\x2\x2\x2\x7A0\x79F\x3\x2\x2\x2\x7A1\x16F\x3\x2\x2\x2\x7A2\x7CB\x5"+
		"\x2\x2\x2\x7A3\x7A8\x5\x38\x1D\x2\x7A4\x7A5\a?\x2\x2\x7A5\x7A7\a@\x2\x2"+
		"\x7A6\x7A4\x3\x2\x2\x2\x7A7\x7AA\x3\x2\x2\x2\x7A8\x7A6\x3\x2\x2\x2\x7A8"+
		"\x7A9\x3\x2\x2\x2\x7A9\x7AB\x3\x2\x2\x2\x7AA\x7A8\x3\x2\x2\x2\x7AB\x7AC"+
		"\a\x43\x2\x2\x7AC\x7AD\a\v\x2\x2\x7AD\x7CB\x3\x2\x2\x2\x7AE\x7B3\x5x="+
		"\x2\x7AF\x7B0\a?\x2\x2\x7B0\x7B2\a@\x2\x2\x7B1\x7AF\x3\x2\x2\x2\x7B2\x7B5"+
		"\x3\x2\x2\x2\x7B3\x7B1\x3\x2\x2\x2\x7B3\x7B4\x3\x2\x2\x2\x7B4\x7B6\x3"+
		"\x2\x2\x2\x7B5\x7B3\x3\x2\x2\x2\x7B6\x7B7\a\x43\x2\x2\x7B7\x7B8\a\v\x2"+
		"\x2\x7B8\x7CB\x3\x2\x2\x2\x7B9\x7BA\a\x32\x2\x2\x7BA\x7BB\a\x43\x2\x2"+
		"\x7BB\x7CB\a\v\x2\x2\x7BC\x7CB\a-\x2\x2\x7BD\x7BE\x5\x38\x1D\x2\x7BE\x7BF"+
		"\a\x43\x2\x2\x7BF\x7C0\a-\x2\x2\x7C0\x7CB\x3\x2\x2\x2\x7C1\x7C2\a;\x2"+
		"\x2\x7C2\x7C3\x5\x1A0\xD1\x2\x7C3\x7C4\a<\x2\x2\x7C4\x7CB\x3\x2\x2\x2"+
		"\x7C5\x7CB\x5\x17A\xBE\x2\x7C6\x7CB\x5\x182\xC2\x2\x7C7\x7CB\x5\x188\xC5"+
		"\x2\x7C8\x7CB\x5\x18E\xC8\x2\x7C9\x7CB\x5\x196\xCC\x2\x7CA\x7A2\x3\x2"+
		"\x2\x2\x7CA\x7A3\x3\x2\x2\x2\x7CA\x7AE\x3\x2\x2\x2\x7CA\x7B9\x3\x2\x2"+
		"\x2\x7CA\x7BC\x3\x2\x2\x2\x7CA\x7BD\x3\x2\x2\x2\x7CA\x7C1\x3\x2\x2\x2"+
		"\x7CA\x7C5\x3\x2\x2\x2\x7CA\x7C6\x3\x2\x2\x2\x7CA\x7C7\x3\x2\x2\x2\x7CA"+
		"\x7C8\x3\x2\x2\x2\x7CA\x7C9\x3\x2\x2\x2\x7CB\x171\x3\x2\x2\x2\x7CC\x7CD"+
		"\x3\x2\x2\x2\x7CD\x173\x3\x2\x2\x2\x7CE\x7F6\x5\x2\x2\x2\x7CF\x7D4\x5"+
		"\x38\x1D\x2\x7D0\x7D1\a?\x2\x2\x7D1\x7D3\a@\x2\x2\x7D2\x7D0\x3\x2\x2\x2"+
		"\x7D3\x7D6\x3\x2\x2\x2\x7D4\x7D2\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5"+
		"\x7D7\x3\x2\x2\x2\x7D6\x7D4\x3\x2\x2\x2\x7D7\x7D8\a\x43\x2\x2\x7D8\x7D9"+
		"\a\v\x2\x2\x7D9\x7F6\x3\x2\x2\x2\x7DA\x7DF\x5x=\x2\x7DB\x7DC\a?\x2\x2"+
		"\x7DC\x7DE\a@\x2\x2\x7DD\x7DB\x3\x2\x2\x2\x7DE\x7E1\x3\x2\x2\x2\x7DF\x7DD"+
		"\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E2\x3\x2\x2\x2\x7E1\x7DF\x3"+
		"\x2\x2\x2\x7E2\x7E3\a\x43\x2\x2\x7E3\x7E4\a\v\x2\x2\x7E4\x7F6\x3\x2\x2"+
		"\x2\x7E5\x7E6\a\x32\x2\x2\x7E6\x7E7\a\x43\x2\x2\x7E7\x7F6\a\v\x2\x2\x7E8"+
		"\x7F6\a-\x2\x2\x7E9\x7EA\x5\x38\x1D\x2\x7EA\x7EB\a\x43\x2\x2\x7EB\x7EC"+
		"\a-\x2\x2\x7EC\x7F6\x3\x2\x2\x2\x7ED\x7EE\a;\x2\x2\x7EE\x7EF\x5\x1A0\xD1"+
		"\x2\x7EF\x7F0\a<\x2\x2\x7F0\x7F6\x3\x2\x2\x2\x7F1\x7F6\x5\x17A\xBE\x2"+
		"\x7F2\x7F6\x5\x182\xC2\x2\x7F3\x7F6\x5\x18E\xC8\x2\x7F4\x7F6\x5\x196\xCC"+
		"\x2\x7F5\x7CE\x3\x2\x2\x2\x7F5\x7CF\x3\x2\x2\x2\x7F5\x7DA\x3\x2\x2\x2"+
		"\x7F5\x7E5\x3\x2\x2\x2\x7F5\x7E8\x3\x2\x2\x2\x7F5\x7E9\x3\x2\x2\x2\x7F5"+
		"\x7ED\x3\x2\x2\x2\x7F5\x7F1\x3\x2\x2\x2\x7F5\x7F2\x3\x2\x2\x2\x7F5\x7F3"+
		"\x3\x2\x2\x2\x7F5\x7F4\x3\x2\x2\x2\x7F6\x175\x3\x2\x2\x2\x7F7\x7F9\a!"+
		"\x2\x2\x7F8\x7FA\x5,\x17\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2\x2"+
		"\x7FA\x7FE\x3\x2\x2\x2\x7FB\x7FD\x5\xE8u\x2\x7FC\x7FB\x3\x2\x2\x2\x7FD"+
		"\x800\x3\x2\x2\x2\x7FE\x7FC\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x801"+
		"\x3\x2\x2\x2\x800\x7FE\x3\x2\x2\x2\x801\x80C\ah\x2\x2\x802\x806\a\x43"+
		"\x2\x2\x803\x805\x5\xE8u\x2\x804\x803\x3\x2\x2\x2\x805\x808\x3\x2\x2\x2"+
		"\x806\x804\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x809\x3\x2\x2\x2\x808"+
		"\x806\x3\x2\x2\x2\x809\x80B\ah\x2\x2\x80A\x802\x3\x2\x2\x2\x80B\x80E\x3"+
		"\x2\x2\x2\x80C\x80A\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x810\x3\x2"+
		"\x2\x2\x80E\x80C\x3\x2\x2\x2\x80F\x811\x5\x17C\xBF\x2\x810\x80F\x3\x2"+
		"\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x814\a;\x2\x2"+
		"\x813\x815\x5\x190\xC9\x2\x814\x813\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2"+
		"\x815\x816\x3\x2\x2\x2\x816\x818\a<\x2\x2\x817\x819\x5\x64\x33\x2\x818"+
		"\x817\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x84B\x3\x2\x2\x2\x81A\x81B"+
		"\x5<\x1F\x2\x81B\x81C\a\x43\x2\x2\x81C\x81E\a!\x2\x2\x81D\x81F\x5,\x17"+
		"\x2\x81E\x81D\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F\x823\x3\x2\x2\x2"+
		"\x820\x822\x5\xE8u\x2\x821\x820\x3\x2\x2\x2\x822\x825\x3\x2\x2\x2\x823"+
		"\x821\x3\x2\x2\x2\x823\x824\x3\x2\x2\x2\x824\x826\x3\x2\x2\x2\x825\x823"+
		"\x3\x2\x2\x2\x826\x828\ah\x2\x2\x827\x829\x5\x17C\xBF\x2\x828\x827\x3"+
		"\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x82C\a;\x2"+
		"\x2\x82B\x82D\x5\x190\xC9\x2\x82C\x82B\x3\x2\x2\x2\x82C\x82D\x3\x2\x2"+
		"\x2\x82D\x82E\x3\x2\x2\x2\x82E\x830\a<\x2\x2\x82F\x831\x5\x64\x33\x2\x830"+
		"\x82F\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831\x84B\x3\x2\x2\x2\x832\x833"+
		"\x5\x162\xB2\x2\x833\x834\a\x43\x2\x2\x834\x836\a!\x2\x2\x835\x837\x5"+
		",\x17\x2\x836\x835\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2\x837\x83B\x3\x2\x2"+
		"\x2\x838\x83A\x5\xE8u\x2\x839\x838\x3\x2\x2\x2\x83A\x83D\x3\x2\x2\x2\x83B"+
		"\x839\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x83E\x3\x2\x2\x2\x83D\x83B"+
		"\x3\x2\x2\x2\x83E\x840\ah\x2\x2\x83F\x841\x5\x17C\xBF\x2\x840\x83F\x3"+
		"\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x844\a;\x2"+
		"\x2\x843\x845\x5\x190\xC9\x2\x844\x843\x3\x2\x2\x2\x844\x845\x3\x2\x2"+
		"\x2\x845\x846\x3\x2\x2\x2\x846\x848\a<\x2\x2\x847\x849\x5\x64\x33\x2\x848"+
		"\x847\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2\x849\x84B\x3\x2\x2\x2\x84A\x7F7"+
		"\x3\x2\x2\x2\x84A\x81A\x3\x2\x2\x2\x84A\x832\x3\x2\x2\x2\x84B\x177\x3"+
		"\x2\x2\x2\x84C\x84D\a\x43\x2\x2\x84D\x84F\a!\x2\x2\x84E\x850\x5,\x17\x2"+
		"\x84F\x84E\x3\x2\x2\x2\x84F\x850\x3\x2\x2\x2\x850\x854\x3\x2\x2\x2\x851"+
		"\x853\x5\xE8u\x2\x852\x851\x3\x2\x2\x2\x853\x856\x3\x2\x2\x2\x854\x852"+
		"\x3\x2\x2\x2\x854\x855\x3\x2\x2\x2\x855\x857\x3\x2\x2\x2\x856\x854\x3"+
		"\x2\x2\x2\x857\x859\ah\x2\x2\x858\x85A\x5\x17C\xBF\x2\x859\x858\x3\x2"+
		"\x2\x2\x859\x85A\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B\x85D\a;\x2\x2"+
		"\x85C\x85E\x5\x190\xC9\x2\x85D\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2"+
		"\x85E\x85F\x3\x2\x2\x2\x85F\x861\a<\x2\x2\x860\x862\x5\x64\x33\x2\x861"+
		"\x860\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862\x179\x3\x2\x2\x2\x863\x865"+
		"\a!\x2\x2\x864\x866\x5,\x17\x2\x865\x864\x3\x2\x2\x2\x865\x866\x3\x2\x2"+
		"\x2\x866\x86A\x3\x2\x2\x2\x867\x869\x5\xE8u\x2\x868\x867\x3\x2\x2\x2\x869"+
		"\x86C\x3\x2\x2\x2\x86A\x868\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x86D"+
		"\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86D\x878\ah\x2\x2\x86E\x872\a\x43"+
		"\x2\x2\x86F\x871\x5\xE8u\x2\x870\x86F\x3\x2\x2\x2\x871\x874\x3\x2\x2\x2"+
		"\x872\x870\x3\x2\x2\x2\x872\x873\x3\x2\x2\x2\x873\x875\x3\x2\x2\x2\x874"+
		"\x872\x3\x2\x2\x2\x875\x877\ah\x2\x2\x876\x86E\x3\x2\x2\x2\x877\x87A\x3"+
		"\x2\x2\x2\x878\x876\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2\x879\x87C\x3\x2"+
		"\x2\x2\x87A\x878\x3\x2\x2\x2\x87B\x87D\x5\x17C\xBF\x2\x87C\x87B\x3\x2"+
		"\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\x880\a;\x2\x2"+
		"\x87F\x881\x5\x190\xC9\x2\x880\x87F\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2"+
		"\x881\x882\x3\x2\x2\x2\x882\x884\a<\x2\x2\x883\x885\x5\x64\x33\x2\x884"+
		"\x883\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x89F\x3\x2\x2\x2\x886\x887"+
		"\x5<\x1F\x2\x887\x888\a\x43\x2\x2\x888\x88A\a!\x2\x2\x889\x88B\x5,\x17"+
		"\x2\x88A\x889\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88F\x3\x2\x2\x2"+
		"\x88C\x88E\x5\xE8u\x2\x88D\x88C\x3\x2\x2\x2\x88E\x891\x3\x2\x2\x2\x88F"+
		"\x88D\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890\x892\x3\x2\x2\x2\x891\x88F"+
		"\x3\x2\x2\x2\x892\x894\ah\x2\x2\x893\x895\x5\x17C\xBF\x2\x894\x893\x3"+
		"\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\x898\a;\x2"+
		"\x2\x897\x899\x5\x190\xC9\x2\x898\x897\x3\x2\x2\x2\x898\x899\x3\x2\x2"+
		"\x2\x899\x89A\x3\x2\x2\x2\x89A\x89C\a<\x2\x2\x89B\x89D\x5\x64\x33\x2\x89C"+
		"\x89B\x3\x2\x2\x2\x89C\x89D\x3\x2\x2\x2\x89D\x89F\x3\x2\x2\x2\x89E\x863"+
		"\x3\x2\x2\x2\x89E\x886\x3\x2\x2\x2\x89F\x17B\x3\x2\x2\x2\x8A0\x8A4\x5"+
		",\x17\x2\x8A1\x8A2\a\x46\x2\x2\x8A2\x8A4\a\x45\x2\x2\x8A3\x8A0\x3\x2\x2"+
		"\x2\x8A3\x8A1\x3\x2\x2\x2\x8A4\x17D\x3\x2\x2\x2\x8A5\x8A6\x5\x162\xB2"+
		"\x2\x8A6\x8A7\a\x43\x2\x2\x8A7\x8A8\ah\x2\x2\x8A8\x8B3\x3\x2\x2\x2\x8A9"+
		"\x8AA\a*\x2\x2\x8AA\x8AB\a\x43\x2\x2\x8AB\x8B3\ah\x2\x2\x8AC\x8AD\x5\x38"+
		"\x1D\x2\x8AD\x8AE\a\x43\x2\x2\x8AE\x8AF\a*\x2\x2\x8AF\x8B0\a\x43\x2\x2"+
		"\x8B0\x8B1\ah\x2\x2\x8B1\x8B3\x3\x2\x2\x2\x8B2\x8A5\x3\x2\x2\x2\x8B2\x8A9"+
		"\x3\x2\x2\x2\x8B2\x8AC\x3\x2\x2\x2\x8B3\x17F\x3\x2\x2\x2\x8B4\x8B5\a\x43"+
		"\x2\x2\x8B5\x8B6\ah\x2\x2\x8B6\x181\x3\x2\x2\x2\x8B7\x8B8\a*\x2\x2\x8B8"+
		"\x8B9\a\x43\x2\x2\x8B9\x8C1\ah\x2\x2\x8BA\x8BB\x5\x38\x1D\x2\x8BB\x8BC"+
		"\a\x43\x2\x2\x8BC\x8BD\a*\x2\x2\x8BD\x8BE\a\x43\x2\x2\x8BE\x8BF\ah\x2"+
		"\x2\x8BF\x8C1\x3\x2\x2\x2\x8C0\x8B7\x3\x2\x2\x2\x8C0\x8BA\x3\x2\x2\x2"+
		"\x8C1\x183\x3\x2\x2\x2\x8C2\x8C3\x5<\x1F\x2\x8C3\x8C4\a?\x2\x2\x8C4\x8C5"+
		"\x5\x1A0\xD1\x2\x8C5\x8C6\a@\x2\x2\x8C6\x8CD\x3\x2\x2\x2\x8C7\x8C8\x5"+
		"\x168\xB5\x2\x8C8\x8C9\a?\x2\x2\x8C9\x8CA\x5\x1A0\xD1\x2\x8CA\x8CB\a@"+
		"\x2\x2\x8CB\x8CD\x3\x2\x2\x2\x8CC\x8C2\x3\x2\x2\x2\x8CC\x8C7\x3\x2\x2"+
		"\x2\x8CD\x8D5\x3\x2\x2\x2\x8CE\x8CF\x5\x166\xB4\x2\x8CF\x8D0\a?\x2\x2"+
		"\x8D0\x8D1\x5\x1A0\xD1\x2\x8D1\x8D2\a@\x2\x2\x8D2\x8D4\x3\x2\x2\x2\x8D3"+
		"\x8CE\x3\x2\x2\x2\x8D4\x8D7\x3\x2\x2\x2\x8D5\x8D3\x3\x2\x2\x2\x8D5\x8D6"+
		"\x3\x2\x2\x2\x8D6\x185\x3\x2\x2\x2\x8D7\x8D5\x3\x2\x2\x2\x8D8\x8D9\x5"+
		"\x16E\xB8\x2\x8D9\x8DA\a?\x2\x2\x8DA\x8DB\x5\x1A0\xD1\x2\x8DB\x8DC\a@"+
		"\x2\x2\x8DC\x8E4\x3\x2\x2\x2\x8DD\x8DE\x5\x16C\xB7\x2\x8DE\x8DF\a?\x2"+
		"\x2\x8DF\x8E0\x5\x1A0\xD1\x2\x8E0\x8E1\a@\x2\x2\x8E1\x8E3\x3\x2\x2\x2"+
		"\x8E2\x8DD\x3\x2\x2\x2\x8E3\x8E6\x3\x2\x2\x2\x8E4\x8E2\x3\x2\x2\x2\x8E4"+
		"\x8E5\x3\x2\x2\x2\x8E5\x187\x3\x2\x2\x2\x8E6\x8E4\x3\x2\x2\x2\x8E7\x8E8"+
		"\x5<\x1F\x2\x8E8\x8E9\a?\x2\x2\x8E9\x8EA\x5\x1A0\xD1\x2\x8EA\x8EB\a@\x2"+
		"\x2\x8EB\x8F2\x3\x2\x2\x2\x8EC\x8ED\x5\x174\xBB\x2\x8ED\x8EE\a?\x2\x2"+
		"\x8EE\x8EF\x5\x1A0\xD1\x2\x8EF\x8F0\a@\x2\x2\x8F0\x8F2\x3\x2\x2\x2\x8F1"+
		"\x8E7\x3\x2\x2\x2\x8F1\x8EC\x3\x2\x2\x2\x8F2\x8FA\x3\x2\x2\x2\x8F3\x8F4"+
		"\x5\x172\xBA\x2\x8F4\x8F5\a?\x2\x2\x8F5\x8F6\x5\x1A0\xD1\x2\x8F6\x8F7"+
		"\a@\x2\x2\x8F7\x8F9\x3\x2\x2\x2\x8F8\x8F3\x3\x2\x2\x2\x8F9\x8FC\x3\x2"+
		"\x2\x2\x8FA\x8F8\x3\x2\x2\x2\x8FA\x8FB\x3\x2\x2\x2\x8FB\x189\x3\x2\x2"+
		"\x2\x8FC\x8FA\x3\x2\x2\x2\x8FD\x8FE\x5> \x2\x8FE\x900\a;\x2\x2\x8FF\x901"+
		"\x5\x190\xC9\x2\x900\x8FF\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x902"+
		"\x3\x2\x2\x2\x902\x903\a<\x2\x2\x903\x942\x3\x2\x2\x2\x904\x905\x5\x38"+
		"\x1D\x2\x905\x907\a\x43\x2\x2\x906\x908\x5,\x17\x2\x907\x906\x3\x2\x2"+
		"\x2\x907\x908\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\x90A\ah\x2\x2\x90A"+
		"\x90C\a;\x2\x2\x90B\x90D\x5\x190\xC9\x2\x90C\x90B\x3\x2\x2\x2\x90C\x90D"+
		"\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\x90F\a<\x2\x2\x90F\x942\x3\x2"+
		"\x2\x2\x910\x911\x5<\x1F\x2\x911\x913\a\x43\x2\x2\x912\x914\x5,\x17\x2"+
		"\x913\x912\x3\x2\x2\x2\x913\x914\x3\x2\x2\x2\x914\x915\x3\x2\x2\x2\x915"+
		"\x916\ah\x2\x2\x916\x918\a;\x2\x2\x917\x919\x5\x190\xC9\x2\x918\x917\x3"+
		"\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91B\a<\x2"+
		"\x2\x91B\x942\x3\x2\x2\x2\x91C\x91D\x5\x162\xB2\x2\x91D\x91F\a\x43\x2"+
		"\x2\x91E\x920\x5,\x17\x2\x91F\x91E\x3\x2\x2\x2\x91F\x920\x3\x2\x2\x2\x920"+
		"\x921\x3\x2\x2\x2\x921\x922\ah\x2\x2\x922\x924\a;\x2\x2\x923\x925\x5\x190"+
		"\xC9\x2\x924\x923\x3\x2\x2\x2\x924\x925\x3\x2\x2\x2\x925\x926\x3\x2\x2"+
		"\x2\x926\x927\a<\x2\x2\x927\x942\x3\x2\x2\x2\x928\x929\a*\x2\x2\x929\x92B"+
		"\a\x43\x2\x2\x92A\x92C\x5,\x17\x2\x92B\x92A\x3\x2\x2\x2\x92B\x92C\x3\x2"+
		"\x2\x2\x92C\x92D\x3\x2\x2\x2\x92D\x92E\ah\x2\x2\x92E\x930\a;\x2\x2\x92F"+
		"\x931\x5\x190\xC9\x2\x930\x92F\x3\x2\x2\x2\x930\x931\x3\x2\x2\x2\x931"+
		"\x932\x3\x2\x2\x2\x932\x942\a<\x2\x2\x933\x934\x5\x38\x1D\x2\x934\x935"+
		"\a\x43\x2\x2\x935\x936\a*\x2\x2\x936\x938\a\x43\x2\x2\x937\x939\x5,\x17"+
		"\x2\x938\x937\x3\x2\x2\x2\x938\x939\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2"+
		"\x93A\x93B\ah\x2\x2\x93B\x93D\a;\x2\x2\x93C\x93E\x5\x190\xC9\x2\x93D\x93C"+
		"\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\x940\a<"+
		"\x2\x2\x940\x942\x3\x2\x2\x2\x941\x8FD\x3\x2\x2\x2\x941\x904\x3\x2\x2"+
		"\x2\x941\x910\x3\x2\x2\x2\x941\x91C\x3\x2\x2\x2\x941\x928\x3\x2\x2\x2"+
		"\x941\x933\x3\x2\x2\x2\x942\x18B\x3\x2\x2\x2\x943\x945\a\x43\x2\x2\x944"+
		"\x946\x5,\x17\x2\x945\x944\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x947"+
		"\x3\x2\x2\x2\x947\x948\ah\x2\x2\x948\x94A\a;\x2\x2\x949\x94B\x5\x190\xC9"+
		"\x2\x94A\x949\x3\x2\x2\x2\x94A\x94B\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2"+
		"\x94C\x94D\a<\x2\x2\x94D\x18D\x3\x2\x2\x2\x94E\x94F\x5> \x2\x94F\x951"+
		"\a;\x2\x2\x950\x952\x5\x190\xC9\x2\x951\x950\x3\x2\x2\x2\x951\x952\x3"+
		"\x2\x2\x2\x952\x953\x3\x2\x2\x2\x953\x954\a<\x2\x2\x954\x987\x3\x2\x2"+
		"\x2\x955\x956\x5\x38\x1D\x2\x956\x958\a\x43\x2\x2\x957\x959\x5,\x17\x2"+
		"\x958\x957\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A"+
		"\x95B\ah\x2\x2\x95B\x95D\a;\x2\x2\x95C\x95E\x5\x190\xC9\x2\x95D\x95C\x3"+
		"\x2\x2\x2\x95D\x95E\x3\x2\x2\x2\x95E\x95F\x3\x2\x2\x2\x95F\x960\a<\x2"+
		"\x2\x960\x987\x3\x2\x2\x2\x961\x962\x5<\x1F\x2\x962\x964\a\x43\x2\x2\x963"+
		"\x965\x5,\x17\x2\x964\x963\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966"+
		"\x3\x2\x2\x2\x966\x967\ah\x2\x2\x967\x969\a;\x2\x2\x968\x96A\x5\x190\xC9"+
		"\x2\x969\x968\x3\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96B\x3\x2\x2\x2"+
		"\x96B\x96C\a<\x2\x2\x96C\x987\x3\x2\x2\x2\x96D\x96E\a*\x2\x2\x96E\x970"+
		"\a\x43\x2\x2\x96F\x971\x5,\x17\x2\x970\x96F\x3\x2\x2\x2\x970\x971\x3\x2"+
		"\x2\x2\x971\x972\x3\x2\x2\x2\x972\x973\ah\x2\x2\x973\x975\a;\x2\x2\x974"+
		"\x976\x5\x190\xC9\x2\x975\x974\x3\x2\x2\x2\x975\x976\x3\x2\x2\x2\x976"+
		"\x977\x3\x2\x2\x2\x977\x987\a<\x2\x2\x978\x979\x5\x38\x1D\x2\x979\x97A"+
		"\a\x43\x2\x2\x97A\x97B\a*\x2\x2\x97B\x97D\a\x43\x2\x2\x97C\x97E\x5,\x17"+
		"\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E\x3\x2\x2\x2\x97E\x97F\x3\x2\x2\x2"+
		"\x97F\x980\ah\x2\x2\x980\x982\a;\x2\x2\x981\x983\x5\x190\xC9\x2\x982\x981"+
		"\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984\x985\a<"+
		"\x2\x2\x985\x987\x3\x2\x2\x2\x986\x94E\x3\x2\x2\x2\x986\x955\x3\x2\x2"+
		"\x2\x986\x961\x3\x2\x2\x2\x986\x96D\x3\x2\x2\x2\x986\x978\x3\x2\x2\x2"+
		"\x987\x18F\x3\x2\x2\x2\x988\x98D\x5\x1A0\xD1\x2\x989\x98A\a\x42\x2\x2"+
		"\x98A\x98C\x5\x1A0\xD1\x2\x98B\x989\x3\x2\x2\x2\x98C\x98F\x3\x2\x2\x2"+
		"\x98D\x98B\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E\x191\x3\x2\x2\x2\x98F"+
		"\x98D\x3\x2\x2\x2\x990\x991\x5<\x1F\x2\x991\x993\a\\\x2\x2\x992\x994\x5"+
		",\x17\x2\x993\x992\x3\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x995\x3\x2\x2"+
		"\x2\x995\x996\ah\x2\x2\x996\x9C0\x3\x2\x2\x2\x997\x998\x5\xE\b\x2\x998"+
		"\x99A\a\\\x2\x2\x999\x99B\x5,\x17\x2\x99A\x999\x3\x2\x2\x2\x99A\x99B\x3"+
		"\x2\x2\x2\x99B\x99C\x3\x2\x2\x2\x99C\x99D\ah\x2\x2\x99D\x9C0\x3\x2\x2"+
		"\x2\x99E\x99F\x5\x162\xB2\x2\x99F\x9A1\a\\\x2\x2\x9A0\x9A2\x5,\x17\x2"+
		"\x9A1\x9A0\x3\x2\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3"+
		"\x9A4\ah\x2\x2\x9A4\x9C0\x3\x2\x2\x2\x9A5\x9A6\a*\x2\x2\x9A6\x9A8\a\\"+
		"\x2\x2\x9A7\x9A9\x5,\x17\x2\x9A8\x9A7\x3\x2\x2\x2\x9A8\x9A9\x3\x2\x2\x2"+
		"\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9C0\ah\x2\x2\x9AB\x9AC\x5\x38\x1D\x2\x9AC"+
		"\x9AD\a\x43\x2\x2\x9AD\x9AE\a*\x2\x2\x9AE\x9B0\a\\\x2\x2\x9AF\x9B1\x5"+
		",\x17\x2\x9B0\x9AF\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9B2\x3\x2\x2"+
		"\x2\x9B2\x9B3\ah\x2\x2\x9B3\x9C0\x3\x2\x2\x2\x9B4\x9B5\x5\x12\n\x2\x9B5"+
		"\x9B7\a\\\x2\x2\x9B6\x9B8\x5,\x17\x2\x9B7\x9B6\x3\x2\x2\x2\x9B7\x9B8\x3"+
		"\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x9BA\a!\x2\x2\x9BA\x9C0\x3\x2\x2"+
		"\x2\x9BB\x9BC\x5 \x11\x2\x9BC\x9BD\a\\\x2\x2\x9BD\x9BE\a!\x2\x2\x9BE\x9C0"+
		"\x3\x2\x2\x2\x9BF\x990\x3\x2\x2\x2\x9BF\x997\x3\x2\x2\x2\x9BF\x99E\x3"+
		"\x2\x2\x2\x9BF\x9A5\x3\x2\x2\x2\x9BF\x9AB\x3\x2\x2\x2\x9BF\x9B4\x3\x2"+
		"\x2\x2\x9BF\x9BB\x3\x2\x2\x2\x9C0\x193\x3\x2\x2\x2\x9C1\x9C3\a\\\x2\x2"+
		"\x9C2\x9C4\x5,\x17\x2\x9C3\x9C2\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4"+
		"\x9C5\x3\x2\x2\x2\x9C5\x9C6\ah\x2\x2\x9C6\x195\x3\x2\x2\x2\x9C7\x9C8\x5"+
		"<\x1F\x2\x9C8\x9CA\a\\\x2\x2\x9C9\x9CB\x5,\x17\x2\x9CA\x9C9\x3\x2\x2\x2"+
		"\x9CA\x9CB\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CD\ah\x2\x2\x9CD\x9F0"+
		"\x3\x2\x2\x2\x9CE\x9CF\x5\xE\b\x2\x9CF\x9D1\a\\\x2\x2\x9D0\x9D2\x5,\x17"+
		"\x2\x9D1\x9D0\x3\x2\x2\x2\x9D1\x9D2\x3\x2\x2\x2\x9D2\x9D3\x3\x2\x2\x2"+
		"\x9D3\x9D4\ah\x2\x2\x9D4\x9F0\x3\x2\x2\x2\x9D5\x9D6\a*\x2\x2\x9D6\x9D8"+
		"\a\\\x2\x2\x9D7\x9D9\x5,\x17\x2\x9D8\x9D7\x3\x2\x2\x2\x9D8\x9D9\x3\x2"+
		"\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9F0\ah\x2\x2\x9DB\x9DC\x5\x38\x1D\x2"+
		"\x9DC\x9DD\a\x43\x2\x2\x9DD\x9DE\a*\x2\x2\x9DE\x9E0\a\\\x2\x2\x9DF\x9E1"+
		"\x5,\x17\x2\x9E0\x9DF\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2\x2\x9E1\x9E2\x3\x2"+
		"\x2\x2\x9E2\x9E3\ah\x2\x2\x9E3\x9F0\x3\x2\x2\x2\x9E4\x9E5\x5\x12\n\x2"+
		"\x9E5\x9E7\a\\\x2\x2\x9E6\x9E8\x5,\x17\x2\x9E7\x9E6\x3\x2\x2\x2\x9E7\x9E8"+
		"\x3\x2\x2\x2\x9E8\x9E9\x3\x2\x2\x2\x9E9\x9EA\a!\x2\x2\x9EA\x9F0\x3\x2"+
		"\x2\x2\x9EB\x9EC\x5 \x11\x2\x9EC\x9ED\a\\\x2\x2\x9ED\x9EE\a!\x2\x2\x9EE"+
		"\x9F0\x3\x2\x2\x2\x9EF\x9C7\x3\x2\x2\x2\x9EF\x9CE\x3\x2\x2\x2\x9EF\x9D5"+
		"\x3\x2\x2\x2\x9EF\x9DB\x3\x2\x2\x2\x9EF\x9E4\x3\x2\x2\x2\x9EF\x9EB\x3"+
		"\x2\x2\x2\x9F0\x197\x3\x2\x2\x2\x9F1\x9F2\a!\x2\x2\x9F2\x9F3\x5\x6\x4"+
		"\x2\x9F3\x9F5\x5\x19A\xCE\x2\x9F4\x9F6\x5\"\x12\x2\x9F5\x9F4\x3\x2\x2"+
		"\x2\x9F5\x9F6\x3\x2\x2\x2\x9F6\xA08\x3\x2\x2\x2\x9F7\x9F8\a!\x2\x2\x9F8"+
		"\x9F9\x5\x10\t\x2\x9F9\x9FB\x5\x19A\xCE\x2\x9FA\x9FC\x5\"\x12\x2\x9FB"+
		"\x9FA\x3\x2\x2\x2\x9FB\x9FC\x3\x2\x2\x2\x9FC\xA08\x3\x2\x2\x2\x9FD\x9FE"+
		"\a!\x2\x2\x9FE\x9FF\x5\x6\x4\x2\x9FF\xA00\x5\"\x12\x2\xA00\xA01\x5\xFA"+
		"~\x2\xA01\xA08\x3\x2\x2\x2\xA02\xA03\a!\x2\x2\xA03\xA04\x5\x10\t\x2\xA04"+
		"\xA05\x5\"\x12\x2\xA05\xA06\x5\xFA~\x2\xA06\xA08\x3\x2\x2\x2\xA07\x9F1"+
		"\x3\x2\x2\x2\xA07\x9F7\x3\x2\x2\x2\xA07\x9FD\x3\x2\x2\x2\xA07\xA02\x3"+
		"\x2\x2\x2\xA08\x199\x3\x2\x2\x2\xA09\xA0D\x5\x19C\xCF\x2\xA0A\xA0C\x5"+
		"\x19C\xCF\x2\xA0B\xA0A\x3\x2\x2\x2\xA0C\xA0F\x3\x2\x2\x2\xA0D\xA0B\x3"+
		"\x2\x2\x2\xA0D\xA0E\x3\x2\x2\x2\xA0E\x19B\x3\x2\x2\x2\xA0F\xA0D\x3\x2"+
		"\x2\x2\xA10\xA12\x5\xE8u\x2\xA11\xA10\x3\x2\x2\x2\xA12\xA15\x3\x2\x2\x2"+
		"\xA13\xA11\x3\x2\x2\x2\xA13\xA14\x3\x2\x2\x2\xA14\xA16\x3\x2\x2\x2\xA15"+
		"\xA13\x3\x2\x2\x2\xA16\xA17\a?\x2\x2\xA17\xA18\x5\x1A0\xD1\x2\xA18\xA19"+
		"\a@\x2\x2\xA19\x19D\x3\x2\x2\x2\xA1A\xA1B\x5\x1A0\xD1\x2\xA1B\x19F\x3"+
		"\x2\x2\x2\xA1C\xA1F\x5\x1A2\xD2\x2\xA1D\xA1F\x5\x1AA\xD6\x2\xA1E\xA1C"+
		"\x3\x2\x2\x2\xA1E\xA1D\x3\x2\x2\x2\xA1F\x1A1\x3\x2\x2\x2\xA20\xA21\x5"+
		"\x1A4\xD3\x2\xA21\xA22\a[\x2\x2\xA22\xA23\x5\x1A8\xD5\x2\xA23\x1A3\x3"+
		"\x2\x2\x2\xA24\xA2F\ah\x2\x2\xA25\xA27\a;\x2\x2\xA26\xA28\x5\x98M\x2\xA27"+
		"\xA26\x3\x2\x2\x2\xA27\xA28\x3\x2\x2\x2\xA28\xA29\x3\x2\x2\x2\xA29\xA2F"+
		"\a<\x2\x2\xA2A\xA2B\a;\x2\x2\xA2B\xA2C\x5\x1A6\xD4\x2\xA2C\xA2D\a<\x2"+
		"\x2\xA2D\xA2F\x3\x2\x2\x2\xA2E\xA24\x3\x2\x2\x2\xA2E\xA25\x3\x2\x2\x2"+
		"\xA2E\xA2A\x3\x2\x2\x2\xA2F\x1A5\x3\x2\x2\x2\xA30\xA35\ah\x2\x2\xA31\xA32"+
		"\a\x42\x2\x2\xA32\xA34\ah\x2\x2\xA33\xA31\x3\x2\x2\x2\xA34\xA37\x3\x2"+
		"\x2\x2\xA35\xA33\x3\x2\x2\x2\xA35\xA36\x3\x2\x2\x2\xA36\x1A7\x3\x2\x2"+
		"\x2\xA37\xA35\x3\x2\x2\x2\xA38\xA3B\x5\x1A0\xD1\x2\xA39\xA3B\x5\xFE\x80"+
		"\x2\xA3A\xA38\x3\x2\x2\x2\xA3A\xA39\x3\x2\x2\x2\xA3B\x1A9\x3\x2\x2\x2"+
		"\xA3C\xA3F\x5\x1B2\xDA\x2\xA3D\xA3F\x5\x1AC\xD7\x2\xA3E\xA3C\x3\x2\x2"+
		"\x2\xA3E\xA3D\x3\x2\x2\x2\xA3F\x1AB\x3\x2\x2\x2\xA40\xA41\x5\x1AE\xD8"+
		"\x2\xA41\xA42\x5\x1B0\xD9\x2\xA42\xA43\x5\x1A0\xD1\x2\xA43\x1AD\x3\x2"+
		"\x2\x2\xA44\xA48\x5<\x1F\x2\xA45\xA48\x5\x17E\xC0\x2\xA46\xA48\x5\x184"+
		"\xC3\x2\xA47\xA44\x3\x2\x2\x2\xA47\xA45\x3\x2\x2\x2\xA47\xA46\x3\x2\x2"+
		"\x2\xA48\x1AF\x3\x2\x2\x2\xA49\xA4A\t\x5\x2\x2\xA4A\x1B1\x3\x2\x2\x2\xA4B"+
		"\xA53\x5\x1B4\xDB\x2\xA4C\xA4D\x5\x1B4\xDB\x2\xA4D\xA4E\aI\x2\x2\xA4E"+
		"\xA4F\x5\x1A0\xD1\x2\xA4F\xA50\aJ\x2\x2\xA50\xA51\x5\x1B2\xDA\x2\xA51"+
		"\xA53\x3\x2\x2\x2\xA52\xA4B\x3\x2\x2\x2\xA52\xA4C\x3\x2\x2\x2\xA53\x1B3"+
		"\x3\x2\x2\x2\xA54\xA55\b\xDB\x1\x2\xA55\xA56\x5\x1B6\xDC\x2\xA56\xA5C"+
		"\x3\x2\x2\x2\xA57\xA58\f\x3\x2\x2\xA58\xA59\aP\x2\x2\xA59\xA5B\x5\x1B6"+
		"\xDC\x2\xA5A\xA57\x3\x2\x2\x2\xA5B\xA5E\x3\x2\x2\x2\xA5C\xA5A\x3\x2\x2"+
		"\x2\xA5C\xA5D\x3\x2\x2\x2\xA5D\x1B5\x3\x2\x2\x2\xA5E\xA5C\x3\x2\x2\x2"+
		"\xA5F\xA60\b\xDC\x1\x2\xA60\xA61\x5\x1B8\xDD\x2\xA61\xA67\x3\x2\x2\x2"+
		"\xA62\xA63\f\x3\x2\x2\xA63\xA64\aO\x2\x2\xA64\xA66\x5\x1B8\xDD\x2\xA65"+
		"\xA62\x3\x2\x2\x2\xA66\xA69\x3\x2\x2\x2\xA67\xA65\x3\x2\x2\x2\xA67\xA68"+
		"\x3\x2\x2\x2\xA68\x1B7\x3\x2\x2\x2\xA69\xA67\x3\x2\x2\x2\xA6A\xA6B\b\xDD"+
		"\x1\x2\xA6B\xA6C\x5\x1BA\xDE\x2\xA6C\xA72\x3\x2\x2\x2\xA6D\xA6E\f\x3\x2"+
		"\x2\xA6E\xA6F\aX\x2\x2\xA6F\xA71\x5\x1BA\xDE\x2\xA70\xA6D\x3\x2\x2\x2"+
		"\xA71\xA74\x3\x2\x2\x2\xA72\xA70\x3\x2\x2\x2\xA72\xA73\x3\x2\x2\x2\xA73"+
		"\x1B9\x3\x2\x2\x2\xA74\xA72\x3\x2\x2\x2\xA75\xA76\b\xDE\x1\x2\xA76\xA77"+
		"\x5\x1BC\xDF\x2\xA77\xA7D\x3\x2\x2\x2\xA78\xA79\f\x3\x2\x2\xA79\xA7A\a"+
		"Y\x2\x2\xA7A\xA7C\x5\x1BC\xDF\x2\xA7B\xA78\x3\x2\x2\x2\xA7C\xA7F\x3\x2"+
		"\x2\x2\xA7D\xA7B\x3\x2\x2\x2\xA7D\xA7E\x3\x2\x2\x2\xA7E\x1BB\x3\x2\x2"+
		"\x2\xA7F\xA7D\x3\x2\x2\x2\xA80\xA81\b\xDF\x1\x2\xA81\xA82\x5\x1BE\xE0"+
		"\x2\xA82\xA88\x3\x2\x2\x2\xA83\xA84\f\x3\x2\x2\xA84\xA85\aW\x2\x2\xA85"+
		"\xA87\x5\x1BE\xE0\x2\xA86\xA83\x3\x2\x2\x2\xA87\xA8A\x3\x2\x2\x2\xA88"+
		"\xA86\x3\x2\x2\x2\xA88\xA89\x3\x2\x2\x2\xA89\x1BD\x3\x2\x2\x2\xA8A\xA88"+
		"\x3\x2\x2\x2\xA8B\xA8C\b\xE0\x1\x2\xA8C\xA8D\x5\x1C0\xE1\x2\xA8D\xA96"+
		"\x3\x2\x2\x2\xA8E\xA8F\f\x4\x2\x2\xA8F\xA90\aK\x2\x2\xA90\xA95\x5\x1C0"+
		"\xE1\x2\xA91\xA92\f\x3\x2\x2\xA92\xA93\aN\x2\x2\xA93\xA95\x5\x1C0\xE1"+
		"\x2\xA94\xA8E\x3\x2\x2\x2\xA94\xA91\x3\x2\x2\x2\xA95\xA98\x3\x2\x2\x2"+
		"\xA96\xA94\x3\x2\x2\x2\xA96\xA97\x3\x2\x2\x2\xA97\x1BF\x3\x2\x2\x2\xA98"+
		"\xA96\x3\x2\x2\x2\xA99\xA9A\b\xE1\x1\x2\xA9A\xA9B\x5\x1C4\xE3\x2\xA9B"+
		"\xAA5\x3\x2\x2\x2\xA9C\xA9D\f\x4\x2\x2\xA9D\xA9E\x5\x1C2\xE2\x2\xA9E\xA9F"+
		"\x5\x1C4\xE3\x2\xA9F\xAA4\x3\x2\x2\x2\xAA0\xAA1\f\x3\x2\x2\xAA1\xAA2\a"+
		"\x1C\x2\x2\xAA2\xAA4\x5\xE\b\x2\xAA3\xA9C\x3\x2\x2\x2\xAA3\xAA0\x3\x2"+
		"\x2\x2\xAA4\xAA7\x3\x2\x2\x2\xAA5\xAA3\x3\x2\x2\x2\xAA5\xAA6\x3\x2\x2"+
		"\x2\xAA6\x1C1\x3\x2\x2\x2\xAA7\xAA5\x3\x2\x2\x2\xAA8\xAA9\t\x6\x2\x2\xAA9"+
		"\x1C3\x3\x2\x2\x2\xAAA\xAAB\b\xE3\x1\x2\xAAB\xAAC\x5\x1C6\xE4\x2\xAAC"+
		"\xABC\x3\x2\x2\x2\xAAD\xAAE\f\x5\x2\x2\xAAE\xAAF\a\x46\x2\x2\xAAF\xAB0"+
		"\a\x46\x2\x2\xAB0\xABB\x5\x1C6\xE4\x2\xAB1\xAB2\f\x4\x2\x2\xAB2\xAB3\a"+
		"\x45\x2\x2\xAB3\xAB4\a\x45\x2\x2\xAB4\xABB\x5\x1C6\xE4\x2\xAB5\xAB6\f"+
		"\x3\x2\x2\xAB6\xAB7\a\x45\x2\x2\xAB7\xAB8\a\x45\x2\x2\xAB8\xAB9\a\x45"+
		"\x2\x2\xAB9\xABB\x5\x1C6\xE4\x2\xABA\xAAD\x3\x2\x2\x2\xABA\xAB1\x3\x2"+
		"\x2\x2\xABA\xAB5\x3\x2\x2\x2\xABB\xABE\x3\x2\x2\x2\xABC\xABA\x3\x2\x2"+
		"\x2\xABC\xABD\x3\x2\x2\x2\xABD\x1C5\x3\x2\x2\x2\xABE\xABC\x3\x2\x2\x2"+
		"\xABF\xAC0\b\xE4\x1\x2\xAC0\xAC1\x5\x1C8\xE5\x2\xAC1\xACA\x3\x2\x2\x2"+
		"\xAC2\xAC3\f\x4\x2\x2\xAC3\xAC4\aS\x2\x2\xAC4\xAC9\x5\x1C8\xE5\x2\xAC5"+
		"\xAC6\f\x3\x2\x2\xAC6\xAC7\aT\x2\x2\xAC7\xAC9\x5\x1C8\xE5\x2\xAC8\xAC2"+
		"\x3\x2\x2\x2\xAC8\xAC5\x3\x2\x2\x2\xAC9\xACC\x3\x2\x2\x2\xACA\xAC8\x3"+
		"\x2\x2\x2\xACA\xACB\x3\x2\x2\x2\xACB\x1C7\x3\x2\x2\x2\xACC\xACA\x3\x2"+
		"\x2\x2\xACD\xACE\b\xE5\x1\x2\xACE\xACF\x5\x1CA\xE6\x2\xACF\xADB\x3\x2"+
		"\x2\x2\xAD0\xAD1\f\x5\x2\x2\xAD1\xAD2\aU\x2\x2\xAD2\xADA\x5\x1CA\xE6\x2"+
		"\xAD3\xAD4\f\x4\x2\x2\xAD4\xAD5\aV\x2\x2\xAD5\xADA\x5\x1CA\xE6\x2\xAD6"+
		"\xAD7\f\x3\x2\x2\xAD7\xAD8\aZ\x2\x2\xAD8\xADA\x5\x1CA\xE6\x2\xAD9\xAD0"+
		"\x3\x2\x2\x2\xAD9\xAD3\x3\x2\x2\x2\xAD9\xAD6\x3\x2\x2\x2\xADA\xADD\x3"+
		"\x2\x2\x2\xADB\xAD9\x3\x2\x2\x2\xADB\xADC\x3\x2\x2\x2\xADC\x1C9\x3\x2"+
		"\x2\x2\xADD\xADB\x3\x2\x2\x2\xADE\xAE6\x5\x1CC\xE7\x2\xADF\xAE6\x5\x1CE"+
		"\xE8\x2\xAE0\xAE1\aS\x2\x2\xAE1\xAE6\x5\x1CA\xE6\x2\xAE2\xAE3\aT\x2\x2"+
		"\xAE3\xAE6\x5\x1CA\xE6\x2\xAE4\xAE6\x5\x1D0\xE9\x2\xAE5\xADE\x3\x2\x2"+
		"\x2\xAE5\xADF\x3\x2\x2\x2\xAE5\xAE0\x3\x2\x2\x2\xAE5\xAE2\x3\x2\x2\x2"+
		"\xAE5\xAE4\x3\x2\x2\x2\xAE6\x1CB\x3\x2\x2\x2\xAE7\xAE8\aQ\x2\x2\xAE8\xAE9"+
		"\x5\x1CA\xE6\x2\xAE9\x1CD\x3\x2\x2\x2\xAEA\xAEB\aR\x2\x2\xAEB\xAEC\x5"+
		"\x1CA\xE6\x2\xAEC\x1CF\x3\x2\x2\x2\xAED\xAF4\x5\x1D2\xEA\x2\xAEE\xAEF"+
		"\aH\x2\x2\xAEF\xAF4\x5\x1CA\xE6\x2\xAF0\xAF1\aG\x2\x2\xAF1\xAF4\x5\x1CA"+
		"\xE6\x2\xAF2\xAF4\x5\x1DC\xEF\x2\xAF3\xAED\x3\x2\x2\x2\xAF3\xAEE\x3\x2"+
		"\x2\x2\xAF3\xAF0\x3\x2\x2\x2\xAF3\xAF2\x3\x2\x2\x2\xAF4\x1D1\x3\x2\x2"+
		"\x2\xAF5\xAF8\x5\x162\xB2\x2\xAF6\xAF8\x5<\x1F\x2\xAF7\xAF5\x3\x2\x2\x2"+
		"\xAF7\xAF6\x3\x2\x2\x2\xAF8\xAFD\x3\x2\x2\x2\xAF9\xAFC\x5\x1D6\xEC\x2"+
		"\xAFA\xAFC\x5\x1DA\xEE\x2\xAFB\xAF9\x3\x2\x2\x2\xAFB\xAFA\x3\x2\x2\x2"+
		"\xAFC\xAFF\x3\x2\x2\x2\xAFD\xAFB\x3\x2\x2\x2\xAFD\xAFE\x3\x2\x2\x2\xAFE"+
		"\x1D3\x3\x2\x2\x2\xAFF\xAFD\x3\x2\x2\x2\xB00\xB01\x5\x1D2\xEA\x2\xB01"+
		"\xB02\aQ\x2\x2\xB02\x1D5\x3\x2\x2\x2\xB03\xB04\aQ\x2\x2\xB04\x1D7\x3\x2"+
		"\x2\x2\xB05\xB06\x5\x1D2\xEA\x2\xB06\xB07\aR\x2\x2\xB07\x1D9\x3\x2\x2"+
		"\x2\xB08\xB09\aR\x2\x2\xB09\x1DB\x3\x2\x2\x2\xB0A\xB0B\a;\x2\x2\xB0B\xB0C"+
		"\x5\x6\x4\x2\xB0C\xB0D\a<\x2\x2\xB0D\xB0E\x5\x1CA\xE6\x2\xB0E\xB26\x3"+
		"\x2\x2\x2\xB0F\xB10\a;\x2\x2\xB10\xB14\x5\xE\b\x2\xB11\xB13\x5*\x16\x2"+
		"\xB12\xB11\x3\x2\x2\x2\xB13\xB16\x3\x2\x2\x2\xB14\xB12\x3\x2\x2\x2\xB14"+
		"\xB15\x3\x2\x2\x2\xB15\xB17\x3\x2\x2\x2\xB16\xB14\x3\x2\x2\x2\xB17\xB18"+
		"\a<\x2\x2\xB18\xB19\x5\x1D0\xE9\x2\xB19\xB26\x3\x2\x2\x2\xB1A\xB1B\a;"+
		"\x2\x2\xB1B\xB1F\x5\xE\b\x2\xB1C\xB1E\x5*\x16\x2\xB1D\xB1C\x3\x2\x2\x2"+
		"\xB1E\xB21\x3\x2\x2\x2\xB1F\xB1D\x3\x2\x2\x2\xB1F\xB20\x3\x2\x2\x2\xB20"+
		"\xB22\x3\x2\x2\x2\xB21\xB1F\x3\x2\x2\x2\xB22\xB23\a<\x2\x2\xB23\xB24\x5"+
		"\x1A2\xD2\x2\xB24\xB26\x3\x2\x2\x2\xB25\xB0A\x3\x2\x2\x2\xB25\xB0F\x3"+
		"\x2\x2\x2\xB25\xB1A\x3\x2\x2\x2\xB26\x1DD\x3\x2\x2\x2\x146\x1E2\x1E7\x1EE"+
		"\x1F2\x1F6\x1FF\x203\x207\x209\x20F\x214\x21B\x220\x222\x228\x22D\x232"+
		"\x237\x242\x250\x255\x25D\x264\x26A\x26F\x27A\x27D\x28B\x290\x295\x29A"+
		"\x2A0\x2AA\x2B2\x2BC\x2C4\x2D0\x2D4\x2D9\x2DF\x2E7\x2F0\x2FB\x318\x31C"+
		"\x321\x327\x32A\x32D\x339\x344\x352\x359\x362\x369\x36E\x37D\x384\x38A"+
		"\x38E\x392\x396\x39A\x39F\x3A3\x3A7\x3A9\x3AE\x3B5\x3BA\x3BC\x3C2\x3C7"+
		"\x3CB\x3DE\x3E3\x3F3\x3F8\x3FE\x404\x406\x40A\x40F\x413\x41A\x421\x429"+
		"\x42C\x431\x439\x43E\x445\x44C\x451\x457\x463\x468\x46C\x476\x47B\x483"+
		"\x486\x48B\x493\x496\x49B\x4A0\x4A5\x4AA\x4B1\x4B6\x4BE\x4C3\x4C8\x4CD"+
		"\x4D3\x4D9\x4DC\x4DF\x4E8\x4EE\x4F4\x4F7\x4FA\x502\x507\x50C\x512\x515"+
		"\x520\x529\x533\x538\x543\x548\x554\x559\x565\x56F\x574\x57C\x57F\x586"+
		"\x58E\x594\x59D\x5A7\x5AB\x5AE\x5B7\x5C5\x5C8\x5D1\x5D6\x5DE\x5E4\x5EC"+
		"\x5F8\x5FF\x60D\x623\x645\x651\x657\x663\x670\x68A\x68E\x693\x697\x69B"+
		"\x6A3\x6A7\x6AB\x6B2\x6BB\x6C3\x6D2\x6DE\x6E4\x6EA\x6FF\x704\x70A\x716"+
		"\x721\x72B\x72E\x733\x73C\x742\x74C\x751\x75A\x771\x77B\x791\x798\x7A0"+
		"\x7A8\x7B3\x7CA\x7D4\x7DF\x7F5\x7F9\x7FE\x806\x80C\x810\x814\x818\x81E"+
		"\x823\x828\x82C\x830\x836\x83B\x840\x844\x848\x84A\x84F\x854\x859\x85D"+
		"\x861\x865\x86A\x872\x878\x87C\x880\x884\x88A\x88F\x894\x898\x89C\x89E"+
		"\x8A3\x8B2\x8C0\x8CC\x8D5\x8E4\x8F1\x8FA\x900\x907\x90C\x913\x918\x91F"+
		"\x924\x92B\x930\x938\x93D\x941\x945\x94A\x951\x958\x95D\x964\x969\x970"+
		"\x975\x97D\x982\x986\x98D\x993\x99A\x9A1\x9A8\x9B0\x9B7\x9BF\x9C3\x9CA"+
		"\x9D1\x9D8\x9E0\x9E7\x9EF\x9F5\x9FB\xA07\xA0D\xA13\xA1E\xA27\xA2E\xA35"+
		"\xA3A\xA3E\xA47\xA52\xA5C\xA67\xA72\xA7D\xA88\xA94\xA96\xAA3\xAA5\xABA"+
		"\xABC\xAC8\xACA\xAD9\xADB\xAE5\xAF3\xAF7\xAFB\xAFD\xB14\xB1F\xB25";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JavaMag
