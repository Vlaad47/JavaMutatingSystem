//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\JavaMag\JavaMutatingSystem\JavaMag\Java8.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JavaMag {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class Java8Parser : Parser {
	public const int
		T__0=1, ABSTRACT=2, ASSERT=3, BOOLEAN=4, BREAK=5, BYTE=6, CASE=7, CATCH=8, 
		CHAR=9, CLASS=10, CONST=11, CONTINUE=12, DEFAULT=13, DO=14, DOUBLE=15, 
		ELSE=16, ENUM=17, EXTENDS=18, FINAL=19, FINALLY=20, FLOAT=21, FOR=22, 
		IF=23, GOTO=24, IMPLEMENTS=25, IMPORT=26, INSTANCEOF=27, INT=28, INTERFACE=29, 
		LONG=30, NATIVE=31, NEW=32, PACKAGE=33, PRIVATE=34, PROTECTED=35, PUBLIC=36, 
		RETURN=37, SHORT=38, STATIC=39, STRICTFP=40, SUPER=41, SWITCH=42, SYNCHRONIZED=43, 
		THIS=44, THROW=45, THROWS=46, TRANSIENT=47, TRY=48, VOID=49, VOLATILE=50, 
		WHILE=51, IntegerLiteral=52, FloatingPointLiteral=53, BooleanLiteral=54, 
		CharacterLiteral=55, StringLiteral=56, NullLiteral=57, LPAREN=58, RPAREN=59, 
		LBRACE=60, RBRACE=61, LBRACK=62, RBRACK=63, SEMI=64, COMMA=65, DOT=66, 
		ASSIGN=67, GT=68, LT=69, BANG=70, TILDE=71, QUESTION=72, COLON=73, EQUAL=74, 
		LE=75, GE=76, NOTEQUAL=77, AND=78, OR=79, INC=80, DEC=81, ADD=82, SUB=83, 
		MUL=84, DIV=85, BITAND=86, BITOR=87, CARET=88, MOD=89, ARROW=90, COLONCOLON=91, 
		ADD_ASSIGN=92, SUB_ASSIGN=93, MUL_ASSIGN=94, DIV_ASSIGN=95, AND_ASSIGN=96, 
		OR_ASSIGN=97, XOR_ASSIGN=98, MOD_ASSIGN=99, LSHIFT_ASSIGN=100, RSHIFT_ASSIGN=101, 
		URSHIFT_ASSIGN=102, Identifier=103, AT=104, ELLIPSIS=105, WS=106, COMMENT=107, 
		LINE_COMMENT=108;
	public const int
		RULE_literal = 0, RULE_type = 1, RULE_primitiveType = 2, RULE_numericType = 3, 
		RULE_integralType = 4, RULE_floatingPointType = 5, RULE_referenceType = 6, 
		RULE_classOrInterfaceType = 7, RULE_classType = 8, RULE_classType_lf_classOrInterfaceType = 9, 
		RULE_classType_lfno_classOrInterfaceType = 10, RULE_interfaceType = 11, 
		RULE_interfaceType_lf_classOrInterfaceType = 12, RULE_interfaceType_lfno_classOrInterfaceType = 13, 
		RULE_typeVariable = 14, RULE_arrayType = 15, RULE_dims = 16, RULE_typeParameter = 17, 
		RULE_typeParameterModifier = 18, RULE_typeBound = 19, RULE_additionalBound = 20, 
		RULE_typeArguments = 21, RULE_typeArgumentList = 22, RULE_typeArgument = 23, 
		RULE_wildcard = 24, RULE_wildcardBounds = 25, RULE_packageName = 26, RULE_typeName = 27, 
		RULE_packageOrTypeName = 28, RULE_expressionName = 29, RULE_methodName = 30, 
		RULE_ambiguousName = 31, RULE_compilationUnit = 32, RULE_packageDeclaration = 33, 
		RULE_packageModifier = 34, RULE_importDeclaration = 35, RULE_singleTypeImportDeclaration = 36, 
		RULE_typeImportOnDemandDeclaration = 37, RULE_singleStaticImportDeclaration = 38, 
		RULE_staticImportOnDemandDeclaration = 39, RULE_typeDeclaration = 40, 
		RULE_classDeclaration = 41, RULE_normalClassDeclaration = 42, RULE_classModifier = 43, 
		RULE_typeParameters = 44, RULE_typeParameterList = 45, RULE_superclass = 46, 
		RULE_superinterfaces = 47, RULE_interfaceTypeList = 48, RULE_classBody = 49, 
		RULE_classBodyDeclaration = 50, RULE_classMemberDeclaration = 51, RULE_fieldDeclaration = 52, 
		RULE_fieldModifier = 53, RULE_variableDeclaratorList = 54, RULE_variableDeclarator = 55, 
		RULE_variableDeclaratorId = 56, RULE_variableInitializer = 57, RULE_unannType = 58, 
		RULE_unannPrimitiveType = 59, RULE_unannReferenceType = 60, RULE_unannClassOrInterfaceType = 61, 
		RULE_unannClassType = 62, RULE_unannClassType_lf_unannClassOrInterfaceType = 63, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 64, RULE_unannInterfaceType = 65, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 66, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 67, 
		RULE_unannTypeVariable = 68, RULE_unannArrayType = 69, RULE_methodDeclaration = 70, 
		RULE_methodModifier = 71, RULE_methodHeader = 72, RULE_result = 73, RULE_methodDeclarator = 74, 
		RULE_formalParameterList = 75, RULE_formalParameters = 76, RULE_formalParameter = 77, 
		RULE_variableModifier = 78, RULE_lastFormalParameter = 79, RULE_receiverParameter = 80, 
		RULE_throws_ = 81, RULE_exceptionTypeList = 82, RULE_exceptionType = 83, 
		RULE_methodBody = 84, RULE_instanceInitializer = 85, RULE_staticInitializer = 86, 
		RULE_constructorDeclaration = 87, RULE_constructorModifier = 88, RULE_constructorDeclarator = 89, 
		RULE_simpleTypeName = 90, RULE_constructorBody = 91, RULE_explicitConstructorInvocation = 92, 
		RULE_enumDeclaration = 93, RULE_enumBody = 94, RULE_enumConstantList = 95, 
		RULE_enumConstant = 96, RULE_enumConstantModifier = 97, RULE_enumBodyDeclarations = 98, 
		RULE_interfaceDeclaration = 99, RULE_normalInterfaceDeclaration = 100, 
		RULE_interfaceModifier = 101, RULE_extendsInterfaces = 102, RULE_interfaceBody = 103, 
		RULE_interfaceMemberDeclaration = 104, RULE_constantDeclaration = 105, 
		RULE_constantModifier = 106, RULE_interfaceMethodDeclaration = 107, RULE_interfaceMethodModifier = 108, 
		RULE_annotationTypeDeclaration = 109, RULE_annotationTypeBody = 110, RULE_annotationTypeMemberDeclaration = 111, 
		RULE_annotationTypeElementDeclaration = 112, RULE_annotationTypeElementModifier = 113, 
		RULE_defaultValue = 114, RULE_annotation = 115, RULE_normalAnnotation = 116, 
		RULE_elementValuePairList = 117, RULE_elementValuePair = 118, RULE_elementValue = 119, 
		RULE_elementValueArrayInitializer = 120, RULE_elementValueList = 121, 
		RULE_markerAnnotation = 122, RULE_singleElementAnnotation = 123, RULE_arrayInitializer = 124, 
		RULE_variableInitializerList = 125, RULE_block = 126, RULE_blockStatements = 127, 
		RULE_blockStatement = 128, RULE_localVariableDeclarationStatement = 129, 
		RULE_localVariableDeclaration = 130, RULE_statement = 131, RULE_statementNoShortIf = 132, 
		RULE_statementWithoutTrailingSubstatement = 133, RULE_emptyStatement = 134, 
		RULE_labeledStatement = 135, RULE_labeledStatementNoShortIf = 136, RULE_expressionStatement = 137, 
		RULE_statementExpression = 138, RULE_ifThenStatement = 139, RULE_ifThenElseStatement = 140, 
		RULE_ifThenElseStatementNoShortIf = 141, RULE_assertStatement = 142, RULE_switchStatement = 143, 
		RULE_switchBlock = 144, RULE_switchBlockStatementGroup = 145, RULE_switchLabels = 146, 
		RULE_switchLabel = 147, RULE_enumConstantName = 148, RULE_whileStatement = 149, 
		RULE_whileStatementNoShortIf = 150, RULE_doStatement = 151, RULE_forStatement = 152, 
		RULE_forStatementNoShortIf = 153, RULE_basicForStatement = 154, RULE_basicForStatementNoShortIf = 155, 
		RULE_forInit = 156, RULE_forUpdate = 157, RULE_statementExpressionList = 158, 
		RULE_enhancedForStatement = 159, RULE_enhancedForStatementNoShortIf = 160, 
		RULE_breakStatement = 161, RULE_continueStatement = 162, RULE_returnStatement = 163, 
		RULE_throwStatement = 164, RULE_synchronizedStatement = 165, RULE_tryStatement = 166, 
		RULE_catches = 167, RULE_catchClause = 168, RULE_catchFormalParameter = 169, 
		RULE_catchType = 170, RULE_finally_ = 171, RULE_tryWithResourcesStatement = 172, 
		RULE_resourceSpecification = 173, RULE_resourceList = 174, RULE_resource = 175, 
		RULE_primary = 176, RULE_primaryNoNewArray = 177, RULE_primaryNoNewArray_lf_arrayAccess = 178, 
		RULE_primaryNoNewArray_lfno_arrayAccess = 179, RULE_primaryNoNewArray_lf_primary = 180, 
		RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 181, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 182, 
		RULE_primaryNoNewArray_lfno_primary = 183, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 184, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 185, 
		RULE_classInstanceCreationExpression = 186, RULE_classInstanceCreationExpression_lf_primary = 187, 
		RULE_classInstanceCreationExpression_lfno_primary = 188, RULE_typeArgumentsOrDiamond = 189, 
		RULE_fieldAccess = 190, RULE_fieldAccess_lf_primary = 191, RULE_fieldAccess_lfno_primary = 192, 
		RULE_arrayAccess = 193, RULE_arrayAccess_lf_primary = 194, RULE_arrayAccess_lfno_primary = 195, 
		RULE_methodInvocation = 196, RULE_methodInvocation_lf_primary = 197, RULE_methodInvocation_lfno_primary = 198, 
		RULE_argumentList = 199, RULE_methodReference = 200, RULE_methodReference_lf_primary = 201, 
		RULE_methodReference_lfno_primary = 202, RULE_arrayCreationExpression = 203, 
		RULE_dimExprs = 204, RULE_dimExpr = 205, RULE_constantExpression = 206, 
		RULE_expression = 207, RULE_lambdaExpression = 208, RULE_lambdaParameters = 209, 
		RULE_inferredFormalParameterList = 210, RULE_lambdaBody = 211, RULE_assignmentExpression = 212, 
		RULE_assignment = 213, RULE_leftHandSide = 214, RULE_assignmentOperator = 215, 
		RULE_simpleAssignmentOperator = 216, RULE_multipleAssignmentOperator = 217, 
		RULE_divideAssignmentOperator = 218, RULE_reminderAssignmentOperator = 219, 
		RULE_addAssignmentOperator = 220, RULE_substractAssignmentOperator = 221, 
		RULE_bitShiftLeftAssignmentOperator = 222, RULE_bitShiftRightAssignmentOperator = 223, 
		RULE_bitShiftRightWithZeroAssignmentOperator = 224, RULE_bitAndAssignmentOperator = 225, 
		RULE_bitXOrAssignmentOperator = 226, RULE_bitOrAssignmentOperator = 227, 
		RULE_conditionalExpression = 228, RULE_conditionalOrExpression = 229, 
		RULE_conditionalAndExpression = 230, RULE_inclusiveOrExpression = 231, 
		RULE_exclusiveOrExpression = 232, RULE_andExpression = 233, RULE_andOrOperators = 234, 
		RULE_logicalOrOperator = 235, RULE_logicalAndOperator = 236, RULE_bitwiseInclusiveOrOperator = 237, 
		RULE_bitwiseExclusiveOrOperator = 238, RULE_bitwiseAndOperator = 239, 
		RULE_equalityExpression = 240, RULE_relationalExpression = 241, RULE_equalOperator = 242, 
		RULE_notEqualOperator = 243, RULE_lesserThanOperator = 244, RULE_greaterThanOperator = 245, 
		RULE_lesserOrEqualToOperator = 246, RULE_greaterOrEqualToOperator = 247, 
		RULE_compareOperator = 248, RULE_shiftExpression = 249, RULE_shiftLeftOperator = 250, 
		RULE_shiftRightOperator = 251, RULE_shiftRightWithZeroOperator = 252, 
		RULE_additiveExpression = 253, RULE_multiplicativeExpression = 254, RULE_additionOperator = 255, 
		RULE_substractionOperator = 256, RULE_muliplyOperator = 257, RULE_divisionOperator = 258, 
		RULE_reminderOperator = 259, RULE_unaryExpression = 260, RULE_unaryPlusOperator = 261, 
		RULE_unaryMinusOperator = 262, RULE_preIncrementOperator = 263, RULE_preDecrementOperator = 264, 
		RULE_preIncrementExpression = 265, RULE_preDecrementExpression = 266, 
		RULE_preBitwiseNegationOperator = 267, RULE_preLogicalNegationOperator = 268, 
		RULE_unaryExpressionNotPlusMinus = 269, RULE_postfixExpression = 270, 
		RULE_postIncrementExpression = 271, RULE_postIncrementExpression_lf_postfixExpression = 272, 
		RULE_postDecrementExpression = 273, RULE_postDecrementExpression_lf_postfixExpression = 274, 
		RULE_castExpression = 275;
	public static readonly string[] ruleNames = {
		"literal", "type", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName", 
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier", 
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration", 
		"classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters", 
		"typeParameterList", "superclass", "superinterfaces", "interfaceTypeList", 
		"classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
		"fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
		"unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
		"unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
		"unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
		"unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
		"methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression", 
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary", 
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"simpleAssignmentOperator", "multipleAssignmentOperator", "divideAssignmentOperator", 
		"reminderAssignmentOperator", "addAssignmentOperator", "substractAssignmentOperator", 
		"bitShiftLeftAssignmentOperator", "bitShiftRightAssignmentOperator", "bitShiftRightWithZeroAssignmentOperator", 
		"bitAndAssignmentOperator", "bitXOrAssignmentOperator", "bitOrAssignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "andOrOperators", 
		"logicalOrOperator", "logicalAndOperator", "bitwiseInclusiveOrOperator", 
		"bitwiseExclusiveOrOperator", "bitwiseAndOperator", "equalityExpression", 
		"relationalExpression", "equalOperator", "notEqualOperator", "lesserThanOperator", 
		"greaterThanOperator", "lesserOrEqualToOperator", "greaterOrEqualToOperator", 
		"compareOperator", "shiftExpression", "shiftLeftOperator", "shiftRightOperator", 
		"shiftRightWithZeroOperator", "additiveExpression", "multiplicativeExpression", 
		"additionOperator", "substractionOperator", "muliplyOperator", "divisionOperator", 
		"reminderOperator", "unaryExpression", "unaryPlusOperator", "unaryMinusOperator", 
		"preIncrementOperator", "preDecrementOperator", "preIncrementExpression", 
		"preDecrementExpression", "preBitwiseNegationOperator", "preLogicalNegationOperator", 
		"unaryExpressionNotPlusMinus", "postfixExpression", "postIncrementExpression", 
		"postIncrementExpression_lf_postfixExpression", "postDecrementExpression", 
		"postDecrementExpression_lf_postfixExpression", "castExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'andOrOperators'", "'abstract'", "'assert'", "'boolean'", "'break'", 
		"'byte'", "'case'", "'catch'", "'char'", "'class'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", 
		"'finally'", "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
		"'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
		"'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", 
		"'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", "'this'", 
		"'throw'", "'throws'", "'transient'", "'try'", "'void'", "'volatile'", 
		"'while'", null, null, null, null, null, "'null'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", 
		"'::'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", 
		"'<<='", "'>>='", "'>>>='", null, "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", 
		"CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", 
		"ELSE", "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
		"IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
		"NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", 
		"STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", 
		"THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", 
		"FloatingPointLiteral", "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
		"NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
		"COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
		"SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", 
		"ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
		"OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
		"URSHIFT_ASSIGN", "Identifier", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java8.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Java8Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(Java8Parser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(Java8Parser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(Java8Parser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(Java8Parser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(Java8Parser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(Java8Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			State = 556;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; primitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555; referenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			State = 572;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 558; annotation();
					}
					}
					State = 563;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 564; numericType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 565; annotation();
					}
					}
					State = 570;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 571; Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_numericType);
		try {
			State = 576;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574; integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575; floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPointType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_la = _input.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_referenceType);
		try {
			State = 585;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; classOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 583; typeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 584; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 587; classType_lfno_classOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 588; interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 595;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 593;
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 591; classType_lf_classOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 592; interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 597;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_classType);
		int _la;
		try {
			State = 620;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 598; annotation();
					}
					}
					State = 603;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 604; Match(Identifier);
				State = 606;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 605; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608; classOrInterfaceType();
				State = 609; Match(DOT);
				State = 613;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 610; annotation();
					}
					}
					State = 615;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 616; Match(Identifier);
				State = 618;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 617; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; Match(DOT);
			State = 626;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 623; annotation();
				}
				}
				State = 628;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 629; Match(Identifier);
			State = 631;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 630; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 633; annotation();
				}
				}
				State = 638;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 639; Match(Identifier);
			State = 641;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 640; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645; classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 649; annotation();
				}
				}
				State = 654;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 655; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_arrayType);
		try {
			State = 666;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 657; primitiveType();
				State = 658; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 660; classOrInterfaceType();
				State = 661; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 663; typeVariable();
				State = 664; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDims(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 668; annotation();
				}
				}
				State = 673;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 674; Match(LBRACK);
			State = 675; Match(RBRACK);
			State = 686;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 679;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 676; annotation();
						}
						}
						State = 681;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 682; Match(LBRACK);
					State = 683; Match(RBRACK);
					}
					} 
				}
				State = 688;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 689; typeParameterModifier();
				}
				}
				State = 694;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 695; Match(Identifier);
			State = 697;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 696; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeBound);
		int _la;
		try {
			State = 711;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; Match(EXTENDS);
				State = 702; typeVariable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 703; Match(EXTENDS);
				State = 704; classOrInterfaceType();
				State = 708;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 705; additionalBound();
					}
					}
					State = 710;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; Match(BITAND);
			State = 714; interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(LT);
			State = 717; typeArgumentList();
			State = 718; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720; typeArgument();
			State = 725;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 721; Match(COMMA);
				State = 722; typeArgument();
				}
				}
				State = 727;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typeArgument);
		try {
			State = 730;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728; referenceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 729; wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 732; annotation();
				}
				}
				State = 737;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 738; Match(QUESTION);
			State = 740;
			_la = _input.La(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 739; wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_wildcardBounds);
		try {
			State = 746;
			switch (_input.La(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; Match(EXTENDS);
				State = 743; referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744; Match(SUPER);
				State = 745; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(_ctx, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 749; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 756;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 751;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 752; Match(DOT);
					State = 753; Match(Identifier);
					}
					} 
				}
				State = 758;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			State = 764;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 759; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 760; packageOrTypeName(0);
				State = 761; Match(DOT);
				State = 762; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(_ctx, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 767; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 774;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 769;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 770; Match(DOT);
					State = 771; Match(Identifier);
					}
					} 
				}
				State = 776;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			State = 782;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 777; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 778; ambiguousName(0);
				State = 779; Match(DOT);
				State = 780; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(_ctx, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 787; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 794;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 789;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 790; Match(DOT);
					State = 791; Match(Identifier);
					}
					} 
				}
				State = 796;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Java8Parser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 797; packageDeclaration();
				}
				break;
			}
			State = 803;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT) {
				{
				{
				State = 800; importDeclaration();
				}
				}
				State = 805;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==SEMI || _la==AT) {
				{
				{
				State = 806; typeDeclaration();
				}
				}
				State = 811;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 812; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 814; packageModifier();
				}
				}
				State = 819;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 820; Match(PACKAGE);
			State = 821; Match(Identifier);
			State = 826;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 822; Match(DOT);
				State = 823; Match(Identifier);
				}
				}
				State = 828;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 829; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 831; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_importDeclaration);
		try {
			State = 837;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 833; singleTypeImportDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 834; typeImportOnDemandDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 835; singleStaticImportDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 836; staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839; Match(IMPORT);
			State = 840; typeName();
			State = 841; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843; Match(IMPORT);
			State = 844; packageOrTypeName(0);
			State = 845; Match(DOT);
			State = 846; Match(MUL);
			State = 847; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStaticImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(IMPORT);
			State = 850; Match(STATIC);
			State = 851; typeName();
			State = 852; Match(DOT);
			State = 853; Match(Identifier);
			State = 854; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856; Match(IMPORT);
			State = 857; Match(STATIC);
			State = 858; typeName();
			State = 859; Match(DOT);
			State = 860; Match(MUL);
			State = 861; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_typeDeclaration);
		try {
			State = 866;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 863; classDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 864; interfaceDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 865; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_classDeclaration);
		try {
			State = 870;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 868; normalClassDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 869; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 872; classModifier();
				}
				}
				State = 877;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 878; Match(CLASS);
			State = 879; Match(Identifier);
			State = 881;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 880; typeParameters();
				}
			}

			State = 884;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 883; superclass();
				}
			}

			State = 887;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 886; superinterfaces();
				}
			}

			State = 889; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_classModifier);
		try {
			State = 899;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 891; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 892; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 893; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 894; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 895; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 896; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 897; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 898; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901; Match(LT);
			State = 902; typeParameterList();
			State = 903; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905; typeParameter();
			State = 910;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 906; Match(COMMA);
				State = 907; typeParameter();
				}
				}
				State = 912;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913; Match(EXTENDS);
			State = 914; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperinterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916; Match(IMPLEMENTS);
			State = 917; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; interfaceType();
			State = 924;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 920; Match(COMMA);
				State = 921; interfaceType();
				}
				}
				State = 926;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927; Match(LBRACE);
			State = 931;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (LT - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				{
				State = 928; classBodyDeclaration();
				}
				}
				State = 933;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 934; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_classBodyDeclaration);
		try {
			State = 940;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 936; classMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 937; instanceInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 938; staticInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 939; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_classMemberDeclaration);
		try {
			State = 947;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942; fieldDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 943; methodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 944; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 945; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 946; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || _la==AT) {
				{
				{
				State = 949; fieldModifier();
				}
				}
				State = 954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 955; unannType();
			State = 956; variableDeclaratorList();
			State = 957; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_fieldModifier);
		try {
			State = 967;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 959; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 960; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 961; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 962; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 963; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 964; Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 965; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 966; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969; variableDeclarator();
			State = 974;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 970; Match(COMMA);
				State = 971; variableDeclarator();
				}
				}
				State = 976;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; variableDeclaratorId();
			State = 980;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 978; Match(ASSIGN);
				State = 979; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982; Match(Identifier);
			State = 984;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 983; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_variableInitializer);
		try {
			State = 988;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987; arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_unannType);
		try {
			State = 992;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 990; unannPrimitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 991; unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_unannPrimitiveType);
		try {
			State = 996;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 994; numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 995; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_unannReferenceType);
		try {
			State = 1001;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 998; unannClassOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 999; unannTypeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1000; unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 1003; unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 1004; unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 1011;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 1009;
					switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						State = 1007; unannClassType_lf_unannClassOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 1008; unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 1013;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_unannClassType);
		int _la;
		try {
			State = 1030;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1014; Match(Identifier);
				State = 1016;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1015; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1018; unannClassOrInterfaceType();
				State = 1019; Match(DOT);
				State = 1023;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1020; annotation();
					}
					}
					State = 1025;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1026; Match(Identifier);
				State = 1028;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1027; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(DOT);
			State = 1036;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1033; annotation();
				}
				}
				State = 1038;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1039; Match(Identifier);
			State = 1041;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1040; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043; Match(Identifier);
			State = 1045;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1044; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1047; unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049; unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1053; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_unannArrayType);
		try {
			State = 1064;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1055; unannPrimitiveType();
				State = 1056; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1058; unannClassOrInterfaceType();
				State = 1059; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1061; unannTypeVariable();
				State = 1062; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED))) != 0) || _la==AT) {
				{
				{
				State = 1066; methodModifier();
				}
				}
				State = 1071;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1072; methodHeader();
			State = 1073; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_methodModifier);
		try {
			State = 1085;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1077; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1078; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1079; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1080; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1081; Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1082; Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1083; Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1084; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_methodHeader);
		int _la;
		try {
			State = 1104;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1087; result();
				State = 1088; methodDeclarator();
				State = 1090;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1089; throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1092; typeParameters();
				State = 1096;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1093; annotation();
					}
					}
					State = 1098;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1099; result();
				State = 1100; methodDeclarator();
				State = 1102;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1101; throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_result);
		try {
			State = 1108;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1106; unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1107; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110; Match(Identifier);
			State = 1111; Match(LPAREN);
			State = 1113;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1112; formalParameterList();
				}
			}

			State = 1115; Match(RPAREN);
			State = 1117;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1116; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_formalParameterList);
		try {
			State = 1124;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1119; formalParameters();
				State = 1120; Match(COMMA);
				State = 1121; lastFormalParameter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1123; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_formalParameters);
		try {
			int _alt;
			State = 1142;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126; formalParameter();
				State = 1131;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1127; Match(COMMA);
						State = 1128; formalParameter();
						}
						} 
					}
					State = 1133;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1134; receiverParameter();
				State = 1139;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1135; Match(COMMA);
						State = 1136; formalParameter();
						}
						} 
					}
					State = 1141;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1144; variableModifier();
				}
				}
				State = 1149;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1150; unannType();
			State = 1151; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_variableModifier);
		try {
			State = 1155;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153; annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1174;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1157; variableModifier();
					}
					}
					State = 1162;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1163; unannType();
				State = 1167;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1164; annotation();
					}
					}
					State = 1169;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1170; Match(ELLIPSIS);
				State = 1171; variableDeclaratorId();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1173; formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1176; annotation();
				}
				}
				State = 1181;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1182; unannType();
			State = 1185;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1183; Match(Identifier);
				State = 1184; Match(DOT);
				}
			}

			State = 1187; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrows_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(_ctx, State);
		EnterRule(_localctx, 162, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1189; Match(THROWS);
			State = 1190; exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192; exceptionType();
			State = 1197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1193; Match(COMMA);
				State = 1194; exceptionType();
				}
				}
				State = 1199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_exceptionType);
		try {
			State = 1202;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1200; classType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1201; typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_methodBody);
		try {
			State = 1206;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1204; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1205; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(STATIC);
			State = 1211; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==AT) {
				{
				{
				State = 1213; constructorModifier();
				}
				}
				State = 1218;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1219; constructorDeclarator();
			State = 1221;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 1220; throws_();
				}
			}

			State = 1223; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_constructorModifier);
		try {
			State = 1229;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1225; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1226; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1227; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1228; Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1231; typeParameters();
				}
			}

			State = 1234; simpleTypeName();
			State = 1235; Match(LPAREN);
			State = 1237;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1236; formalParameterList();
				}
			}

			State = 1239; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1243; Match(LBRACE);
			State = 1245;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 1244; explicitConstructorInvocation();
				}
				break;
			}
			State = 1248;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (INC - 64)) | (1L << (DEC - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				State = 1247; blockStatements();
				}
			}

			State = 1250; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1298;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1253;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1252; typeArguments();
					}
				}

				State = 1255; Match(THIS);
				State = 1256; Match(LPAREN);
				State = 1258;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 1257; argumentList();
					}
				}

				State = 1260; Match(RPAREN);
				State = 1261; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1263;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1262; typeArguments();
					}
				}

				State = 1265; Match(SUPER);
				State = 1266; Match(LPAREN);
				State = 1268;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 1267; argumentList();
					}
				}

				State = 1270; Match(RPAREN);
				State = 1271; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1272; expressionName();
				State = 1273; Match(DOT);
				State = 1275;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1274; typeArguments();
					}
				}

				State = 1277; Match(SUPER);
				State = 1278; Match(LPAREN);
				State = 1280;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 1279; argumentList();
					}
				}

				State = 1282; Match(RPAREN);
				State = 1283; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1285; primary();
				State = 1286; Match(DOT);
				State = 1288;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1287; typeArguments();
					}
				}

				State = 1290; Match(SUPER);
				State = 1291; Match(LPAREN);
				State = 1293;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 1292; argumentList();
					}
				}

				State = 1295; Match(RPAREN);
				State = 1296; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1303;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1300; classModifier();
				}
				}
				State = 1305;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1306; Match(ENUM);
			State = 1307; Match(Identifier);
			State = 1309;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1308; superinterfaces();
				}
			}

			State = 1311; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313; Match(LBRACE);
			State = 1315;
			_la = _input.La(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 1314; enumConstantList();
				}
			}

			State = 1318;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1317; Match(COMMA);
				}
			}

			State = 1321;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1320; enumBodyDeclarations();
				}
			}

			State = 1323; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325; enumConstant();
			State = 1330;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1326; Match(COMMA);
					State = 1327; enumConstant();
					}
					} 
				}
				State = 1332;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1333; enumConstantModifier();
				}
				}
				State = 1338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1339; Match(Identifier);
			State = 1345;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1340; Match(LPAREN);
				State = 1342;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 1341; argumentList();
					}
				}

				State = 1344; Match(RPAREN);
				}
			}

			State = 1348;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 1347; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352; Match(SEMI);
			State = 1356;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (LT - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				{
				State = 1353; classBodyDeclaration();
				}
				}
				State = 1358;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_interfaceDeclaration);
		try {
			State = 1361;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1359; normalInterfaceDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1360; annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1363; interfaceModifier();
				}
				}
				State = 1368;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1369; Match(INTERFACE);
			State = 1370; Match(Identifier);
			State = 1372;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1371; typeParameters();
				}
			}

			State = 1375;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 1374; extendsInterfaces();
				}
			}

			State = 1377; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_interfaceModifier);
		try {
			State = 1386;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1379; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1380; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1381; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1382; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1383; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1384; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1385; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendsInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1388; Match(EXTENDS);
			State = 1389; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391; Match(LBRACE);
			State = 1395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << VOID))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (LT - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				{
				State = 1392; interfaceMemberDeclaration();
				}
				}
				State = 1397;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1398; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_interfaceMemberDeclaration);
		try {
			State = 1405;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1400; constantDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401; interfaceMethodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1402; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1403; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1404; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==AT) {
				{
				{
				State = 1407; constantModifier();
				}
				}
				State = 1412;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1413; unannType();
			State = 1414; variableDeclaratorList();
			State = 1415; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_constantModifier);
		try {
			State = 1421;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1417; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1419; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1420; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << DEFAULT) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1423; interfaceMethodModifier();
				}
				}
				State = 1428;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1429; methodHeader();
			State = 1430; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_interfaceMethodModifier);
		try {
			State = 1438;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1432; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1433; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1434; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1435; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1436; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1437; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1443;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1440; interfaceModifier();
					}
					} 
				}
				State = 1445;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			}
			State = 1446; Match(AT);
			State = 1447; Match(INTERFACE);
			State = 1448; Match(Identifier);
			State = 1449; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451; Match(LBRACE);
			State = 1455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				{
				State = 1452; annotationTypeMemberDeclaration();
				}
				}
				State = 1457;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1458; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1465;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1460; annotationTypeElementDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1461; constantDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1462; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1463; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1464; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1467; annotationTypeElementModifier();
				}
				}
				State = 1472;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1473; unannType();
			State = 1474; Match(Identifier);
			State = 1475; Match(LPAREN);
			State = 1476; Match(RPAREN);
			State = 1478;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1477; dims();
				}
			}

			State = 1481;
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 1480; defaultValue();
				}
			}

			State = 1483; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_annotationTypeElementModifier);
		try {
			State = 1488;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1485; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1486; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1487; Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1490; Match(DEFAULT);
			State = 1491; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_annotation);
		try {
			State = 1496;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1493; normalAnnotation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1494; markerAnnotation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1495; singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498; Match(AT);
			State = 1499; typeName();
			State = 1500; Match(LPAREN);
			State = 1502;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1501; elementValuePairList();
				}
			}

			State = 1504; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; elementValuePair();
			State = 1511;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1507; Match(COMMA);
				State = 1508; elementValuePair();
				}
				}
				State = 1513;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; Match(Identifier);
			State = 1515; Match(ASSIGN);
			State = 1516; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_elementValue);
		try {
			State = 1521;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1519; elementValueArrayInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1520; annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523; Match(LBRACE);
			State = 1525;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 1524; elementValueList();
				}
			}

			State = 1528;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1527; Match(COMMA);
				}
			}

			State = 1530; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; elementValue();
			State = 1537;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1533; Match(COMMA);
					State = 1534; elementValue();
					}
					} 
				}
				State = 1539;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540; Match(AT);
			State = 1541; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleElementAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543; Match(AT);
			State = 1544; typeName();
			State = 1545; Match(LPAREN);
			State = 1546; elementValue();
			State = 1547; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549; Match(LBRACE);
			State = 1551;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 1550; variableInitializerList();
				}
			}

			State = 1554;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1553; Match(COMMA);
				}
			}

			State = 1556; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558; variableInitializer();
			State = 1563;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1559; Match(COMMA);
					State = 1560; variableInitializer();
					}
					} 
				}
				State = 1565;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1566; Match(LBRACE);
			State = 1568;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (INC - 64)) | (1L << (DEC - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				State = 1567; blockStatements();
				}
			}

			State = 1570; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572; blockStatement();
			State = 1576;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SEMI - 64)) | (1L << (INC - 64)) | (1L << (DEC - 64)) | (1L << (Identifier - 64)) | (1L << (AT - 64)))) != 0)) {
				{
				{
				State = 1573; blockStatement();
				}
				}
				State = 1578;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_blockStatement);
		try {
			State = 1582;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1579; localVariableDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1580; classDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1581; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1584; localVariableDeclaration();
			State = 1585; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1590;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1587; variableModifier();
				}
				}
				State = 1592;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1593; unannType();
			State = 1594; variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_statement);
		try {
			State = 1602;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1596; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597; labeledStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1598; ifThenStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1599; ifThenElseStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1600; whileStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1601; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_statementNoShortIf);
		try {
			State = 1609;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1604; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1605; labeledStatementNoShortIf();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1606; ifThenElseStatementNoShortIf();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1607; whileStatementNoShortIf();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1608; forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithoutTrailingSubstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1623;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1611; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1612; emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case INC:
			case DEC:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1613; expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1614; assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1615; switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1616; doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1617; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1618; continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1619; returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1620; synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1621; throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1622; tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627; Match(Identifier);
			State = 1628; Match(COLON);
			State = 1629; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631; Match(Identifier);
			State = 1632; Match(COLON);
			State = 1633; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635; statementExpression();
			State = 1636; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_statementExpression);
		try {
			State = 1645;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1638; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1639; preIncrementExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1640; preDecrementExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1641; postIncrementExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1642; postDecrementExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1643; methodInvocation();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1644; classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1647; Match(IF);
			State = 1648; Match(LPAREN);
			State = 1649; expression();
			State = 1650; Match(RPAREN);
			State = 1651; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(IF);
			State = 1654; Match(LPAREN);
			State = 1655; expression();
			State = 1656; Match(RPAREN);
			State = 1657; statementNoShortIf();
			State = 1658; Match(ELSE);
			State = 1659; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1661; Match(IF);
			State = 1662; Match(LPAREN);
			State = 1663; expression();
			State = 1664; Match(RPAREN);
			State = 1665; statementNoShortIf();
			State = 1666; Match(ELSE);
			State = 1667; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_assertStatement);
		try {
			State = 1679;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1669; Match(ASSERT);
				State = 1670; expression();
				State = 1671; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1673; Match(ASSERT);
				State = 1674; expression();
				State = 1675; Match(COLON);
				State = 1676; expression();
				State = 1677; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1681; Match(SWITCH);
			State = 1682; Match(LPAREN);
			State = 1683; expression();
			State = 1684; Match(RPAREN);
			State = 1685; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; Match(LBRACE);
			State = 1691;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1688; switchBlockStatementGroup();
					}
					} 
				}
				State = 1693;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			}
			State = 1697;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1694; switchLabel();
				}
				}
				State = 1699;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1700; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; switchLabels();
			State = 1703; blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705; switchLabel();
			State = 1709;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1706; switchLabel();
				}
				}
				State = 1711;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_switchLabel);
		try {
			State = 1722;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1712; Match(CASE);
				State = 1713; constantExpression();
				State = 1714; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1716; Match(CASE);
				State = 1717; enumConstantName();
				State = 1718; Match(COLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1720; Match(DEFAULT);
				State = 1721; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1724; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726; Match(WHILE);
			State = 1727; Match(LPAREN);
			State = 1728; expression();
			State = 1729; Match(RPAREN);
			State = 1730; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1732; Match(WHILE);
			State = 1733; Match(LPAREN);
			State = 1734; expression();
			State = 1735; Match(RPAREN);
			State = 1736; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(DO);
			State = 1739; statement();
			State = 1740; Match(WHILE);
			State = 1741; Match(LPAREN);
			State = 1742; expression();
			State = 1743; Match(RPAREN);
			State = 1744; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_forStatement);
		try {
			State = 1748;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1746; basicForStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1747; enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_forStatementNoShortIf);
		try {
			State = 1752;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750; basicForStatementNoShortIf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1751; enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754; Match(FOR);
			State = 1755; Match(LPAREN);
			State = 1757;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (INC - 80)) | (1L << (DEC - 80)) | (1L << (Identifier - 80)) | (1L << (AT - 80)))) != 0)) {
				{
				State = 1756; forInit();
				}
			}

			State = 1759; Match(SEMI);
			State = 1761;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 1760; expression();
				}
			}

			State = 1763; Match(SEMI);
			State = 1765;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (INC - 80)) | (1L << (DEC - 80)) | (1L << (Identifier - 80)) | (1L << (AT - 80)))) != 0)) {
				{
				State = 1764; forUpdate();
				}
			}

			State = 1767; Match(RPAREN);
			State = 1768; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(FOR);
			State = 1771; Match(LPAREN);
			State = 1773;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (INC - 80)) | (1L << (DEC - 80)) | (1L << (Identifier - 80)) | (1L << (AT - 80)))) != 0)) {
				{
				State = 1772; forInit();
				}
			}

			State = 1775; Match(SEMI);
			State = 1777;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 1776; expression();
				}
			}

			State = 1779; Match(SEMI);
			State = 1781;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (INC - 80)) | (1L << (DEC - 80)) | (1L << (Identifier - 80)) | (1L << (AT - 80)))) != 0)) {
				{
				State = 1780; forUpdate();
				}
			}

			State = 1783; Match(RPAREN);
			State = 1784; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_forInit);
		try {
			State = 1788;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1786; statementExpressionList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1787; localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1790; statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1792; statementExpression();
			State = 1797;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1793; Match(COMMA);
				State = 1794; statementExpression();
				}
				}
				State = 1799;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800; Match(FOR);
			State = 1801; Match(LPAREN);
			State = 1805;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1802; variableModifier();
				}
				}
				State = 1807;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1808; unannType();
			State = 1809; variableDeclaratorId();
			State = 1810; Match(COLON);
			State = 1811; expression();
			State = 1812; Match(RPAREN);
			State = 1813; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1815; Match(FOR);
			State = 1816; Match(LPAREN);
			State = 1820;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1817; variableModifier();
				}
				}
				State = 1822;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1823; unannType();
			State = 1824; variableDeclaratorId();
			State = 1825; Match(COLON);
			State = 1826; expression();
			State = 1827; Match(RPAREN);
			State = 1828; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; Match(BREAK);
			State = 1832;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1831; Match(Identifier);
				}
			}

			State = 1834; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836; Match(CONTINUE);
			State = 1838;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1837; Match(Identifier);
				}
			}

			State = 1840; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; Match(RETURN);
			State = 1844;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 1843; expression();
				}
			}

			State = 1846; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1848; Match(THROW);
			State = 1849; expression();
			State = 1850; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynchronizedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852; Match(SYNCHRONIZED);
			State = 1853; Match(LPAREN);
			State = 1854; expression();
			State = 1855; Match(RPAREN);
			State = 1856; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_tryStatement);
		int _la;
		try {
			State = 1870;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1858; Match(TRY);
				State = 1859; block();
				State = 1860; catches();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1862; Match(TRY);
				State = 1863; block();
				State = 1865;
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1864; catches();
					}
				}

				State = 1867; finally_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1869; tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1872; catchClause();
			State = 1876;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CATCH) {
				{
				{
				State = 1873; catchClause();
				}
				}
				State = 1878;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879; Match(CATCH);
			State = 1880; Match(LPAREN);
			State = 1881; catchFormalParameter();
			State = 1882; Match(RPAREN);
			State = 1883; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1888;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1885; variableModifier();
				}
				}
				State = 1890;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1891; catchType();
			State = 1892; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1894; unannClassType();
			State = 1899;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITOR) {
				{
				{
				State = 1895; Match(BITOR);
				State = 1896; classType();
				}
				}
				State = 1901;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(_ctx, State);
		EnterRule(_localctx, 342, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1902; Match(FINALLY);
			State = 1903; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryWithResourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1905; Match(TRY);
			State = 1906; resourceSpecification();
			State = 1907; block();
			State = 1909;
			_la = _input.La(1);
			if (_la==CATCH) {
				{
				State = 1908; catches();
				}
			}

			State = 1912;
			_la = _input.La(1);
			if (_la==FINALLY) {
				{
				State = 1911; finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914; Match(LPAREN);
			State = 1915; resourceList();
			State = 1917;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1916; Match(SEMI);
				}
			}

			State = 1919; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1921; resource();
			State = 1926;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1922; Match(SEMI);
					State = 1923; resource();
					}
					} 
				}
				State = 1928;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1932;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1929; variableModifier();
				}
				}
				State = 1934;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1935; unannType();
			State = 1936; variableDeclaratorId();
			State = 1937; Match(ASSIGN);
			State = 1938; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1940; primaryNoNewArray_lfno_primary();
				}
				break;

			case 2:
				{
				State = 1941; arrayCreationExpression();
				}
				break;
			}
			State = 1947;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1944; primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1949;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 1979;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; typeName();
				State = 1956;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1952; Match(LBRACK);
					State = 1953; Match(RBRACK);
					}
					}
					State = 1958;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1959; Match(DOT);
				State = 1960; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1962; Match(VOID);
				State = 1963; Match(DOT);
				State = 1964; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1965; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1966; typeName();
				State = 1967; Match(DOT);
				State = 1968; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1970; Match(LPAREN);
				State = 1971; expression();
				State = 1972; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1974; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1975; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1976; arrayAccess();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1977; methodInvocation();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1978; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 2011;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1983; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1984; typeName();
				State = 1989;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1985; Match(LBRACK);
					State = 1986; Match(RBRACK);
					}
					}
					State = 1991;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1992; Match(DOT);
				State = 1993; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1995; Match(VOID);
				State = 1996; Match(DOT);
				State = 1997; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1998; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1999; typeName();
				State = 2000; Match(DOT);
				State = 2001; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2003; Match(LPAREN);
				State = 2004; expression();
				State = 2005; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2007; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2008; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2009; methodInvocation();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2010; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 2018;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2013; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2014; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2015; arrayAccess_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2016; methodInvocation_lf_primary();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2017; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 2026;
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2022; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2023; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2024; methodInvocation_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2025; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 2068;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2028; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2029; typeName();
				State = 2034;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2030; Match(LBRACK);
					State = 2031; Match(RBRACK);
					}
					}
					State = 2036;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2037; Match(DOT);
				State = 2038; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2040; unannPrimitiveType();
				State = 2045;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2041; Match(LBRACK);
					State = 2042; Match(RBRACK);
					}
					}
					State = 2047;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2048; Match(DOT);
				State = 2049; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2051; Match(VOID);
				State = 2052; Match(DOT);
				State = 2053; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2054; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2055; typeName();
				State = 2056; Match(DOT);
				State = 2057; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2059; Match(LPAREN);
				State = 2060; expression();
				State = 2061; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2063; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2064; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2065; arrayAccess_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2066; methodInvocation_lfno_primary();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2067; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2111;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2072; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2073; typeName();
				State = 2078;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2074; Match(LBRACK);
					State = 2075; Match(RBRACK);
					}
					}
					State = 2080;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2081; Match(DOT);
				State = 2082; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2084; unannPrimitiveType();
				State = 2089;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2085; Match(LBRACK);
					State = 2086; Match(RBRACK);
					}
					}
					State = 2091;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2092; Match(DOT);
				State = 2093; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2095; Match(VOID);
				State = 2096; Match(DOT);
				State = 2097; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2098; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2099; typeName();
				State = 2100; Match(DOT);
				State = 2101; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2103; Match(LPAREN);
				State = 2104; expression();
				State = 2105; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2107; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2108; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2109; methodInvocation_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2110; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2196;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2113; Match(NEW);
				State = 2115;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2114; typeArguments();
					}
				}

				State = 2120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2117; annotation();
					}
					}
					State = 2122;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2123; Match(Identifier);
				State = 2134;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2124; Match(DOT);
					State = 2128;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2125; annotation();
						}
						}
						State = 2130;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2131; Match(Identifier);
					}
					}
					State = 2136;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2138;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2137; typeArgumentsOrDiamond();
					}
				}

				State = 2140; Match(LPAREN);
				State = 2142;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2141; argumentList();
					}
				}

				State = 2144; Match(RPAREN);
				State = 2146;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2145; classBody();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2148; expressionName();
				State = 2149; Match(DOT);
				State = 2150; Match(NEW);
				State = 2152;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2151; typeArguments();
					}
				}

				State = 2157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2154; annotation();
					}
					}
					State = 2159;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2160; Match(Identifier);
				State = 2162;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2161; typeArgumentsOrDiamond();
					}
				}

				State = 2164; Match(LPAREN);
				State = 2166;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2165; argumentList();
					}
				}

				State = 2168; Match(RPAREN);
				State = 2170;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2169; classBody();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2172; primary();
				State = 2173; Match(DOT);
				State = 2174; Match(NEW);
				State = 2176;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2175; typeArguments();
					}
				}

				State = 2181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2178; annotation();
					}
					}
					State = 2183;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2184; Match(Identifier);
				State = 2186;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2185; typeArgumentsOrDiamond();
					}
				}

				State = 2188; Match(LPAREN);
				State = 2190;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2189; argumentList();
					}
				}

				State = 2192; Match(RPAREN);
				State = 2194;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2193; classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2198; Match(DOT);
			State = 2199; Match(NEW);
			State = 2201;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2200; typeArguments();
				}
			}

			State = 2206;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2203; annotation();
				}
				}
				State = 2208;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2209; Match(Identifier);
			State = 2211;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2210; typeArgumentsOrDiamond();
				}
			}

			State = 2213; Match(LPAREN);
			State = 2215;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 2214; argumentList();
				}
			}

			State = 2217; Match(RPAREN);
			State = 2219;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 2218; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2280;
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2221; Match(NEW);
				State = 2223;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2222; typeArguments();
					}
				}

				State = 2228;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2225; annotation();
					}
					}
					State = 2230;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2231; Match(Identifier);
				State = 2242;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2232; Match(DOT);
					State = 2236;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2233; annotation();
						}
						}
						State = 2238;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2239; Match(Identifier);
					}
					}
					State = 2244;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2246;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2245; typeArgumentsOrDiamond();
					}
				}

				State = 2248; Match(LPAREN);
				State = 2250;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2249; argumentList();
					}
				}

				State = 2252; Match(RPAREN);
				State = 2254;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 2253; classBody();
					}
					break;
				}
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2256; expressionName();
				State = 2257; Match(DOT);
				State = 2258; Match(NEW);
				State = 2260;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2259; typeArguments();
					}
				}

				State = 2265;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2262; annotation();
					}
					}
					State = 2267;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2268; Match(Identifier);
				State = 2270;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2269; typeArgumentsOrDiamond();
					}
				}

				State = 2272; Match(LPAREN);
				State = 2274;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2273; argumentList();
					}
				}

				State = 2276; Match(RPAREN);
				State = 2278;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 2277; classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_typeArgumentsOrDiamond);
		try {
			State = 2285;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2282; typeArguments();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2283; Match(LT);
				State = 2284; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_fieldAccess);
		try {
			State = 2300;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2287; primary();
				State = 2288; Match(DOT);
				State = 2289; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2291; Match(SUPER);
				State = 2292; Match(DOT);
				State = 2293; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2294; typeName();
				State = 2295; Match(DOT);
				State = 2296; Match(SUPER);
				State = 2297; Match(DOT);
				State = 2298; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; Match(DOT);
			State = 2303; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_fieldAccess_lfno_primary);
		try {
			State = 2314;
			switch (_input.La(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2305; Match(SUPER);
				State = 2306; Match(DOT);
				State = 2307; Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2308; typeName();
				State = 2309; Match(DOT);
				State = 2310; Match(SUPER);
				State = 2311; Match(DOT);
				State = 2312; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2326;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 2316; expressionName();
				State = 2317; Match(LBRACK);
				State = 2318; expression();
				State = 2319; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2321; primaryNoNewArray_lfno_arrayAccess();
				State = 2322; Match(LBRACK);
				State = 2323; expression();
				State = 2324; Match(RBRACK);
				}
				break;
			}
			State = 2335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 2328; primaryNoNewArray_lf_arrayAccess();
				State = 2329; Match(LBRACK);
				State = 2330; expression();
				State = 2331; Match(RBRACK);
				}
				}
				State = 2337;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2338; primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2339; Match(LBRACK);
			State = 2340; expression();
			State = 2341; Match(RBRACK);
			}
			State = 2350;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2343; primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2344; Match(LBRACK);
					State = 2345; expression();
					State = 2346; Match(RBRACK);
					}
					} 
				}
				State = 2352;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 2353; expressionName();
				State = 2354; Match(LBRACK);
				State = 2355; expression();
				State = 2356; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2358; primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2359; Match(LBRACK);
				State = 2360; expression();
				State = 2361; Match(RBRACK);
				}
				break;
			}
			State = 2372;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2365; primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2366; Match(LBRACK);
					State = 2367; expression();
					State = 2368; Match(RBRACK);
					}
					} 
				}
				State = 2374;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_methodInvocation);
		int _la;
		try {
			State = 2443;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2375; methodName();
				State = 2376; Match(LPAREN);
				State = 2378;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2377; argumentList();
					}
				}

				State = 2380; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2382; typeName();
				State = 2383; Match(DOT);
				State = 2385;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2384; typeArguments();
					}
				}

				State = 2387; Match(Identifier);
				State = 2388; Match(LPAREN);
				State = 2390;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2389; argumentList();
					}
				}

				State = 2392; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2394; expressionName();
				State = 2395; Match(DOT);
				State = 2397;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2396; typeArguments();
					}
				}

				State = 2399; Match(Identifier);
				State = 2400; Match(LPAREN);
				State = 2402;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2401; argumentList();
					}
				}

				State = 2404; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2406; primary();
				State = 2407; Match(DOT);
				State = 2409;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2408; typeArguments();
					}
				}

				State = 2411; Match(Identifier);
				State = 2412; Match(LPAREN);
				State = 2414;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2413; argumentList();
					}
				}

				State = 2416; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2418; Match(SUPER);
				State = 2419; Match(DOT);
				State = 2421;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2420; typeArguments();
					}
				}

				State = 2423; Match(Identifier);
				State = 2424; Match(LPAREN);
				State = 2426;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2425; argumentList();
					}
				}

				State = 2428; Match(RPAREN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2429; typeName();
				State = 2430; Match(DOT);
				State = 2431; Match(SUPER);
				State = 2432; Match(DOT);
				State = 2434;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2433; typeArguments();
					}
				}

				State = 2436; Match(Identifier);
				State = 2437; Match(LPAREN);
				State = 2439;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2438; argumentList();
					}
				}

				State = 2441; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2445; Match(DOT);
			State = 2447;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2446; typeArguments();
				}
			}

			State = 2449; Match(Identifier);
			State = 2450; Match(LPAREN);
			State = 2452;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
				{
				State = 2451; argumentList();
				}
			}

			State = 2454; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2512;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2456; methodName();
				State = 2457; Match(LPAREN);
				State = 2459;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2458; argumentList();
					}
				}

				State = 2461; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2463; typeName();
				State = 2464; Match(DOT);
				State = 2466;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2465; typeArguments();
					}
				}

				State = 2468; Match(Identifier);
				State = 2469; Match(LPAREN);
				State = 2471;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2470; argumentList();
					}
				}

				State = 2473; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2475; expressionName();
				State = 2476; Match(DOT);
				State = 2478;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2477; typeArguments();
					}
				}

				State = 2480; Match(Identifier);
				State = 2481; Match(LPAREN);
				State = 2483;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2482; argumentList();
					}
				}

				State = 2485; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2487; Match(SUPER);
				State = 2488; Match(DOT);
				State = 2490;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2489; typeArguments();
					}
				}

				State = 2492; Match(Identifier);
				State = 2493; Match(LPAREN);
				State = 2495;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2494; argumentList();
					}
				}

				State = 2497; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2498; typeName();
				State = 2499; Match(DOT);
				State = 2500; Match(SUPER);
				State = 2501; Match(DOT);
				State = 2503;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2502; typeArguments();
					}
				}

				State = 2505; Match(Identifier);
				State = 2506; Match(LPAREN);
				State = 2508;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (BANG - 70)) | (1L << (TILDE - 70)) | (1L << (INC - 70)) | (1L << (DEC - 70)) | (1L << (ADD - 70)) | (1L << (SUB - 70)) | (1L << (Identifier - 70)) | (1L << (AT - 70)))) != 0)) {
					{
					State = 2507; argumentList();
					}
				}

				State = 2510; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2514; expression();
			State = 2519;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2515; Match(COMMA);
				State = 2516; expression();
				}
				}
				State = 2521;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_methodReference);
		int _la;
		try {
			State = 2569;
			switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2522; expressionName();
				State = 2523; Match(COLONCOLON);
				State = 2525;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2524; typeArguments();
					}
				}

				State = 2527; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2529; referenceType();
				State = 2530; Match(COLONCOLON);
				State = 2532;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2531; typeArguments();
					}
				}

				State = 2534; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2536; primary();
				State = 2537; Match(COLONCOLON);
				State = 2539;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2538; typeArguments();
					}
				}

				State = 2541; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2543; Match(SUPER);
				State = 2544; Match(COLONCOLON);
				State = 2546;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2545; typeArguments();
					}
				}

				State = 2548; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2549; typeName();
				State = 2550; Match(DOT);
				State = 2551; Match(SUPER);
				State = 2552; Match(COLONCOLON);
				State = 2554;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2553; typeArguments();
					}
				}

				State = 2556; Match(Identifier);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2558; classType();
				State = 2559; Match(COLONCOLON);
				State = 2561;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2560; typeArguments();
					}
				}

				State = 2563; Match(NEW);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2565; arrayType();
				State = 2566; Match(COLONCOLON);
				State = 2567; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571; Match(COLONCOLON);
			State = 2573;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2572; typeArguments();
				}
			}

			State = 2575; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2617;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2577; expressionName();
				State = 2578; Match(COLONCOLON);
				State = 2580;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2579; typeArguments();
					}
				}

				State = 2582; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2584; referenceType();
				State = 2585; Match(COLONCOLON);
				State = 2587;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2586; typeArguments();
					}
				}

				State = 2589; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2591; Match(SUPER);
				State = 2592; Match(COLONCOLON);
				State = 2594;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2593; typeArguments();
					}
				}

				State = 2596; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2597; typeName();
				State = 2598; Match(DOT);
				State = 2599; Match(SUPER);
				State = 2600; Match(COLONCOLON);
				State = 2602;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2601; typeArguments();
					}
				}

				State = 2604; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2606; classType();
				State = 2607; Match(COLONCOLON);
				State = 2609;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2608; typeArguments();
					}
				}

				State = 2611; Match(NEW);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2613; arrayType();
				State = 2614; Match(COLONCOLON);
				State = 2615; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_arrayCreationExpression);
		try {
			State = 2641;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2619; Match(NEW);
				State = 2620; primitiveType();
				State = 2621; dimExprs();
				State = 2623;
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 2622; dims();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2625; Match(NEW);
				State = 2626; classOrInterfaceType();
				State = 2627; dimExprs();
				State = 2629;
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 2628; dims();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2631; Match(NEW);
				State = 2632; primitiveType();
				State = 2633; dims();
				State = 2634; arrayInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2636; Match(NEW);
				State = 2637; classOrInterfaceType();
				State = 2638; dims();
				State = 2639; arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2643; dimExpr();
			State = 2647;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2644; dimExpr();
					}
					} 
				}
				State = 2649;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2653;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2650; annotation();
				}
				}
				State = 2655;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2656; Match(LBRACK);
			State = 2657; expression();
			State = 2658; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2660; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_expression);
		try {
			State = 2664;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2662; lambdaExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2663; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2666; lambdaParameters();
			State = 2667; Match(ARROW);
			State = 2668; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_lambdaParameters);
		int _la;
		try {
			State = 2680;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2670; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2671; Match(LPAREN);
				State = 2673;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
					{
					State = 2672; formalParameterList();
					}
				}

				State = 2675; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2676; Match(LPAREN);
				State = 2677; inferredFormalParameterList();
				State = 2678; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInferredFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2682; Match(Identifier);
			State = 2687;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2683; Match(COMMA);
				State = 2684; Match(Identifier);
				}
				}
				State = 2689;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_lambdaBody);
		try {
			State = 2692;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2690; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2691; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_assignmentExpression);
		try {
			State = 2696;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2694; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2695; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2698; leftHandSide();
			State = 2699; assignmentOperator();
			State = 2700; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_leftHandSide);
		try {
			State = 2705;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2702; expressionName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2703; fieldAccess();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2704; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public SimpleAssignmentOperatorContext simpleAssignmentOperator() {
			return GetRuleContext<SimpleAssignmentOperatorContext>(0);
		}
		public MultipleAssignmentOperatorContext multipleAssignmentOperator() {
			return GetRuleContext<MultipleAssignmentOperatorContext>(0);
		}
		public DivideAssignmentOperatorContext divideAssignmentOperator() {
			return GetRuleContext<DivideAssignmentOperatorContext>(0);
		}
		public ReminderAssignmentOperatorContext reminderAssignmentOperator() {
			return GetRuleContext<ReminderAssignmentOperatorContext>(0);
		}
		public AddAssignmentOperatorContext addAssignmentOperator() {
			return GetRuleContext<AddAssignmentOperatorContext>(0);
		}
		public SubstractAssignmentOperatorContext substractAssignmentOperator() {
			return GetRuleContext<SubstractAssignmentOperatorContext>(0);
		}
		public BitShiftLeftAssignmentOperatorContext bitShiftLeftAssignmentOperator() {
			return GetRuleContext<BitShiftLeftAssignmentOperatorContext>(0);
		}
		public BitShiftRightAssignmentOperatorContext bitShiftRightAssignmentOperator() {
			return GetRuleContext<BitShiftRightAssignmentOperatorContext>(0);
		}
		public BitShiftRightWithZeroAssignmentOperatorContext bitShiftRightWithZeroAssignmentOperator() {
			return GetRuleContext<BitShiftRightWithZeroAssignmentOperatorContext>(0);
		}
		public BitAndAssignmentOperatorContext bitAndAssignmentOperator() {
			return GetRuleContext<BitAndAssignmentOperatorContext>(0);
		}
		public BitXOrAssignmentOperatorContext bitXOrAssignmentOperator() {
			return GetRuleContext<BitXOrAssignmentOperatorContext>(0);
		}
		public BitOrAssignmentOperatorContext bitOrAssignmentOperator() {
			return GetRuleContext<BitOrAssignmentOperatorContext>(0);
		}
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_assignmentOperator);
		try {
			State = 2719;
			switch (_input.La(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2707; simpleAssignmentOperator();
				}
				break;
			case MUL_ASSIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2708; multipleAssignmentOperator();
				}
				break;
			case DIV_ASSIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2709; divideAssignmentOperator();
				}
				break;
			case MOD_ASSIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2710; reminderAssignmentOperator();
				}
				break;
			case ADD_ASSIGN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2711; addAssignmentOperator();
				}
				break;
			case SUB_ASSIGN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2712; substractAssignmentOperator();
				}
				break;
			case LSHIFT_ASSIGN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2713; bitShiftLeftAssignmentOperator();
				}
				break;
			case RSHIFT_ASSIGN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2714; bitShiftRightAssignmentOperator();
				}
				break;
			case URSHIFT_ASSIGN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2715; bitShiftRightWithZeroAssignmentOperator();
				}
				break;
			case AND_ASSIGN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2716; bitAndAssignmentOperator();
				}
				break;
			case XOR_ASSIGN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2717; bitXOrAssignmentOperator();
				}
				break;
			case OR_ASSIGN:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2718; bitOrAssignmentOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAssignmentOperatorContext : ParserRuleContext {
		public SimpleAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSimpleAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSimpleAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAssignmentOperatorContext simpleAssignmentOperator() {
		SimpleAssignmentOperatorContext _localctx = new SimpleAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_simpleAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2721; Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleAssignmentOperatorContext : ParserRuleContext {
		public MultipleAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMultipleAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMultipleAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleAssignmentOperatorContext multipleAssignmentOperator() {
		MultipleAssignmentOperatorContext _localctx = new MultipleAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 434, RULE_multipleAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2723; Match(MUL_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideAssignmentOperatorContext : ParserRuleContext {
		public DivideAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divideAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDivideAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDivideAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivideAssignmentOperatorContext divideAssignmentOperator() {
		DivideAssignmentOperatorContext _localctx = new DivideAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 436, RULE_divideAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2725; Match(DIV_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReminderAssignmentOperatorContext : ParserRuleContext {
		public ReminderAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reminderAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReminderAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReminderAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReminderAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReminderAssignmentOperatorContext reminderAssignmentOperator() {
		ReminderAssignmentOperatorContext _localctx = new ReminderAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 438, RULE_reminderAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2727; Match(MOD_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddAssignmentOperatorContext : ParserRuleContext {
		public AddAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAddAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAddAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddAssignmentOperatorContext addAssignmentOperator() {
		AddAssignmentOperatorContext _localctx = new AddAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 440, RULE_addAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2729; Match(ADD_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstractAssignmentOperatorContext : ParserRuleContext {
		public SubstractAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substractAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSubstractAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSubstractAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstractAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstractAssignmentOperatorContext substractAssignmentOperator() {
		SubstractAssignmentOperatorContext _localctx = new SubstractAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 442, RULE_substractAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2731; Match(SUB_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitShiftLeftAssignmentOperatorContext : ParserRuleContext {
		public BitShiftLeftAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitShiftLeftAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitShiftLeftAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitShiftLeftAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftLeftAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitShiftLeftAssignmentOperatorContext bitShiftLeftAssignmentOperator() {
		BitShiftLeftAssignmentOperatorContext _localctx = new BitShiftLeftAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 444, RULE_bitShiftLeftAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2733; Match(LSHIFT_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitShiftRightAssignmentOperatorContext : ParserRuleContext {
		public BitShiftRightAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitShiftRightAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitShiftRightAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitShiftRightAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftRightAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitShiftRightAssignmentOperatorContext bitShiftRightAssignmentOperator() {
		BitShiftRightAssignmentOperatorContext _localctx = new BitShiftRightAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 446, RULE_bitShiftRightAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2735; Match(RSHIFT_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitShiftRightWithZeroAssignmentOperatorContext : ParserRuleContext {
		public BitShiftRightWithZeroAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitShiftRightWithZeroAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitShiftRightWithZeroAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitShiftRightWithZeroAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitShiftRightWithZeroAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitShiftRightWithZeroAssignmentOperatorContext bitShiftRightWithZeroAssignmentOperator() {
		BitShiftRightWithZeroAssignmentOperatorContext _localctx = new BitShiftRightWithZeroAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_bitShiftRightWithZeroAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2737; Match(URSHIFT_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitAndAssignmentOperatorContext : ParserRuleContext {
		public BitAndAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitAndAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitAndAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitAndAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitAndAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitAndAssignmentOperatorContext bitAndAssignmentOperator() {
		BitAndAssignmentOperatorContext _localctx = new BitAndAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_bitAndAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2739; Match(AND_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitXOrAssignmentOperatorContext : ParserRuleContext {
		public BitXOrAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitXOrAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitXOrAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitXOrAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitXOrAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitXOrAssignmentOperatorContext bitXOrAssignmentOperator() {
		BitXOrAssignmentOperatorContext _localctx = new BitXOrAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_bitXOrAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2741; Match(XOR_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOrAssignmentOperatorContext : ParserRuleContext {
		public BitOrAssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOrAssignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitOrAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitOrAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOrAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOrAssignmentOperatorContext bitOrAssignmentOperator() {
		BitOrAssignmentOperatorContext _localctx = new BitOrAssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 454, RULE_bitOrAssignmentOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2743; Match(OR_ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 456, RULE_conditionalExpression);
		try {
			State = 2752;
			switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2745; conditionalOrExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2746; conditionalOrExpression(0);
				State = 2747; Match(QUESTION);
				State = 2748; expression();
				State = 2749; Match(COLON);
				State = 2750; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public AndOrOperatorsContext andOrOperators() {
			return GetRuleContext<AndOrOperatorsContext>(0);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 458;
		EnterRecursionRule(_localctx, 458, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2755; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2763;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2757;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2758; andOrOperators();
					State = 2759; conditionalAndExpression(0);
					}
					} 
				}
				State = 2765;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public AndOrOperatorsContext andOrOperators() {
			return GetRuleContext<AndOrOperatorsContext>(0);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 460;
		EnterRecursionRule(_localctx, 460, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2767; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2775;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2769;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2770; andOrOperators();
					State = 2771; inclusiveOrExpression(0);
					}
					} 
				}
				State = 2777;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public AndOrOperatorsContext andOrOperators() {
			return GetRuleContext<AndOrOperatorsContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 462;
		EnterRecursionRule(_localctx, 462, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2779; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2787;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2781;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2782; andOrOperators();
					State = 2783; exclusiveOrExpression(0);
					}
					} 
				}
				State = 2789;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 464;
		EnterRecursionRule(_localctx, 464, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2791; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2798;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2793;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2794; Match(T__0);
					State = 2795; andExpression(0);
					}
					} 
				}
				State = 2800;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndOrOperatorsContext andOrOperators() {
			return GetRuleContext<AndOrOperatorsContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 466;
		EnterRecursionRule(_localctx, 466, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2802; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2810;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2804;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2805; andOrOperators();
					State = 2806; equalityExpression(0);
					}
					} 
				}
				State = 2812;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,306,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndOrOperatorsContext : ParserRuleContext {
		public LogicalOrOperatorContext logicalOrOperator() {
			return GetRuleContext<LogicalOrOperatorContext>(0);
		}
		public LogicalAndOperatorContext logicalAndOperator() {
			return GetRuleContext<LogicalAndOperatorContext>(0);
		}
		public BitwiseInclusiveOrOperatorContext bitwiseInclusiveOrOperator() {
			return GetRuleContext<BitwiseInclusiveOrOperatorContext>(0);
		}
		public BitwiseExclusiveOrOperatorContext bitwiseExclusiveOrOperator() {
			return GetRuleContext<BitwiseExclusiveOrOperatorContext>(0);
		}
		public BitwiseAndOperatorContext bitwiseAndOperator() {
			return GetRuleContext<BitwiseAndOperatorContext>(0);
		}
		public AndOrOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOrOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAndOrOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAndOrOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOrOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOrOperatorsContext andOrOperators() {
		AndOrOperatorsContext _localctx = new AndOrOperatorsContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_andOrOperators);
		try {
			State = 2818;
			switch (_input.La(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2813; logicalOrOperator();
				}
				break;
			case AND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2814; logicalAndOperator();
				}
				break;
			case BITOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2815; bitwiseInclusiveOrOperator();
				}
				break;
			case CARET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2816; bitwiseExclusiveOrOperator();
				}
				break;
			case BITAND:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2817; bitwiseAndOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrOperatorContext : ParserRuleContext {
		public LogicalOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLogicalOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLogicalOrOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrOperatorContext logicalOrOperator() {
		LogicalOrOperatorContext _localctx = new LogicalOrOperatorContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_logicalOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2820; Match(OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndOperatorContext : ParserRuleContext {
		public LogicalAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLogicalAndOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLogicalAndOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndOperatorContext logicalAndOperator() {
		LogicalAndOperatorContext _localctx = new LogicalAndOperatorContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_logicalAndOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2822; Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseInclusiveOrOperatorContext : ParserRuleContext {
		public BitwiseInclusiveOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseInclusiveOrOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitwiseInclusiveOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitwiseInclusiveOrOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseInclusiveOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseInclusiveOrOperatorContext bitwiseInclusiveOrOperator() {
		BitwiseInclusiveOrOperatorContext _localctx = new BitwiseInclusiveOrOperatorContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_bitwiseInclusiveOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2824; Match(BITOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseExclusiveOrOperatorContext : ParserRuleContext {
		public BitwiseExclusiveOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseExclusiveOrOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitwiseExclusiveOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitwiseExclusiveOrOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseExclusiveOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseExclusiveOrOperatorContext bitwiseExclusiveOrOperator() {
		BitwiseExclusiveOrOperatorContext _localctx = new BitwiseExclusiveOrOperatorContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_bitwiseExclusiveOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; Match(CARET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOperatorContext : ParserRuleContext {
		public BitwiseAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBitwiseAndOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBitwiseAndOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOperatorContext bitwiseAndOperator() {
		BitwiseAndOperatorContext _localctx = new BitwiseAndOperatorContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_bitwiseAndOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2828; Match(BITAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualOperatorContext equalOperator() {
			return GetRuleContext<EqualOperatorContext>(0);
		}
		public NotEqualOperatorContext notEqualOperator() {
			return GetRuleContext<NotEqualOperatorContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 480;
		EnterRecursionRule(_localctx, 480, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2831; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2843;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2841;
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2833;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2834; equalOperator();
						State = 2835; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2837;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2838; notEqualOperator();
						State = 2839; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2845;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 482;
		EnterRecursionRule(_localctx, 482, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2847; shiftExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2858;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2856;
					switch ( Interpreter.AdaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2849;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2850; compareOperator();
						State = 2851; shiftExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2853;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2854; Match(INSTANCEOF);
						State = 2855; referenceType();
						}
						break;
					}
					} 
				}
				State = 2860;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,311,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualOperatorContext : ParserRuleContext {
		public EqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEqualOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEqualOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualOperatorContext equalOperator() {
		EqualOperatorContext _localctx = new EqualOperatorContext(_ctx, State);
		EnterRule(_localctx, 484, RULE_equalOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2861; Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotEqualOperatorContext : ParserRuleContext {
		public NotEqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notEqualOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNotEqualOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNotEqualOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotEqualOperatorContext notEqualOperator() {
		NotEqualOperatorContext _localctx = new NotEqualOperatorContext(_ctx, State);
		EnterRule(_localctx, 486, RULE_notEqualOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2863; Match(NOTEQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LesserThanOperatorContext : ParserRuleContext {
		public LesserThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lesserThanOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLesserThanOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLesserThanOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesserThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LesserThanOperatorContext lesserThanOperator() {
		LesserThanOperatorContext _localctx = new LesserThanOperatorContext(_ctx, State);
		EnterRule(_localctx, 488, RULE_lesserThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2865; Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreaterThanOperatorContext : ParserRuleContext {
		public GreaterThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greaterThanOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterGreaterThanOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitGreaterThanOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreaterThanOperatorContext greaterThanOperator() {
		GreaterThanOperatorContext _localctx = new GreaterThanOperatorContext(_ctx, State);
		EnterRule(_localctx, 490, RULE_greaterThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2867; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LesserOrEqualToOperatorContext : ParserRuleContext {
		public LesserOrEqualToOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lesserOrEqualToOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLesserOrEqualToOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLesserOrEqualToOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesserOrEqualToOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LesserOrEqualToOperatorContext lesserOrEqualToOperator() {
		LesserOrEqualToOperatorContext _localctx = new LesserOrEqualToOperatorContext(_ctx, State);
		EnterRule(_localctx, 492, RULE_lesserOrEqualToOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2869; Match(LE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreaterOrEqualToOperatorContext : ParserRuleContext {
		public GreaterOrEqualToOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greaterOrEqualToOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterGreaterOrEqualToOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitGreaterOrEqualToOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterOrEqualToOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreaterOrEqualToOperatorContext greaterOrEqualToOperator() {
		GreaterOrEqualToOperatorContext _localctx = new GreaterOrEqualToOperatorContext(_ctx, State);
		EnterRule(_localctx, 494, RULE_greaterOrEqualToOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871; Match(GE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		public LesserThanOperatorContext lesserThanOperator() {
			return GetRuleContext<LesserThanOperatorContext>(0);
		}
		public GreaterThanOperatorContext greaterThanOperator() {
			return GetRuleContext<GreaterThanOperatorContext>(0);
		}
		public LesserOrEqualToOperatorContext lesserOrEqualToOperator() {
			return GetRuleContext<LesserOrEqualToOperatorContext>(0);
		}
		public GreaterOrEqualToOperatorContext greaterOrEqualToOperator() {
			return GetRuleContext<GreaterOrEqualToOperatorContext>(0);
		}
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(_ctx, State);
		EnterRule(_localctx, 496, RULE_compareOperator);
		try {
			State = 2877;
			switch (_input.La(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2873; lesserThanOperator();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2874; greaterThanOperator();
				}
				break;
			case LE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2875; lesserOrEqualToOperator();
				}
				break;
			case GE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2876; greaterOrEqualToOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftLeftOperatorContext shiftLeftOperator() {
			return GetRuleContext<ShiftLeftOperatorContext>(0);
		}
		public ShiftRightOperatorContext shiftRightOperator() {
			return GetRuleContext<ShiftRightOperatorContext>(0);
		}
		public ShiftRightWithZeroOperatorContext shiftRightWithZeroOperator() {
			return GetRuleContext<ShiftRightWithZeroOperatorContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(_ctx, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 498;
		EnterRecursionRule(_localctx, 498, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2880; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2896;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2894;
					switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2882;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2883; shiftLeftOperator();
						State = 2884; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2886;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2887; shiftRightOperator();
						State = 2888; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2890;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2891; shiftRightWithZeroOperator();
						State = 2892; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2898;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftLeftOperatorContext : ParserRuleContext {
		public ShiftLeftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftLeftOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftLeftOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftLeftOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftLeftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftLeftOperatorContext shiftLeftOperator() {
		ShiftLeftOperatorContext _localctx = new ShiftLeftOperatorContext(_ctx, State);
		EnterRule(_localctx, 500, RULE_shiftLeftOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2899; Match(LT);
			State = 2900; Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRightOperatorContext : ParserRuleContext {
		public ShiftRightOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRightOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftRightOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftRightOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftRightOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftRightOperatorContext shiftRightOperator() {
		ShiftRightOperatorContext _localctx = new ShiftRightOperatorContext(_ctx, State);
		EnterRule(_localctx, 502, RULE_shiftRightOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2902; Match(GT);
			State = 2903; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftRightWithZeroOperatorContext : ParserRuleContext {
		public ShiftRightWithZeroOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftRightWithZeroOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftRightWithZeroOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftRightWithZeroOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftRightWithZeroOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftRightWithZeroOperatorContext shiftRightWithZeroOperator() {
		ShiftRightWithZeroOperatorContext _localctx = new ShiftRightWithZeroOperatorContext(_ctx, State);
		EnterRule(_localctx, 504, RULE_shiftRightWithZeroOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; Match(GT);
			State = 2906; Match(GT);
			State = 2907; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditionOperatorContext additionOperator() {
			return GetRuleContext<AdditionOperatorContext>(0);
		}
		public SubstractionOperatorContext substractionOperator() {
			return GetRuleContext<SubstractionOperatorContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 506;
		EnterRecursionRule(_localctx, 506, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2910; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2922;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2920;
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2912;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2913; additionOperator();
						State = 2914; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2916;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2917; substractionOperator();
						State = 2918; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2924;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MuliplyOperatorContext muliplyOperator() {
			return GetRuleContext<MuliplyOperatorContext>(0);
		}
		public DivisionOperatorContext divisionOperator() {
			return GetRuleContext<DivisionOperatorContext>(0);
		}
		public ReminderOperatorContext reminderOperator() {
			return GetRuleContext<ReminderOperatorContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 508;
		EnterRecursionRule(_localctx, 508, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2926; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2942;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,318,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2940;
					switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2928;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2929; muliplyOperator();
						State = 2930; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2932;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2933; divisionOperator();
						State = 2934; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2936;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2937; reminderOperator();
						State = 2938; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2944;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,318,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditionOperatorContext : ParserRuleContext {
		public AdditionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditionOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditionOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOperatorContext additionOperator() {
		AdditionOperatorContext _localctx = new AdditionOperatorContext(_ctx, State);
		EnterRule(_localctx, 510, RULE_additionOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstractionOperatorContext : ParserRuleContext {
		public SubstractionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substractionOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSubstractionOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSubstractionOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstractionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstractionOperatorContext substractionOperator() {
		SubstractionOperatorContext _localctx = new SubstractionOperatorContext(_ctx, State);
		EnterRule(_localctx, 512, RULE_substractionOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2947; Match(SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MuliplyOperatorContext : ParserRuleContext {
		public MuliplyOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_muliplyOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMuliplyOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMuliplyOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMuliplyOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MuliplyOperatorContext muliplyOperator() {
		MuliplyOperatorContext _localctx = new MuliplyOperatorContext(_ctx, State);
		EnterRule(_localctx, 514, RULE_muliplyOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2949; Match(MUL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionOperatorContext : ParserRuleContext {
		public DivisionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisionOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDivisionOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDivisionOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionOperatorContext divisionOperator() {
		DivisionOperatorContext _localctx = new DivisionOperatorContext(_ctx, State);
		EnterRule(_localctx, 516, RULE_divisionOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2951; Match(DIV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReminderOperatorContext : ParserRuleContext {
		public ReminderOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reminderOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReminderOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReminderOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReminderOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReminderOperatorContext reminderOperator() {
		ReminderOperatorContext _localctx = new ReminderOperatorContext(_ctx, State);
		EnterRule(_localctx, 518, RULE_reminderOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953; Match(MOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PreIncrementOperatorContext preIncrementOperator() {
			return GetRuleContext<PreIncrementOperatorContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementOperatorContext preDecrementOperator() {
			return GetRuleContext<PreDecrementOperatorContext>(0);
		}
		public UnaryPlusOperatorContext unaryPlusOperator() {
			return GetRuleContext<UnaryPlusOperatorContext>(0);
		}
		public UnaryMinusOperatorContext unaryMinusOperator() {
			return GetRuleContext<UnaryMinusOperatorContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 520, RULE_unaryExpression);
		try {
			State = 2968;
			switch (_input.La(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2955; preIncrementOperator();
				State = 2956; unaryExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2958; preDecrementOperator();
				State = 2959; unaryExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2961; unaryPlusOperator();
				State = 2962; unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2964; unaryMinusOperator();
				State = 2965; unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2967; unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryPlusOperatorContext : ParserRuleContext {
		public UnaryPlusOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryPlusOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryPlusOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryPlusOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlusOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryPlusOperatorContext unaryPlusOperator() {
		UnaryPlusOperatorContext _localctx = new UnaryPlusOperatorContext(_ctx, State);
		EnterRule(_localctx, 522, RULE_unaryPlusOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2970; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryMinusOperatorContext : ParserRuleContext {
		public UnaryMinusOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryMinusOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryMinusOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryMinusOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryMinusOperatorContext unaryMinusOperator() {
		UnaryMinusOperatorContext _localctx = new UnaryMinusOperatorContext(_ctx, State);
		EnterRule(_localctx, 524, RULE_unaryMinusOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2972; Match(SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementOperatorContext : ParserRuleContext {
		public PreIncrementOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreIncrementOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreIncrementOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementOperatorContext preIncrementOperator() {
		PreIncrementOperatorContext _localctx = new PreIncrementOperatorContext(_ctx, State);
		EnterRule(_localctx, 526, RULE_preIncrementOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2974; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementOperatorContext : ParserRuleContext {
		public PreDecrementOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreDecrementOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreDecrementOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementOperatorContext preDecrementOperator() {
		PreDecrementOperatorContext _localctx = new PreDecrementOperatorContext(_ctx, State);
		EnterRule(_localctx, 528, RULE_preDecrementOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2976; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		public PreIncrementOperatorContext preIncrementOperator() {
			return GetRuleContext<PreIncrementOperatorContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 530, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2978; preIncrementOperator();
			State = 2979; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		public PreDecrementOperatorContext preDecrementOperator() {
			return GetRuleContext<PreDecrementOperatorContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 532, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981; preDecrementOperator();
			State = 2982; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreBitwiseNegationOperatorContext : ParserRuleContext {
		public PreBitwiseNegationOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preBitwiseNegationOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreBitwiseNegationOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreBitwiseNegationOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreBitwiseNegationOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreBitwiseNegationOperatorContext preBitwiseNegationOperator() {
		PreBitwiseNegationOperatorContext _localctx = new PreBitwiseNegationOperatorContext(_ctx, State);
		EnterRule(_localctx, 534, RULE_preBitwiseNegationOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2984; Match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreLogicalNegationOperatorContext : ParserRuleContext {
		public PreLogicalNegationOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preLogicalNegationOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreLogicalNegationOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreLogicalNegationOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreLogicalNegationOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreLogicalNegationOperatorContext preLogicalNegationOperator() {
		PreLogicalNegationOperatorContext _localctx = new PreLogicalNegationOperatorContext(_ctx, State);
		EnterRule(_localctx, 536, RULE_preLogicalNegationOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2986; Match(BANG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PreBitwiseNegationOperatorContext preBitwiseNegationOperator() {
			return GetRuleContext<PreBitwiseNegationOperatorContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreLogicalNegationOperatorContext preLogicalNegationOperator() {
			return GetRuleContext<PreLogicalNegationOperatorContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 538, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2996;
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2988; postfixExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2989; preBitwiseNegationOperator();
				State = 2990; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2992; preLogicalNegationOperator();
				State = 2993; unaryExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2995; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 540, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3000;
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2998; primary();
				}
				break;

			case 2:
				{
				State = 2999; expressionName();
				}
				break;
			}
			State = 3006;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,323,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 3004;
					switch (_input.La(1)) {
					case INC:
						{
						State = 3002; postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 3003; postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 3008;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,323,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 542, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009; postfixExpression();
			State = 3010; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 544, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3012; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 546, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3014; postfixExpression();
			State = 3015; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 548, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, State);
		EnterRule(_localctx, 550, RULE_castExpression);
		int _la;
		try {
			State = 3046;
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019; Match(LPAREN);
				State = 3020; primitiveType();
				State = 3021; Match(RPAREN);
				State = 3022; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3024; Match(LPAREN);
				State = 3025; referenceType();
				State = 3029;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 3026; additionalBound();
					}
					}
					State = 3031;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3032; Match(RPAREN);
				State = 3033; unaryExpressionNotPlusMinus();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3035; Match(LPAREN);
				State = 3036; referenceType();
				State = 3040;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 3037; additionalBound();
					}
					}
					State = 3042;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3043; Match(RPAREN);
				State = 3044; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return packageName_sempred((PackageNameContext)_localctx, predIndex);

		case 28: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);

		case 31: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);

		case 229: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 230: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 231: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 232: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 233: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 240: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 241: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 249: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);

		case 253: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 254: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);

		case 14: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(_ctx, 2);

		case 16: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3n\xBEB\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x22F\n\x3"+
		"\x3\x4\a\x4\x232\n\x4\f\x4\xE\x4\x235\v\x4\x3\x4\x3\x4\a\x4\x239\n\x4"+
		"\f\x4\xE\x4\x23C\v\x4\x3\x4\x5\x4\x23F\n\x4\x3\x5\x3\x5\x5\x5\x243\n\x5"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\x24C\n\b\x3\t\x3\t\x5\t\x250"+
		"\n\t\x3\t\x3\t\a\t\x254\n\t\f\t\xE\t\x257\v\t\x3\n\a\n\x25A\n\n\f\n\xE"+
		"\n\x25D\v\n\x3\n\x3\n\x5\n\x261\n\n\x3\n\x3\n\x3\n\a\n\x266\n\n\f\n\xE"+
		"\n\x269\v\n\x3\n\x3\n\x5\n\x26D\n\n\x5\n\x26F\n\n\x3\v\x3\v\a\v\x273\n"+
		"\v\f\v\xE\v\x276\v\v\x3\v\x3\v\x5\v\x27A\n\v\x3\f\a\f\x27D\n\f\f\f\xE"+
		"\f\x280\v\f\x3\f\x3\f\x5\f\x284\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\a\x10\x28D\n\x10\f\x10\xE\x10\x290\v\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x29D\n"+
		"\x11\x3\x12\a\x12\x2A0\n\x12\f\x12\xE\x12\x2A3\v\x12\x3\x12\x3\x12\x3"+
		"\x12\a\x12\x2A8\n\x12\f\x12\xE\x12\x2AB\v\x12\x3\x12\x3\x12\a\x12\x2AF"+
		"\n\x12\f\x12\xE\x12\x2B2\v\x12\x3\x13\a\x13\x2B5\n\x13\f\x13\xE\x13\x2B8"+
		"\v\x13\x3\x13\x3\x13\x5\x13\x2BC\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\a\x15\x2C5\n\x15\f\x15\xE\x15\x2C8\v\x15\x5\x15\x2CA"+
		"\n\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x18\a\x18\x2D6\n\x18\f\x18\xE\x18\x2D9\v\x18\x3\x19\x3\x19\x5\x19"+
		"\x2DD\n\x19\x3\x1A\a\x1A\x2E0\n\x1A\f\x1A\xE\x1A\x2E3\v\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x2E7\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2ED\n\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x2F5\n\x1C\f\x1C\xE\x1C"+
		"\x2F8\v\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2FF\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x307\n\x1E\f\x1E\xE\x1E\x30A"+
		"\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x311\n\x1F\x3 \x3 \x3"+
		"!\x3!\x3!\x3!\x3!\x3!\a!\x31B\n!\f!\xE!\x31E\v!\x3\"\x5\"\x321\n\"\x3"+
		"\"\a\"\x324\n\"\f\"\xE\"\x327\v\"\x3\"\a\"\x32A\n\"\f\"\xE\"\x32D\v\""+
		"\x3\"\x3\"\x3#\a#\x332\n#\f#\xE#\x335\v#\x3#\x3#\x3#\x3#\a#\x33B\n#\f"+
		"#\xE#\x33E\v#\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x5%\x348\n%\x3&\x3&\x3&"+
		"\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3"+
		")\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x5*\x365\n*\x3+\x3+\x5+\x369\n+\x3,"+
		"\a,\x36C\n,\f,\xE,\x36F\v,\x3,\x3,\x3,\x5,\x374\n,\x3,\x5,\x377\n,\x3"+
		",\x5,\x37A\n,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x386\n-\x3."+
		"\x3.\x3.\x3.\x3/\x3/\x3/\a/\x38F\n/\f/\xE/\x392\v/\x3\x30\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\a\x32\x39D\n\x32\f\x32\xE\x32"+
		"\x3A0\v\x32\x3\x33\x3\x33\a\x33\x3A4\n\x33\f\x33\xE\x33\x3A7\v\x33\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x3AF\n\x34\x3\x35\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\x5\x35\x3B6\n\x35\x3\x36\a\x36\x3B9\n\x36\f\x36"+
		"\xE\x36\x3BC\v\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x3CA\n\x37\x3\x38\x3\x38\x3\x38"+
		"\a\x38\x3CF\n\x38\f\x38\xE\x38\x3D2\v\x38\x3\x39\x3\x39\x3\x39\x5\x39"+
		"\x3D7\n\x39\x3:\x3:\x5:\x3DB\n:\x3;\x3;\x5;\x3DF\n;\x3<\x3<\x5<\x3E3\n"+
		"<\x3=\x3=\x5=\x3E7\n=\x3>\x3>\x3>\x5>\x3EC\n>\x3?\x3?\x5?\x3F0\n?\x3?"+
		"\x3?\a?\x3F4\n?\f?\xE?\x3F7\v?\x3@\x3@\x5@\x3FB\n@\x3@\x3@\x3@\a@\x400"+
		"\n@\f@\xE@\x403\v@\x3@\x3@\x5@\x407\n@\x5@\x409\n@\x3\x41\x3\x41\a\x41"+
		"\x40D\n\x41\f\x41\xE\x41\x410\v\x41\x3\x41\x3\x41\x5\x41\x414\n\x41\x3"+
		"\x42\x3\x42\x5\x42\x418\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45"+
		"\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x42B\nG\x3H\aH"+
		"\x42E\nH\fH\xEH\x431\vH\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3"+
		"I\x3I\x5I\x440\nI\x3J\x3J\x3J\x5J\x445\nJ\x3J\x3J\aJ\x449\nJ\fJ\xEJ\x44C"+
		"\vJ\x3J\x3J\x3J\x5J\x451\nJ\x5J\x453\nJ\x3K\x3K\x5K\x457\nK\x3L\x3L\x3"+
		"L\x5L\x45C\nL\x3L\x3L\x5L\x460\nL\x3M\x3M\x3M\x3M\x3M\x5M\x467\nM\x3N"+
		"\x3N\x3N\aN\x46C\nN\fN\xEN\x46F\vN\x3N\x3N\x3N\aN\x474\nN\fN\xEN\x477"+
		"\vN\x5N\x479\nN\x3O\aO\x47C\nO\fO\xEO\x47F\vO\x3O\x3O\x3O\x3P\x3P\x5P"+
		"\x486\nP\x3Q\aQ\x489\nQ\fQ\xEQ\x48C\vQ\x3Q\x3Q\aQ\x490\nQ\fQ\xEQ\x493"+
		"\vQ\x3Q\x3Q\x3Q\x3Q\x5Q\x499\nQ\x3R\aR\x49C\nR\fR\xER\x49F\vR\x3R\x3R"+
		"\x3R\x5R\x4A4\nR\x3R\x3R\x3S\x3S\x3S\x3T\x3T\x3T\aT\x4AE\nT\fT\xET\x4B1"+
		"\vT\x3U\x3U\x5U\x4B5\nU\x3V\x3V\x5V\x4B9\nV\x3W\x3W\x3X\x3X\x3X\x3Y\a"+
		"Y\x4C1\nY\fY\xEY\x4C4\vY\x3Y\x3Y\x5Y\x4C8\nY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5"+
		"Z\x4D0\nZ\x3[\x5[\x4D3\n[\x3[\x3[\x3[\x5[\x4D8\n[\x3[\x3[\x3\\\x3\\\x3"+
		"]\x3]\x5]\x4E0\n]\x3]\x5]\x4E3\n]\x3]\x3]\x3^\x5^\x4E8\n^\x3^\x3^\x3^"+
		"\x5^\x4ED\n^\x3^\x3^\x3^\x5^\x4F2\n^\x3^\x3^\x3^\x5^\x4F7\n^\x3^\x3^\x3"+
		"^\x3^\x3^\x5^\x4FE\n^\x3^\x3^\x3^\x5^\x503\n^\x3^\x3^\x3^\x3^\x3^\x3^"+
		"\x5^\x50B\n^\x3^\x3^\x3^\x5^\x510\n^\x3^\x3^\x3^\x5^\x515\n^\x3_\a_\x518"+
		"\n_\f_\xE_\x51B\v_\x3_\x3_\x3_\x5_\x520\n_\x3_\x3_\x3`\x3`\x5`\x526\n"+
		"`\x3`\x5`\x529\n`\x3`\x5`\x52C\n`\x3`\x3`\x3\x61\x3\x61\x3\x61\a\x61\x533"+
		"\n\x61\f\x61\xE\x61\x536\v\x61\x3\x62\a\x62\x539\n\x62\f\x62\xE\x62\x53C"+
		"\v\x62\x3\x62\x3\x62\x3\x62\x5\x62\x541\n\x62\x3\x62\x5\x62\x544\n\x62"+
		"\x3\x62\x5\x62\x547\n\x62\x3\x63\x3\x63\x3\x64\x3\x64\a\x64\x54D\n\x64"+
		"\f\x64\xE\x64\x550\v\x64\x3\x65\x3\x65\x5\x65\x554\n\x65\x3\x66\a\x66"+
		"\x557\n\x66\f\x66\xE\x66\x55A\v\x66\x3\x66\x3\x66\x3\x66\x5\x66\x55F\n"+
		"\x66\x3\x66\x5\x66\x562\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x5g\x56D\ng\x3h\x3h\x3h\x3i\x3i\ai\x574\ni\fi\xEi\x577\vi\x3i\x3i\x3"+
		"j\x3j\x3j\x3j\x3j\x5j\x580\nj\x3k\ak\x583\nk\fk\xEk\x586\vk\x3k\x3k\x3"+
		"k\x3k\x3l\x3l\x3l\x3l\x5l\x590\nl\x3m\am\x593\nm\fm\xEm\x596\vm\x3m\x3"+
		"m\x3m\x3n\x3n\x3n\x3n\x3n\x3n\x5n\x5A1\nn\x3o\ao\x5A4\no\fo\xEo\x5A7\v"+
		"o\x3o\x3o\x3o\x3o\x3o\x3p\x3p\ap\x5B0\np\fp\xEp\x5B3\vp\x3p\x3p\x3q\x3"+
		"q\x3q\x3q\x3q\x5q\x5BC\nq\x3r\ar\x5BF\nr\fr\xEr\x5C2\vr\x3r\x3r\x3r\x3"+
		"r\x3r\x5r\x5C9\nr\x3r\x5r\x5CC\nr\x3r\x3r\x3s\x3s\x3s\x5s\x5D3\ns\x3t"+
		"\x3t\x3t\x3u\x3u\x3u\x5u\x5DB\nu\x3v\x3v\x3v\x3v\x5v\x5E1\nv\x3v\x3v\x3"+
		"w\x3w\x3w\aw\x5E8\nw\fw\xEw\x5EB\vw\x3x\x3x\x3x\x3x\x3y\x3y\x3y\x5y\x5F4"+
		"\ny\x3z\x3z\x5z\x5F8\nz\x3z\x5z\x5FB\nz\x3z\x3z\x3{\x3{\x3{\a{\x602\n"+
		"{\f{\xE{\x605\v{\x3|\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x3~\x3~\x5~\x612"+
		"\n~\x3~\x5~\x615\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\a\x7F\x61C\n\x7F\f\x7F"+
		"\xE\x7F\x61F\v\x7F\x3\x80\x3\x80\x5\x80\x623\n\x80\x3\x80\x3\x80\x3\x81"+
		"\x3\x81\a\x81\x629\n\x81\f\x81\xE\x81\x62C\v\x81\x3\x82\x3\x82\x3\x82"+
		"\x5\x82\x631\n\x82\x3\x83\x3\x83\x3\x83\x3\x84\a\x84\x637\n\x84\f\x84"+
		"\xE\x84\x63A\v\x84\x3\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3"+
		"\x85\x3\x85\x5\x85\x645\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86"+
		"\x64C\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\x5\x87\x65A\n\x87\x3\x88\x3\x88\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8C"+
		"\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x670\n\x8C\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3"+
		"\x90\x5\x90\x692\n\x90\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x92"+
		"\x3\x92\a\x92\x69C\n\x92\f\x92\xE\x92\x69F\v\x92\x3\x92\a\x92\x6A2\n\x92"+
		"\f\x92\xE\x92\x6A5\v\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x94\x3"+
		"\x94\a\x94\x6AE\n\x94\f\x94\xE\x94\x6B1\v\x94\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\x6BD\n\x95\x3\x96"+
		"\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x98\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99"+
		"\x3\x99\x3\x9A\x3\x9A\x5\x9A\x6D7\n\x9A\x3\x9B\x3\x9B\x5\x9B\x6DB\n\x9B"+
		"\x3\x9C\x3\x9C\x3\x9C\x5\x9C\x6E0\n\x9C\x3\x9C\x3\x9C\x5\x9C\x6E4\n\x9C"+
		"\x3\x9C\x3\x9C\x5\x9C\x6E8\n\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3"+
		"\x9D\x5\x9D\x6F0\n\x9D\x3\x9D\x3\x9D\x5\x9D\x6F4\n\x9D\x3\x9D\x3\x9D\x5"+
		"\x9D\x6F8\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x6FF\n\x9E\x3"+
		"\x9F\x3\x9F\x3\xA0\x3\xA0\x3\xA0\a\xA0\x706\n\xA0\f\xA0\xE\xA0\x709\v"+
		"\xA0\x3\xA1\x3\xA1\x3\xA1\a\xA1\x70E\n\xA1\f\xA1\xE\xA1\x711\v\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\a"+
		"\xA2\x71D\n\xA2\f\xA2\xE\xA2\x720\v\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x5\xA3\x72B\n\xA3\x3\xA3\x3\xA3\x3\xA4"+
		"\x3\xA4\x5\xA4\x731\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x737\n\xA5"+
		"\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7"+
		"\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\x74C\n\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x751\n\xA8\x3\xA9\x3\xA9\a\xA9"+
		"\x755\n\xA9\f\xA9\xE\xA9\x758\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA"+
		"\x3\xAA\x3\xAB\a\xAB\x761\n\xAB\f\xAB\xE\xAB\x764\v\xAB\x3\xAB\x3\xAB"+
		"\x3\xAB\x3\xAC\x3\xAC\x3\xAC\a\xAC\x76C\n\xAC\f\xAC\xE\xAC\x76F\v\xAC"+
		"\x3\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x778\n\xAE\x3"+
		"\xAE\x5\xAE\x77B\n\xAE\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x780\n\xAF\x3\xAF\x3"+
		"\xAF\x3\xB0\x3\xB0\x3\xB0\a\xB0\x787\n\xB0\f\xB0\xE\xB0\x78A\v\xB0\x3"+
		"\xB1\a\xB1\x78D\n\xB1\f\xB1\xE\xB1\x790\v\xB1\x3\xB1\x3\xB1\x3\xB1\x3"+
		"\xB1\x3\xB1\x3\xB2\x3\xB2\x5\xB2\x799\n\xB2\x3\xB2\a\xB2\x79C\n\xB2\f"+
		"\xB2\xE\xB2\x79F\v\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\a\xB3\x7A5\n\xB3\f"+
		"\xB3\xE\xB3\x7A8\v\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\x7BE\n\xB3\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3"+
		"\xB5\x3\xB5\a\xB5\x7C6\n\xB5\f\xB5\xE\xB5\x7C9\v\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3"+
		"\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x7DE\n\xB5\x3\xB6"+
		"\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\x7E5\n\xB6\x3\xB7\x3\xB7\x3\xB8\x3"+
		"\xB8\x3\xB8\x3\xB8\x5\xB8\x7ED\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9"+
		"\x7F3\n\xB9\f\xB9\xE\xB9\x7F6\v\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\a\xB9\x7FE\n\xB9\f\xB9\xE\xB9\x801\v\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x817\n\xB9\x3"+
		"\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\a\xBB\x81F\n\xBB\f\xBB\xE\xBB"+
		"\x822\v\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\a\xBB\x82A\n\xBB"+
		"\f\xBB\xE\xBB\x82D\v\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x5\xBB\x842\n\xBB\x3\xBC\x3\xBC\x5\xBC\x846\n\xBC\x3"+
		"\xBC\a\xBC\x849\n\xBC\f\xBC\xE\xBC\x84C\v\xBC\x3\xBC\x3\xBC\x3\xBC\a\xBC"+
		"\x851\n\xBC\f\xBC\xE\xBC\x854\v\xBC\x3\xBC\a\xBC\x857\n\xBC\f\xBC\xE\xBC"+
		"\x85A\v\xBC\x3\xBC\x5\xBC\x85D\n\xBC\x3\xBC\x3\xBC\x5\xBC\x861\n\xBC\x3"+
		"\xBC\x3\xBC\x5\xBC\x865\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x86B"+
		"\n\xBC\x3\xBC\a\xBC\x86E\n\xBC\f\xBC\xE\xBC\x871\v\xBC\x3\xBC\x3\xBC\x5"+
		"\xBC\x875\n\xBC\x3\xBC\x3\xBC\x5\xBC\x879\n\xBC\x3\xBC\x3\xBC\x5\xBC\x87D"+
		"\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x883\n\xBC\x3\xBC\a\xBC\x886"+
		"\n\xBC\f\xBC\xE\xBC\x889\v\xBC\x3\xBC\x3\xBC\x5\xBC\x88D\n\xBC\x3\xBC"+
		"\x3\xBC\x5\xBC\x891\n\xBC\x3\xBC\x3\xBC\x5\xBC\x895\n\xBC\x5\xBC\x897"+
		"\n\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\x89C\n\xBD\x3\xBD\a\xBD\x89F\n\xBD"+
		"\f\xBD\xE\xBD\x8A2\v\xBD\x3\xBD\x3\xBD\x5\xBD\x8A6\n\xBD\x3\xBD\x3\xBD"+
		"\x5\xBD\x8AA\n\xBD\x3\xBD\x3\xBD\x5\xBD\x8AE\n\xBD\x3\xBE\x3\xBE\x5\xBE"+
		"\x8B2\n\xBE\x3\xBE\a\xBE\x8B5\n\xBE\f\xBE\xE\xBE\x8B8\v\xBE\x3\xBE\x3"+
		"\xBE\x3\xBE\a\xBE\x8BD\n\xBE\f\xBE\xE\xBE\x8C0\v\xBE\x3\xBE\a\xBE\x8C3"+
		"\n\xBE\f\xBE\xE\xBE\x8C6\v\xBE\x3\xBE\x5\xBE\x8C9\n\xBE\x3\xBE\x3\xBE"+
		"\x5\xBE\x8CD\n\xBE\x3\xBE\x3\xBE\x5\xBE\x8D1\n\xBE\x3\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x8D7\n\xBE\x3\xBE\a\xBE\x8DA\n\xBE\f\xBE\xE\xBE\x8DD\v"+
		"\xBE\x3\xBE\x3\xBE\x5\xBE\x8E1\n\xBE\x3\xBE\x3\xBE\x5\xBE\x8E5\n\xBE\x3"+
		"\xBE\x3\xBE\x5\xBE\x8E9\n\xBE\x5\xBE\x8EB\n\xBE\x3\xBF\x3\xBF\x3\xBF\x5"+
		"\xBF\x8F0\n\xBF\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x8FF\n\xC0\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x5"+
		"\xC2\x90D\n\xC2\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3"+
		"\x3\xC3\x3\xC3\x5\xC3\x919\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\a"+
		"\xC3\x920\n\xC3\f\xC3\xE\xC3\x923\v\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3"+
		"\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\a\xC4\x92F\n\xC4\f\xC4\xE\xC4"+
		"\x932\v\xC4\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3"+
		"\xC5\x3\xC5\x5\xC5\x93E\n\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\a\xC5"+
		"\x945\n\xC5\f\xC5\xE\xC5\x948\v\xC5\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x94D\n"+
		"\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x954\n\xC6\x3\xC6\x3\xC6"+
		"\x3\xC6\x5\xC6\x959\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x960"+
		"\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x965\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x96C\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x971\n\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x978\n\xC6\x3\xC6\x3\xC6\x3\xC6"+
		"\x5\xC6\x97D\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x985"+
		"\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x98A\n\xC6\x3\xC6\x3\xC6\x5\xC6\x98E"+
		"\n\xC6\x3\xC7\x3\xC7\x5\xC7\x992\n\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x997"+
		"\n\xC7\x3\xC7\x3\xC7\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x99E\n\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x9A5\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x9AA\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x9B1\n\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x5\xC8\x9B6\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x9BD\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x9C2\n\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x9CA\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x9CF\n\xC8\x3\xC8\x3\xC8\x5\xC8\x9D3\n\xC8\x3\xC9\x3\xC9\x3\xC9\a\xC9"+
		"\x9D8\n\xC9\f\xC9\xE\xC9\x9DB\v\xC9\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9E0\n"+
		"\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9E7\n\xCA\x3\xCA\x3\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9EE\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3"+
		"\xCA\x5\xCA\x9F5\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA"+
		"\x9FD\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\xA04\n\xCA\x3\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\xA0C\n\xCA\x3\xCB\x3\xCB\x5"+
		"\xCB\xA10\n\xCB\x3\xCB\x3\xCB\x3\xCC\x3\xCC\x3\xCC\x5\xCC\xA17\n\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\xA1E\n\xCC\x3\xCC\x3\xCC\x3\xCC"+
		"\x3\xCC\x3\xCC\x5\xCC\xA25\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x5\xCC\xA2D\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\xA34"+
		"\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\xA3C\n\xCC\x3"+
		"\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\xA42\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x5\xCD\xA48\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x3\xCD\x3\xCD\x5\xCD\xA54\n\xCD\x3\xCE\x3\xCE\a\xCE\xA58\n\xCE\f"+
		"\xCE\xE\xCE\xA5B\v\xCE\x3\xCF\a\xCF\xA5E\n\xCF\f\xCF\xE\xCF\xA61\v\xCF"+
		"\x3\xCF\x3\xCF\x3\xCF\x3\xCF\x3\xD0\x3\xD0\x3\xD1\x3\xD1\x5\xD1\xA6B\n"+
		"\xD1\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD3\x3\xD3\x3\xD3\x5\xD3\xA74\n\xD3"+
		"\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x3\xD3\x5\xD3\xA7B\n\xD3\x3\xD4\x3\xD4\x3"+
		"\xD4\a\xD4\xA80\n\xD4\f\xD4\xE\xD4\xA83\v\xD4\x3\xD5\x3\xD5\x5\xD5\xA87"+
		"\n\xD5\x3\xD6\x3\xD6\x5\xD6\xA8B\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3"+
		"\xD8\x3\xD8\x3\xD8\x5\xD8\xA94\n\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9"+
		"\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x3\xD9\x5\xD9\xAA2\n\xD9\x3"+
		"\xDA\x3\xDA\x3\xDB\x3\xDB\x3\xDC\x3\xDC\x3\xDD\x3\xDD\x3\xDE\x3\xDE\x3"+
		"\xDF\x3\xDF\x3\xE0\x3\xE0\x3\xE1\x3\xE1\x3\xE2\x3\xE2\x3\xE3\x3\xE3\x3"+
		"\xE4\x3\xE4\x3\xE5\x3\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3"+
		"\xE6\x5\xE6\xAC3\n\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7"+
		"\a\xE7\xACC\n\xE7\f\xE7\xE\xE7\xACF\v\xE7\x3\xE8\x3\xE8\x3\xE8\x3\xE8"+
		"\x3\xE8\x3\xE8\x3\xE8\a\xE8\xAD8\n\xE8\f\xE8\xE\xE8\xADB\v\xE8\x3\xE9"+
		"\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\x3\xE9\a\xE9\xAE4\n\xE9\f\xE9\xE\xE9"+
		"\xAE7\v\xE9\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEA\a\xEA\xAEF\n\xEA"+
		"\f\xEA\xE\xEA\xAF2\v\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3"+
		"\xEB\a\xEB\xAFB\n\xEB\f\xEB\xE\xEB\xAFE\v\xEB\x3\xEC\x3\xEC\x3\xEC\x3"+
		"\xEC\x3\xEC\x5\xEC\xB05\n\xEC\x3\xED\x3\xED\x3\xEE\x3\xEE\x3\xEF\x3\xEF"+
		"\x3\xF0\x3\xF0\x3\xF1\x3\xF1\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2"+
		"\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\a\xF2\xB1C\n\xF2\f\xF2\xE\xF2\xB1F"+
		"\v\xF2\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3\x3\xF3"+
		"\x3\xF3\a\xF3\xB2B\n\xF3\f\xF3\xE\xF3\xB2E\v\xF3\x3\xF4\x3\xF4\x3\xF5"+
		"\x3\xF5\x3\xF6\x3\xF6\x3\xF7\x3\xF7\x3\xF8\x3\xF8\x3\xF9\x3\xF9\x3\xFA"+
		"\x3\xFA\x3\xFA\x3\xFA\x5\xFA\xB40\n\xFA\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3"+
		"\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3\xFB\x3"+
		"\xFB\a\xFB\xB51\n\xFB\f\xFB\xE\xFB\xB54\v\xFB\x3\xFC\x3\xFC\x3\xFC\x3"+
		"\xFD\x3\xFD\x3\xFD\x3\xFE\x3\xFE\x3\xFE\x3\xFE\x3\xFF\x3\xFF\x3\xFF\x3"+
		"\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\a\xFF\xB6B\n\xFF"+
		"\f\xFF\xE\xFF\xB6E\v\xFF\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100"+
		"\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100\x3\x100"+
		"\a\x100\xB7F\n\x100\f\x100\xE\x100\xB82\v\x100\x3\x101\x3\x101\x3\x102"+
		"\x3\x102\x3\x103\x3\x103\x3\x104\x3\x104\x3\x105\x3\x105\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106\x3\x106"+
		"\x3\x106\x3\x106\x5\x106\xB9B\n\x106\x3\x107\x3\x107\x3\x108\x3\x108\x3"+
		"\x109\x3\x109\x3\x10A\x3\x10A\x3\x10B\x3\x10B\x3\x10B\x3\x10C\x3\x10C"+
		"\x3\x10C\x3\x10D\x3\x10D\x3\x10E\x3\x10E\x3\x10F\x3\x10F\x3\x10F\x3\x10F"+
		"\x3\x10F\x3\x10F\x3\x10F\x3\x10F\x5\x10F\xBB7\n\x10F\x3\x110\x3\x110\x5"+
		"\x110\xBBB\n\x110\x3\x110\x3\x110\a\x110\xBBF\n\x110\f\x110\xE\x110\xBC2"+
		"\v\x110\x3\x111\x3\x111\x3\x111\x3\x112\x3\x112\x3\x113\x3\x113\x3\x113"+
		"\x3\x114\x3\x114\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115\x3\x115"+
		"\x3\x115\a\x115\xBD6\n\x115\f\x115\xE\x115\xBD9\v\x115\x3\x115\x3\x115"+
		"\x3\x115\x3\x115\x3\x115\x3\x115\a\x115\xBE1\n\x115\f\x115\xE\x115\xBE4"+
		"\v\x115\x3\x115\x3\x115\x3\x115\x5\x115\xBE9\n\x115\x3\x115\x2\x2\xF\x36"+
		":@\x1CC\x1CE\x1D0\x1D2\x1D4\x1E2\x1E4\x1F4\x1FC\x1FE\x116\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36"+
		"\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2"+
		"T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2"+
		"\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2"+
		"\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2"+
		"\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2"+
		"\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2"+
		"\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2"+
		"\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102"+
		"\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114"+
		"\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126"+
		"\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138"+
		"\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A"+
		"\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C"+
		"\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E"+
		"\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180"+
		"\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192"+
		"\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4"+
		"\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6"+
		"\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8"+
		"\x2\x1CA\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA"+
		"\x2\x1DC\x2\x1DE\x2\x1E0\x2\x1E2\x2\x1E4\x2\x1E6\x2\x1E8\x2\x1EA\x2\x1EC"+
		"\x2\x1EE\x2\x1F0\x2\x1F2\x2\x1F4\x2\x1F6\x2\x1F8\x2\x1FA\x2\x1FC\x2\x1FE"+
		"\x2\x200\x2\x202\x2\x204\x2\x206\x2\x208\x2\x20A\x2\x20C\x2\x20E\x2\x210"+
		"\x2\x212\x2\x214\x2\x216\x2\x218\x2\x21A\x2\x21C\x2\x21E\x2\x220\x2\x222"+
		"\x2\x224\x2\x226\x2\x228\x2\x2\x5\x3\x2\x36;\a\x2\b\b\v\v\x1E\x1E  (("+
		"\x4\x2\x11\x11\x17\x17\xCC4\x2\x22A\x3\x2\x2\x2\x4\x22E\x3\x2\x2\x2\x6"+
		"\x23E\x3\x2\x2\x2\b\x242\x3\x2\x2\x2\n\x244\x3\x2\x2\x2\f\x246\x3\x2\x2"+
		"\x2\xE\x24B\x3\x2\x2\x2\x10\x24F\x3\x2\x2\x2\x12\x26E\x3\x2\x2\x2\x14"+
		"\x270\x3\x2\x2\x2\x16\x27E\x3\x2\x2\x2\x18\x285\x3\x2\x2\x2\x1A\x287\x3"+
		"\x2\x2\x2\x1C\x289\x3\x2\x2\x2\x1E\x28E\x3\x2\x2\x2 \x29C\x3\x2\x2\x2"+
		"\"\x2A1\x3\x2\x2\x2$\x2B6\x3\x2\x2\x2&\x2BD\x3\x2\x2\x2(\x2C9\x3\x2\x2"+
		"\x2*\x2CB\x3\x2\x2\x2,\x2CE\x3\x2\x2\x2.\x2D2\x3\x2\x2\x2\x30\x2DC\x3"+
		"\x2\x2\x2\x32\x2E1\x3\x2\x2\x2\x34\x2EC\x3\x2\x2\x2\x36\x2EE\x3\x2\x2"+
		"\x2\x38\x2FE\x3\x2\x2\x2:\x300\x3\x2\x2\x2<\x310\x3\x2\x2\x2>\x312\x3"+
		"\x2\x2\x2@\x314\x3\x2\x2\x2\x42\x320\x3\x2\x2\x2\x44\x333\x3\x2\x2\x2"+
		"\x46\x341\x3\x2\x2\x2H\x347\x3\x2\x2\x2J\x349\x3\x2\x2\x2L\x34D\x3\x2"+
		"\x2\x2N\x353\x3\x2\x2\x2P\x35A\x3\x2\x2\x2R\x364\x3\x2\x2\x2T\x368\x3"+
		"\x2\x2\x2V\x36D\x3\x2\x2\x2X\x385\x3\x2\x2\x2Z\x387\x3\x2\x2\x2\\\x38B"+
		"\x3\x2\x2\x2^\x393\x3\x2\x2\x2`\x396\x3\x2\x2\x2\x62\x399\x3\x2\x2\x2"+
		"\x64\x3A1\x3\x2\x2\x2\x66\x3AE\x3\x2\x2\x2h\x3B5\x3\x2\x2\x2j\x3BA\x3"+
		"\x2\x2\x2l\x3C9\x3\x2\x2\x2n\x3CB\x3\x2\x2\x2p\x3D3\x3\x2\x2\x2r\x3D8"+
		"\x3\x2\x2\x2t\x3DE\x3\x2\x2\x2v\x3E2\x3\x2\x2\x2x\x3E6\x3\x2\x2\x2z\x3EB"+
		"\x3\x2\x2\x2|\x3EF\x3\x2\x2\x2~\x408\x3\x2\x2\x2\x80\x40A\x3\x2\x2\x2"+
		"\x82\x415\x3\x2\x2\x2\x84\x419\x3\x2\x2\x2\x86\x41B\x3\x2\x2\x2\x88\x41D"+
		"\x3\x2\x2\x2\x8A\x41F\x3\x2\x2\x2\x8C\x42A\x3\x2\x2\x2\x8E\x42F\x3\x2"+
		"\x2\x2\x90\x43F\x3\x2\x2\x2\x92\x452\x3\x2\x2\x2\x94\x456\x3\x2\x2\x2"+
		"\x96\x458\x3\x2\x2\x2\x98\x466\x3\x2\x2\x2\x9A\x478\x3\x2\x2\x2\x9C\x47D"+
		"\x3\x2\x2\x2\x9E\x485\x3\x2\x2\x2\xA0\x498\x3\x2\x2\x2\xA2\x49D\x3\x2"+
		"\x2\x2\xA4\x4A7\x3\x2\x2\x2\xA6\x4AA\x3\x2\x2\x2\xA8\x4B4\x3\x2\x2\x2"+
		"\xAA\x4B8\x3\x2\x2\x2\xAC\x4BA\x3\x2\x2\x2\xAE\x4BC\x3\x2\x2\x2\xB0\x4C2"+
		"\x3\x2\x2\x2\xB2\x4CF\x3\x2\x2\x2\xB4\x4D2\x3\x2\x2\x2\xB6\x4DB\x3\x2"+
		"\x2\x2\xB8\x4DD\x3\x2\x2\x2\xBA\x514\x3\x2\x2\x2\xBC\x519\x3\x2\x2\x2"+
		"\xBE\x523\x3\x2\x2\x2\xC0\x52F\x3\x2\x2\x2\xC2\x53A\x3\x2\x2\x2\xC4\x548"+
		"\x3\x2\x2\x2\xC6\x54A\x3\x2\x2\x2\xC8\x553\x3\x2\x2\x2\xCA\x558\x3\x2"+
		"\x2\x2\xCC\x56C\x3\x2\x2\x2\xCE\x56E\x3\x2\x2\x2\xD0\x571\x3\x2\x2\x2"+
		"\xD2\x57F\x3\x2\x2\x2\xD4\x584\x3\x2\x2\x2\xD6\x58F\x3\x2\x2\x2\xD8\x594"+
		"\x3\x2\x2\x2\xDA\x5A0\x3\x2\x2\x2\xDC\x5A5\x3\x2\x2\x2\xDE\x5AD\x3\x2"+
		"\x2\x2\xE0\x5BB\x3\x2\x2\x2\xE2\x5C0\x3\x2\x2\x2\xE4\x5D2\x3\x2\x2\x2"+
		"\xE6\x5D4\x3\x2\x2\x2\xE8\x5DA\x3\x2\x2\x2\xEA\x5DC\x3\x2\x2\x2\xEC\x5E4"+
		"\x3\x2\x2\x2\xEE\x5EC\x3\x2\x2\x2\xF0\x5F3\x3\x2\x2\x2\xF2\x5F5\x3\x2"+
		"\x2\x2\xF4\x5FE\x3\x2\x2\x2\xF6\x606\x3\x2\x2\x2\xF8\x609\x3\x2\x2\x2"+
		"\xFA\x60F\x3\x2\x2\x2\xFC\x618\x3\x2\x2\x2\xFE\x620\x3\x2\x2\x2\x100\x626"+
		"\x3\x2\x2\x2\x102\x630\x3\x2\x2\x2\x104\x632\x3\x2\x2\x2\x106\x638\x3"+
		"\x2\x2\x2\x108\x644\x3\x2\x2\x2\x10A\x64B\x3\x2\x2\x2\x10C\x659\x3\x2"+
		"\x2\x2\x10E\x65B\x3\x2\x2\x2\x110\x65D\x3\x2\x2\x2\x112\x661\x3\x2\x2"+
		"\x2\x114\x665\x3\x2\x2\x2\x116\x66F\x3\x2\x2\x2\x118\x671\x3\x2\x2\x2"+
		"\x11A\x677\x3\x2\x2\x2\x11C\x67F\x3\x2\x2\x2\x11E\x691\x3\x2\x2\x2\x120"+
		"\x693\x3\x2\x2\x2\x122\x699\x3\x2\x2\x2\x124\x6A8\x3\x2\x2\x2\x126\x6AB"+
		"\x3\x2\x2\x2\x128\x6BC\x3\x2\x2\x2\x12A\x6BE\x3\x2\x2\x2\x12C\x6C0\x3"+
		"\x2\x2\x2\x12E\x6C6\x3\x2\x2\x2\x130\x6CC\x3\x2\x2\x2\x132\x6D6\x3\x2"+
		"\x2\x2\x134\x6DA\x3\x2\x2\x2\x136\x6DC\x3\x2\x2\x2\x138\x6EC\x3\x2\x2"+
		"\x2\x13A\x6FE\x3\x2\x2\x2\x13C\x700\x3\x2\x2\x2\x13E\x702\x3\x2\x2\x2"+
		"\x140\x70A\x3\x2\x2\x2\x142\x719\x3\x2\x2\x2\x144\x728\x3\x2\x2\x2\x146"+
		"\x72E\x3\x2\x2\x2\x148\x734\x3\x2\x2\x2\x14A\x73A\x3\x2\x2\x2\x14C\x73E"+
		"\x3\x2\x2\x2\x14E\x750\x3\x2\x2\x2\x150\x752\x3\x2\x2\x2\x152\x759\x3"+
		"\x2\x2\x2\x154\x762\x3\x2\x2\x2\x156\x768\x3\x2\x2\x2\x158\x770\x3\x2"+
		"\x2\x2\x15A\x773\x3\x2\x2\x2\x15C\x77C\x3\x2\x2\x2\x15E\x783\x3\x2\x2"+
		"\x2\x160\x78E\x3\x2\x2\x2\x162\x798\x3\x2\x2\x2\x164\x7BD\x3\x2\x2\x2"+
		"\x166\x7BF\x3\x2\x2\x2\x168\x7DD\x3\x2\x2\x2\x16A\x7E4\x3\x2\x2\x2\x16C"+
		"\x7E6\x3\x2\x2\x2\x16E\x7EC\x3\x2\x2\x2\x170\x816\x3\x2\x2\x2\x172\x818"+
		"\x3\x2\x2\x2\x174\x841\x3\x2\x2\x2\x176\x896\x3\x2\x2\x2\x178\x898\x3"+
		"\x2\x2\x2\x17A\x8EA\x3\x2\x2\x2\x17C\x8EF\x3\x2\x2\x2\x17E\x8FE\x3\x2"+
		"\x2\x2\x180\x900\x3\x2\x2\x2\x182\x90C\x3\x2\x2\x2\x184\x918\x3\x2\x2"+
		"\x2\x186\x924\x3\x2\x2\x2\x188\x93D\x3\x2\x2\x2\x18A\x98D\x3\x2\x2\x2"+
		"\x18C\x98F\x3\x2\x2\x2\x18E\x9D2\x3\x2\x2\x2\x190\x9D4\x3\x2\x2\x2\x192"+
		"\xA0B\x3\x2\x2\x2\x194\xA0D\x3\x2\x2\x2\x196\xA3B\x3\x2\x2\x2\x198\xA53"+
		"\x3\x2\x2\x2\x19A\xA55\x3\x2\x2\x2\x19C\xA5F\x3\x2\x2\x2\x19E\xA66\x3"+
		"\x2\x2\x2\x1A0\xA6A\x3\x2\x2\x2\x1A2\xA6C\x3\x2\x2\x2\x1A4\xA7A\x3\x2"+
		"\x2\x2\x1A6\xA7C\x3\x2\x2\x2\x1A8\xA86\x3\x2\x2\x2\x1AA\xA8A\x3\x2\x2"+
		"\x2\x1AC\xA8C\x3\x2\x2\x2\x1AE\xA93\x3\x2\x2\x2\x1B0\xAA1\x3\x2\x2\x2"+
		"\x1B2\xAA3\x3\x2\x2\x2\x1B4\xAA5\x3\x2\x2\x2\x1B6\xAA7\x3\x2\x2\x2\x1B8"+
		"\xAA9\x3\x2\x2\x2\x1BA\xAAB\x3\x2\x2\x2\x1BC\xAAD\x3\x2\x2\x2\x1BE\xAAF"+
		"\x3\x2\x2\x2\x1C0\xAB1\x3\x2\x2\x2\x1C2\xAB3\x3\x2\x2\x2\x1C4\xAB5\x3"+
		"\x2\x2\x2\x1C6\xAB7\x3\x2\x2\x2\x1C8\xAB9\x3\x2\x2\x2\x1CA\xAC2\x3\x2"+
		"\x2\x2\x1CC\xAC4\x3\x2\x2\x2\x1CE\xAD0\x3\x2\x2\x2\x1D0\xADC\x3\x2\x2"+
		"\x2\x1D2\xAE8\x3\x2\x2\x2\x1D4\xAF3\x3\x2\x2\x2\x1D6\xB04\x3\x2\x2\x2"+
		"\x1D8\xB06\x3\x2\x2\x2\x1DA\xB08\x3\x2\x2\x2\x1DC\xB0A\x3\x2\x2\x2\x1DE"+
		"\xB0C\x3\x2\x2\x2\x1E0\xB0E\x3\x2\x2\x2\x1E2\xB10\x3\x2\x2\x2\x1E4\xB20"+
		"\x3\x2\x2\x2\x1E6\xB2F\x3\x2\x2\x2\x1E8\xB31\x3\x2\x2\x2\x1EA\xB33\x3"+
		"\x2\x2\x2\x1EC\xB35\x3\x2\x2\x2\x1EE\xB37\x3\x2\x2\x2\x1F0\xB39\x3\x2"+
		"\x2\x2\x1F2\xB3F\x3\x2\x2\x2\x1F4\xB41\x3\x2\x2\x2\x1F6\xB55\x3\x2\x2"+
		"\x2\x1F8\xB58\x3\x2\x2\x2\x1FA\xB5B\x3\x2\x2\x2\x1FC\xB5F\x3\x2\x2\x2"+
		"\x1FE\xB6F\x3\x2\x2\x2\x200\xB83\x3\x2\x2\x2\x202\xB85\x3\x2\x2\x2\x204"+
		"\xB87\x3\x2\x2\x2\x206\xB89\x3\x2\x2\x2\x208\xB8B\x3\x2\x2\x2\x20A\xB9A"+
		"\x3\x2\x2\x2\x20C\xB9C\x3\x2\x2\x2\x20E\xB9E\x3\x2\x2\x2\x210\xBA0\x3"+
		"\x2\x2\x2\x212\xBA2\x3\x2\x2\x2\x214\xBA4\x3\x2\x2\x2\x216\xBA7\x3\x2"+
		"\x2\x2\x218\xBAA\x3\x2\x2\x2\x21A\xBAC\x3\x2\x2\x2\x21C\xBB6\x3\x2\x2"+
		"\x2\x21E\xBBA\x3\x2\x2\x2\x220\xBC3\x3\x2\x2\x2\x222\xBC6\x3\x2\x2\x2"+
		"\x224\xBC8\x3\x2\x2\x2\x226\xBCB\x3\x2\x2\x2\x228\xBE8\x3\x2\x2\x2\x22A"+
		"\x22B\t\x2\x2\x2\x22B\x3\x3\x2\x2\x2\x22C\x22F\x5\x6\x4\x2\x22D\x22F\x5"+
		"\xE\b\x2\x22E\x22C\x3\x2\x2\x2\x22E\x22D\x3\x2\x2\x2\x22F\x5\x3\x2\x2"+
		"\x2\x230\x232\x5\xE8u\x2\x231\x230\x3\x2\x2\x2\x232\x235\x3\x2\x2\x2\x233"+
		"\x231\x3\x2\x2\x2\x233\x234\x3\x2\x2\x2\x234\x236\x3\x2\x2\x2\x235\x233"+
		"\x3\x2\x2\x2\x236\x23F\x5\b\x5\x2\x237\x239\x5\xE8u\x2\x238\x237\x3\x2"+
		"\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x23B\x3\x2\x2"+
		"\x2\x23B\x23D\x3\x2\x2\x2\x23C\x23A\x3\x2\x2\x2\x23D\x23F\a\x6\x2\x2\x23E"+
		"\x233\x3\x2\x2\x2\x23E\x23A\x3\x2\x2\x2\x23F\a\x3\x2\x2\x2\x240\x243\x5"+
		"\n\x6\x2\x241\x243\x5\f\a\x2\x242\x240\x3\x2\x2\x2\x242\x241\x3\x2\x2"+
		"\x2\x243\t\x3\x2\x2\x2\x244\x245\t\x3\x2\x2\x245\v\x3\x2\x2\x2\x246\x247"+
		"\t\x4\x2\x2\x247\r\x3\x2\x2\x2\x248\x24C\x5\x10\t\x2\x249\x24C\x5\x1E"+
		"\x10\x2\x24A\x24C\x5 \x11\x2\x24B\x248\x3\x2\x2\x2\x24B\x249\x3\x2\x2"+
		"\x2\x24B\x24A\x3\x2\x2\x2\x24C\xF\x3\x2\x2\x2\x24D\x250\x5\x16\f\x2\x24E"+
		"\x250\x5\x1C\xF\x2\x24F\x24D\x3\x2\x2\x2\x24F\x24E\x3\x2\x2\x2\x250\x255"+
		"\x3\x2\x2\x2\x251\x254\x5\x14\v\x2\x252\x254\x5\x1A\xE\x2\x253\x251\x3"+
		"\x2\x2\x2\x253\x252\x3\x2\x2\x2\x254\x257\x3\x2\x2\x2\x255\x253\x3\x2"+
		"\x2\x2\x255\x256\x3\x2\x2\x2\x256\x11\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2"+
		"\x258\x25A\x5\xE8u\x2\x259\x258\x3\x2\x2\x2\x25A\x25D\x3\x2\x2\x2\x25B"+
		"\x259\x3\x2\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25E\x3\x2\x2\x2\x25D\x25B"+
		"\x3\x2\x2\x2\x25E\x260\ai\x2\x2\x25F\x261\x5,\x17\x2\x260\x25F\x3\x2\x2"+
		"\x2\x260\x261\x3\x2\x2\x2\x261\x26F\x3\x2\x2\x2\x262\x263\x5\x10\t\x2"+
		"\x263\x267\a\x44\x2\x2\x264\x266\x5\xE8u\x2\x265\x264\x3\x2\x2\x2\x266"+
		"\x269\x3\x2\x2\x2\x267\x265\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x26A"+
		"\x3\x2\x2\x2\x269\x267\x3\x2\x2\x2\x26A\x26C\ai\x2\x2\x26B\x26D\x5,\x17"+
		"\x2\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26F\x3\x2\x2\x2"+
		"\x26E\x25B\x3\x2\x2\x2\x26E\x262\x3\x2\x2\x2\x26F\x13\x3\x2\x2\x2\x270"+
		"\x274\a\x44\x2\x2\x271\x273\x5\xE8u\x2\x272\x271\x3\x2\x2\x2\x273\x276"+
		"\x3\x2\x2\x2\x274\x272\x3\x2\x2\x2\x274\x275\x3\x2\x2\x2\x275\x277\x3"+
		"\x2\x2\x2\x276\x274\x3\x2\x2\x2\x277\x279\ai\x2\x2\x278\x27A\x5,\x17\x2"+
		"\x279\x278\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x15\x3\x2\x2\x2\x27B"+
		"\x27D\x5\xE8u\x2\x27C\x27B\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x27C"+
		"\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x281\x3\x2\x2\x2\x280\x27E\x3"+
		"\x2\x2\x2\x281\x283\ai\x2\x2\x282\x284\x5,\x17\x2\x283\x282\x3\x2\x2\x2"+
		"\x283\x284\x3\x2\x2\x2\x284\x17\x3\x2\x2\x2\x285\x286\x5\x12\n\x2\x286"+
		"\x19\x3\x2\x2\x2\x287\x288\x5\x14\v\x2\x288\x1B\x3\x2\x2\x2\x289\x28A"+
		"\x5\x16\f\x2\x28A\x1D\x3\x2\x2\x2\x28B\x28D\x5\xE8u\x2\x28C\x28B\x3\x2"+
		"\x2\x2\x28D\x290\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2\x28E\x28F\x3\x2\x2"+
		"\x2\x28F\x291\x3\x2\x2\x2\x290\x28E\x3\x2\x2\x2\x291\x292\ai\x2\x2\x292"+
		"\x1F\x3\x2\x2\x2\x293\x294\x5\x6\x4\x2\x294\x295\x5\"\x12\x2\x295\x29D"+
		"\x3\x2\x2\x2\x296\x297\x5\x10\t\x2\x297\x298\x5\"\x12\x2\x298\x29D\x3"+
		"\x2\x2\x2\x299\x29A\x5\x1E\x10\x2\x29A\x29B\x5\"\x12\x2\x29B\x29D\x3\x2"+
		"\x2\x2\x29C\x293\x3\x2\x2\x2\x29C\x296\x3\x2\x2\x2\x29C\x299\x3\x2\x2"+
		"\x2\x29D!\x3\x2\x2\x2\x29E\x2A0\x5\xE8u\x2\x29F\x29E\x3\x2\x2\x2\x2A0"+
		"\x2A3\x3\x2\x2\x2\x2A1\x29F\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2\x2A4"+
		"\x3\x2\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A4\x2A5\a@\x2\x2\x2A5\x2B0\a\x41"+
		"\x2\x2\x2A6\x2A8\x5\xE8u\x2\x2A7\x2A6\x3\x2\x2\x2\x2A8\x2AB\x3\x2\x2\x2"+
		"\x2A9\x2A7\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB"+
		"\x2A9\x3\x2\x2\x2\x2AC\x2AD\a@\x2\x2\x2AD\x2AF\a\x41\x2\x2\x2AE\x2A9\x3"+
		"\x2\x2\x2\x2AF\x2B2\x3\x2\x2\x2\x2B0\x2AE\x3\x2\x2\x2\x2B0\x2B1\x3\x2"+
		"\x2\x2\x2B1#\x3\x2\x2\x2\x2B2\x2B0\x3\x2\x2\x2\x2B3\x2B5\x5&\x14\x2\x2B4"+
		"\x2B3\x3\x2\x2\x2\x2B5\x2B8\x3\x2\x2\x2\x2B6\x2B4\x3\x2\x2\x2\x2B6\x2B7"+
		"\x3\x2\x2\x2\x2B7\x2B9\x3\x2\x2\x2\x2B8\x2B6\x3\x2\x2\x2\x2B9\x2BB\ai"+
		"\x2\x2\x2BA\x2BC\x5(\x15\x2\x2BB\x2BA\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2"+
		"\x2BC%\x3\x2\x2\x2\x2BD\x2BE\x5\xE8u\x2\x2BE\'\x3\x2\x2\x2\x2BF\x2C0\a"+
		"\x14\x2\x2\x2C0\x2CA\x5\x1E\x10\x2\x2C1\x2C2\a\x14\x2\x2\x2C2\x2C6\x5"+
		"\x10\t\x2\x2C3\x2C5\x5*\x16\x2\x2C4\x2C3\x3\x2\x2\x2\x2C5\x2C8\x3\x2\x2"+
		"\x2\x2C6\x2C4\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2CA\x3\x2\x2\x2"+
		"\x2C8\x2C6\x3\x2\x2\x2\x2C9\x2BF\x3\x2\x2\x2\x2C9\x2C1\x3\x2\x2\x2\x2CA"+
		")\x3\x2\x2\x2\x2CB\x2CC\aX\x2\x2\x2CC\x2CD\x5\x18\r\x2\x2CD+\x3\x2\x2"+
		"\x2\x2CE\x2CF\aG\x2\x2\x2CF\x2D0\x5.\x18\x2\x2D0\x2D1\a\x46\x2\x2\x2D1"+
		"-\x3\x2\x2\x2\x2D2\x2D7\x5\x30\x19\x2\x2D3\x2D4\a\x43\x2\x2\x2D4\x2D6"+
		"\x5\x30\x19\x2\x2D5\x2D3\x3\x2\x2\x2\x2D6\x2D9\x3\x2\x2\x2\x2D7\x2D5\x3"+
		"\x2\x2\x2\x2D7\x2D8\x3\x2\x2\x2\x2D8/\x3\x2\x2\x2\x2D9\x2D7\x3\x2\x2\x2"+
		"\x2DA\x2DD\x5\xE\b\x2\x2DB\x2DD\x5\x32\x1A\x2\x2DC\x2DA\x3\x2\x2\x2\x2DC"+
		"\x2DB\x3\x2\x2\x2\x2DD\x31\x3\x2\x2\x2\x2DE\x2E0\x5\xE8u\x2\x2DF\x2DE"+
		"\x3\x2\x2\x2\x2E0\x2E3\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2\x2E1\x2E2\x3"+
		"\x2\x2\x2\x2E2\x2E4\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2\x2E4\x2E6\aJ\x2"+
		"\x2\x2E5\x2E7\x5\x34\x1B\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2"+
		"\x2E7\x33\x3\x2\x2\x2\x2E8\x2E9\a\x14\x2\x2\x2E9\x2ED\x5\xE\b\x2\x2EA"+
		"\x2EB\a+\x2\x2\x2EB\x2ED\x5\xE\b\x2\x2EC\x2E8\x3\x2\x2\x2\x2EC\x2EA\x3"+
		"\x2\x2\x2\x2ED\x35\x3\x2\x2\x2\x2EE\x2EF\b\x1C\x1\x2\x2EF\x2F0\ai\x2\x2"+
		"\x2F0\x2F6\x3\x2\x2\x2\x2F1\x2F2\f\x3\x2\x2\x2F2\x2F3\a\x44\x2\x2\x2F3"+
		"\x2F5\ai\x2\x2\x2F4\x2F1\x3\x2\x2\x2\x2F5\x2F8\x3\x2\x2\x2\x2F6\x2F4\x3"+
		"\x2\x2\x2\x2F6\x2F7\x3\x2\x2\x2\x2F7\x37\x3\x2\x2\x2\x2F8\x2F6\x3\x2\x2"+
		"\x2\x2F9\x2FF\ai\x2\x2\x2FA\x2FB\x5:\x1E\x2\x2FB\x2FC\a\x44\x2\x2\x2FC"+
		"\x2FD\ai\x2\x2\x2FD\x2FF\x3\x2\x2\x2\x2FE\x2F9\x3\x2\x2\x2\x2FE\x2FA\x3"+
		"\x2\x2\x2\x2FF\x39\x3\x2\x2\x2\x300\x301\b\x1E\x1\x2\x301\x302\ai\x2\x2"+
		"\x302\x308\x3\x2\x2\x2\x303\x304\f\x3\x2\x2\x304\x305\a\x44\x2\x2\x305"+
		"\x307\ai\x2\x2\x306\x303\x3\x2\x2\x2\x307\x30A\x3\x2\x2\x2\x308\x306\x3"+
		"\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309;\x3\x2\x2\x2\x30A\x308\x3\x2\x2\x2"+
		"\x30B\x311\ai\x2\x2\x30C\x30D\x5@!\x2\x30D\x30E\a\x44\x2\x2\x30E\x30F"+
		"\ai\x2\x2\x30F\x311\x3\x2\x2\x2\x310\x30B\x3\x2\x2\x2\x310\x30C\x3\x2"+
		"\x2\x2\x311=\x3\x2\x2\x2\x312\x313\ai\x2\x2\x313?\x3\x2\x2\x2\x314\x315"+
		"\b!\x1\x2\x315\x316\ai\x2\x2\x316\x31C\x3\x2\x2\x2\x317\x318\f\x3\x2\x2"+
		"\x318\x319\a\x44\x2\x2\x319\x31B\ai\x2\x2\x31A\x317\x3\x2\x2\x2\x31B\x31E"+
		"\x3\x2\x2\x2\x31C\x31A\x3\x2\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x41\x3\x2"+
		"\x2\x2\x31E\x31C\x3\x2\x2\x2\x31F\x321\x5\x44#\x2\x320\x31F\x3\x2\x2\x2"+
		"\x320\x321\x3\x2\x2\x2\x321\x325\x3\x2\x2\x2\x322\x324\x5H%\x2\x323\x322"+
		"\x3\x2\x2\x2\x324\x327\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x325\x326\x3"+
		"\x2\x2\x2\x326\x32B\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x328\x32A\x5R*\x2"+
		"\x329\x328\x3\x2\x2\x2\x32A\x32D\x3\x2\x2\x2\x32B\x329\x3\x2\x2\x2\x32B"+
		"\x32C\x3\x2\x2\x2\x32C\x32E\x3\x2\x2\x2\x32D\x32B\x3\x2\x2\x2\x32E\x32F"+
		"\a\x2\x2\x3\x32F\x43\x3\x2\x2\x2\x330\x332\x5\x46$\x2\x331\x330\x3\x2"+
		"\x2\x2\x332\x335\x3\x2\x2\x2\x333\x331\x3\x2\x2\x2\x333\x334\x3\x2\x2"+
		"\x2\x334\x336\x3\x2\x2\x2\x335\x333\x3\x2\x2\x2\x336\x337\a#\x2\x2\x337"+
		"\x33C\ai\x2\x2\x338\x339\a\x44\x2\x2\x339\x33B\ai\x2\x2\x33A\x338\x3\x2"+
		"\x2\x2\x33B\x33E\x3\x2\x2\x2\x33C\x33A\x3\x2\x2\x2\x33C\x33D\x3\x2\x2"+
		"\x2\x33D\x33F\x3\x2\x2\x2\x33E\x33C\x3\x2\x2\x2\x33F\x340\a\x42\x2\x2"+
		"\x340\x45\x3\x2\x2\x2\x341\x342\x5\xE8u\x2\x342G\x3\x2\x2\x2\x343\x348"+
		"\x5J&\x2\x344\x348\x5L\'\x2\x345\x348\x5N(\x2\x346\x348\x5P)\x2\x347\x343"+
		"\x3\x2\x2\x2\x347\x344\x3\x2\x2\x2\x347\x345\x3\x2\x2\x2\x347\x346\x3"+
		"\x2\x2\x2\x348I\x3\x2\x2\x2\x349\x34A\a\x1C\x2\x2\x34A\x34B\x5\x38\x1D"+
		"\x2\x34B\x34C\a\x42\x2\x2\x34CK\x3\x2\x2\x2\x34D\x34E\a\x1C\x2\x2\x34E"+
		"\x34F\x5:\x1E\x2\x34F\x350\a\x44\x2\x2\x350\x351\aV\x2\x2\x351\x352\a"+
		"\x42\x2\x2\x352M\x3\x2\x2\x2\x353\x354\a\x1C\x2\x2\x354\x355\a)\x2\x2"+
		"\x355\x356\x5\x38\x1D\x2\x356\x357\a\x44\x2\x2\x357\x358\ai\x2\x2\x358"+
		"\x359\a\x42\x2\x2\x359O\x3\x2\x2\x2\x35A\x35B\a\x1C\x2\x2\x35B\x35C\a"+
		")\x2\x2\x35C\x35D\x5\x38\x1D\x2\x35D\x35E\a\x44\x2\x2\x35E\x35F\aV\x2"+
		"\x2\x35F\x360\a\x42\x2\x2\x360Q\x3\x2\x2\x2\x361\x365\x5T+\x2\x362\x365"+
		"\x5\xC8\x65\x2\x363\x365\a\x42\x2\x2\x364\x361\x3\x2\x2\x2\x364\x362\x3"+
		"\x2\x2\x2\x364\x363\x3\x2\x2\x2\x365S\x3\x2\x2\x2\x366\x369\x5V,\x2\x367"+
		"\x369\x5\xBC_\x2\x368\x366\x3\x2\x2\x2\x368\x367\x3\x2\x2\x2\x369U\x3"+
		"\x2\x2\x2\x36A\x36C\x5X-\x2\x36B\x36A\x3\x2\x2\x2\x36C\x36F\x3\x2\x2\x2"+
		"\x36D\x36B\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E\x370\x3\x2\x2\x2\x36F"+
		"\x36D\x3\x2\x2\x2\x370\x371\a\f\x2\x2\x371\x373\ai\x2\x2\x372\x374\x5"+
		"Z.\x2\x373\x372\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2\x374\x376\x3\x2\x2\x2"+
		"\x375\x377\x5^\x30\x2\x376\x375\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377"+
		"\x379\x3\x2\x2\x2\x378\x37A\x5`\x31\x2\x379\x378\x3\x2\x2\x2\x379\x37A"+
		"\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C\x5\x64\x33\x2\x37CW\x3\x2"+
		"\x2\x2\x37D\x386\x5\xE8u\x2\x37E\x386\a&\x2\x2\x37F\x386\a%\x2\x2\x380"+
		"\x386\a$\x2\x2\x381\x386\a\x4\x2\x2\x382\x386\a)\x2\x2\x383\x386\a\x15"+
		"\x2\x2\x384\x386\a*\x2\x2\x385\x37D\x3\x2\x2\x2\x385\x37E\x3\x2\x2\x2"+
		"\x385\x37F\x3\x2\x2\x2\x385\x380\x3\x2\x2\x2\x385\x381\x3\x2\x2\x2\x385"+
		"\x382\x3\x2\x2\x2\x385\x383\x3\x2\x2\x2\x385\x384\x3\x2\x2\x2\x386Y\x3"+
		"\x2\x2\x2\x387\x388\aG\x2\x2\x388\x389\x5\\/\x2\x389\x38A\a\x46\x2\x2"+
		"\x38A[\x3\x2\x2\x2\x38B\x390\x5$\x13\x2\x38C\x38D\a\x43\x2\x2\x38D\x38F"+
		"\x5$\x13\x2\x38E\x38C\x3\x2\x2\x2\x38F\x392\x3\x2\x2\x2\x390\x38E\x3\x2"+
		"\x2\x2\x390\x391\x3\x2\x2\x2\x391]\x3\x2\x2\x2\x392\x390\x3\x2\x2\x2\x393"+
		"\x394\a\x14\x2\x2\x394\x395\x5\x12\n\x2\x395_\x3\x2\x2\x2\x396\x397\a"+
		"\x1B\x2\x2\x397\x398\x5\x62\x32\x2\x398\x61\x3\x2\x2\x2\x399\x39E\x5\x18"+
		"\r\x2\x39A\x39B\a\x43\x2\x2\x39B\x39D\x5\x18\r\x2\x39C\x39A\x3\x2\x2\x2"+
		"\x39D\x3A0\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F"+
		"\x63\x3\x2\x2\x2\x3A0\x39E\x3\x2\x2\x2\x3A1\x3A5\a>\x2\x2\x3A2\x3A4\x5"+
		"\x66\x34\x2\x3A3\x3A2\x3\x2\x2\x2\x3A4\x3A7\x3\x2\x2\x2\x3A5\x3A3\x3\x2"+
		"\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3A8\x3\x2\x2\x2\x3A7\x3A5\x3\x2\x2"+
		"\x2\x3A8\x3A9\a?\x2\x2\x3A9\x65\x3\x2\x2\x2\x3AA\x3AF\x5h\x35\x2\x3AB"+
		"\x3AF\x5\xACW\x2\x3AC\x3AF\x5\xAEX\x2\x3AD\x3AF\x5\xB0Y\x2\x3AE\x3AA\x3"+
		"\x2\x2\x2\x3AE\x3AB\x3\x2\x2\x2\x3AE\x3AC\x3\x2\x2\x2\x3AE\x3AD\x3\x2"+
		"\x2\x2\x3AFg\x3\x2\x2\x2\x3B0\x3B6\x5j\x36\x2\x3B1\x3B6\x5\x8EH\x2\x3B2"+
		"\x3B6\x5T+\x2\x3B3\x3B6\x5\xC8\x65\x2\x3B4\x3B6\a\x42\x2\x2\x3B5\x3B0"+
		"\x3\x2\x2\x2\x3B5\x3B1\x3\x2\x2\x2\x3B5\x3B2\x3\x2\x2\x2\x3B5\x3B3\x3"+
		"\x2\x2\x2\x3B5\x3B4\x3\x2\x2\x2\x3B6i\x3\x2\x2\x2\x3B7\x3B9\x5l\x37\x2"+
		"\x3B8\x3B7\x3\x2\x2\x2\x3B9\x3BC\x3\x2\x2\x2\x3BA\x3B8\x3\x2\x2\x2\x3BA"+
		"\x3BB\x3\x2\x2\x2\x3BB\x3BD\x3\x2\x2\x2\x3BC\x3BA\x3\x2\x2\x2\x3BD\x3BE"+
		"\x5v<\x2\x3BE\x3BF\x5n\x38\x2\x3BF\x3C0\a\x42\x2\x2\x3C0k\x3\x2\x2\x2"+
		"\x3C1\x3CA\x5\xE8u\x2\x3C2\x3CA\a&\x2\x2\x3C3\x3CA\a%\x2\x2\x3C4\x3CA"+
		"\a$\x2\x2\x3C5\x3CA\a)\x2\x2\x3C6\x3CA\a\x15\x2\x2\x3C7\x3CA\a\x31\x2"+
		"\x2\x3C8\x3CA\a\x34\x2\x2\x3C9\x3C1\x3\x2\x2\x2\x3C9\x3C2\x3\x2\x2\x2"+
		"\x3C9\x3C3\x3\x2\x2\x2\x3C9\x3C4\x3\x2\x2\x2\x3C9\x3C5\x3\x2\x2\x2\x3C9"+
		"\x3C6\x3\x2\x2\x2\x3C9\x3C7\x3\x2\x2\x2\x3C9\x3C8\x3\x2\x2\x2\x3CAm\x3"+
		"\x2\x2\x2\x3CB\x3D0\x5p\x39\x2\x3CC\x3CD\a\x43\x2\x2\x3CD\x3CF\x5p\x39"+
		"\x2\x3CE\x3CC\x3\x2\x2\x2\x3CF\x3D2\x3\x2\x2\x2\x3D0\x3CE\x3\x2\x2\x2"+
		"\x3D0\x3D1\x3\x2\x2\x2\x3D1o\x3\x2\x2\x2\x3D2\x3D0\x3\x2\x2\x2\x3D3\x3D6"+
		"\x5r:\x2\x3D4\x3D5\a\x45\x2\x2\x3D5\x3D7\x5t;\x2\x3D6\x3D4\x3\x2\x2\x2"+
		"\x3D6\x3D7\x3\x2\x2\x2\x3D7q\x3\x2\x2\x2\x3D8\x3DA\ai\x2\x2\x3D9\x3DB"+
		"\x5\"\x12\x2\x3DA\x3D9\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DBs\x3\x2\x2"+
		"\x2\x3DC\x3DF\x5\x1A0\xD1\x2\x3DD\x3DF\x5\xFA~\x2\x3DE\x3DC\x3\x2\x2\x2"+
		"\x3DE\x3DD\x3\x2\x2\x2\x3DFu\x3\x2\x2\x2\x3E0\x3E3\x5x=\x2\x3E1\x3E3\x5"+
		"z>\x2\x3E2\x3E0\x3\x2\x2\x2\x3E2\x3E1\x3\x2\x2\x2\x3E3w\x3\x2\x2\x2\x3E4"+
		"\x3E7\x5\b\x5\x2\x3E5\x3E7\a\x6\x2\x2\x3E6\x3E4\x3\x2\x2\x2\x3E6\x3E5"+
		"\x3\x2\x2\x2\x3E7y\x3\x2\x2\x2\x3E8\x3EC\x5|?\x2\x3E9\x3EC\x5\x8A\x46"+
		"\x2\x3EA\x3EC\x5\x8CG\x2\x3EB\x3E8\x3\x2\x2\x2\x3EB\x3E9\x3\x2\x2\x2\x3EB"+
		"\x3EA\x3\x2\x2\x2\x3EC{\x3\x2\x2\x2\x3ED\x3F0\x5\x82\x42\x2\x3EE\x3F0"+
		"\x5\x88\x45\x2\x3EF\x3ED\x3\x2\x2\x2\x3EF\x3EE\x3\x2\x2\x2\x3F0\x3F5\x3"+
		"\x2\x2\x2\x3F1\x3F4\x5\x80\x41\x2\x3F2\x3F4\x5\x86\x44\x2\x3F3\x3F1\x3"+
		"\x2\x2\x2\x3F3\x3F2\x3\x2\x2\x2\x3F4\x3F7\x3\x2\x2\x2\x3F5\x3F3\x3\x2"+
		"\x2\x2\x3F5\x3F6\x3\x2\x2\x2\x3F6}\x3\x2\x2\x2\x3F7\x3F5\x3\x2\x2\x2\x3F8"+
		"\x3FA\ai\x2\x2\x3F9\x3FB\x5,\x17\x2\x3FA\x3F9\x3\x2\x2\x2\x3FA\x3FB\x3"+
		"\x2\x2\x2\x3FB\x409\x3\x2\x2\x2\x3FC\x3FD\x5|?\x2\x3FD\x401\a\x44\x2\x2"+
		"\x3FE\x400\x5\xE8u\x2\x3FF\x3FE\x3\x2\x2\x2\x400\x403\x3\x2\x2\x2\x401"+
		"\x3FF\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x404\x3\x2\x2\x2\x403\x401"+
		"\x3\x2\x2\x2\x404\x406\ai\x2\x2\x405\x407\x5,\x17\x2\x406\x405\x3\x2\x2"+
		"\x2\x406\x407\x3\x2\x2\x2\x407\x409\x3\x2\x2\x2\x408\x3F8\x3\x2\x2\x2"+
		"\x408\x3FC\x3\x2\x2\x2\x409\x7F\x3\x2\x2\x2\x40A\x40E\a\x44\x2\x2\x40B"+
		"\x40D\x5\xE8u\x2\x40C\x40B\x3\x2\x2\x2\x40D\x410\x3\x2\x2\x2\x40E\x40C"+
		"\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\x3\x2\x2\x2\x410\x40E\x3"+
		"\x2\x2\x2\x411\x413\ai\x2\x2\x412\x414\x5,\x17\x2\x413\x412\x3\x2\x2\x2"+
		"\x413\x414\x3\x2\x2\x2\x414\x81\x3\x2\x2\x2\x415\x417\ai\x2\x2\x416\x418"+
		"\x5,\x17\x2\x417\x416\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x83\x3\x2"+
		"\x2\x2\x419\x41A\x5~@\x2\x41A\x85\x3\x2\x2\x2\x41B\x41C\x5\x80\x41\x2"+
		"\x41C\x87\x3\x2\x2\x2\x41D\x41E\x5\x82\x42\x2\x41E\x89\x3\x2\x2\x2\x41F"+
		"\x420\ai\x2\x2\x420\x8B\x3\x2\x2\x2\x421\x422\x5x=\x2\x422\x423\x5\"\x12"+
		"\x2\x423\x42B\x3\x2\x2\x2\x424\x425\x5|?\x2\x425\x426\x5\"\x12\x2\x426"+
		"\x42B\x3\x2\x2\x2\x427\x428\x5\x8A\x46\x2\x428\x429\x5\"\x12\x2\x429\x42B"+
		"\x3\x2\x2\x2\x42A\x421\x3\x2\x2\x2\x42A\x424\x3\x2\x2\x2\x42A\x427\x3"+
		"\x2\x2\x2\x42B\x8D\x3\x2\x2\x2\x42C\x42E\x5\x90I\x2\x42D\x42C\x3\x2\x2"+
		"\x2\x42E\x431\x3\x2\x2\x2\x42F\x42D\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2"+
		"\x430\x432\x3\x2\x2\x2\x431\x42F\x3\x2\x2\x2\x432\x433\x5\x92J\x2\x433"+
		"\x434\x5\xAAV\x2\x434\x8F\x3\x2\x2\x2\x435\x440\x5\xE8u\x2\x436\x440\a"+
		"&\x2\x2\x437\x440\a%\x2\x2\x438\x440\a$\x2\x2\x439\x440\a\x4\x2\x2\x43A"+
		"\x440\a)\x2\x2\x43B\x440\a\x15\x2\x2\x43C\x440\a-\x2\x2\x43D\x440\a!\x2"+
		"\x2\x43E\x440\a*\x2\x2\x43F\x435\x3\x2\x2\x2\x43F\x436\x3\x2\x2\x2\x43F"+
		"\x437\x3\x2\x2\x2\x43F\x438\x3\x2\x2\x2\x43F\x439\x3\x2\x2\x2\x43F\x43A"+
		"\x3\x2\x2\x2\x43F\x43B\x3\x2\x2\x2\x43F\x43C\x3\x2\x2\x2\x43F\x43D\x3"+
		"\x2\x2\x2\x43F\x43E\x3\x2\x2\x2\x440\x91\x3\x2\x2\x2\x441\x442\x5\x94"+
		"K\x2\x442\x444\x5\x96L\x2\x443\x445\x5\xA4S\x2\x444\x443\x3\x2\x2\x2\x444"+
		"\x445\x3\x2\x2\x2\x445\x453\x3\x2\x2\x2\x446\x44A\x5Z.\x2\x447\x449\x5"+
		"\xE8u\x2\x448\x447\x3\x2\x2\x2\x449\x44C\x3\x2\x2\x2\x44A\x448\x3\x2\x2"+
		"\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44D\x3\x2\x2\x2\x44C\x44A\x3\x2\x2\x2"+
		"\x44D\x44E\x5\x94K\x2\x44E\x450\x5\x96L\x2\x44F\x451\x5\xA4S\x2\x450\x44F"+
		"\x3\x2\x2\x2\x450\x451\x3\x2\x2\x2\x451\x453\x3\x2\x2\x2\x452\x441\x3"+
		"\x2\x2\x2\x452\x446\x3\x2\x2\x2\x453\x93\x3\x2\x2\x2\x454\x457\x5v<\x2"+
		"\x455\x457\a\x33\x2\x2\x456\x454\x3\x2\x2\x2\x456\x455\x3\x2\x2\x2\x457"+
		"\x95\x3\x2\x2\x2\x458\x459\ai\x2\x2\x459\x45B\a<\x2\x2\x45A\x45C\x5\x98"+
		"M\x2\x45B\x45A\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2"+
		"\x45D\x45F\a=\x2\x2\x45E\x460\x5\"\x12\x2\x45F\x45E\x3\x2\x2\x2\x45F\x460"+
		"\x3\x2\x2\x2\x460\x97\x3\x2\x2\x2\x461\x462\x5\x9AN\x2\x462\x463\a\x43"+
		"\x2\x2\x463\x464\x5\xA0Q\x2\x464\x467\x3\x2\x2\x2\x465\x467\x5\xA0Q\x2"+
		"\x466\x461\x3\x2\x2\x2\x466\x465\x3\x2\x2\x2\x467\x99\x3\x2\x2\x2\x468"+
		"\x46D\x5\x9CO\x2\x469\x46A\a\x43\x2\x2\x46A\x46C\x5\x9CO\x2\x46B\x469"+
		"\x3\x2\x2\x2\x46C\x46F\x3\x2\x2\x2\x46D\x46B\x3\x2\x2\x2\x46D\x46E\x3"+
		"\x2\x2\x2\x46E\x479\x3\x2\x2\x2\x46F\x46D\x3\x2\x2\x2\x470\x475\x5\xA2"+
		"R\x2\x471\x472\a\x43\x2\x2\x472\x474\x5\x9CO\x2\x473\x471\x3\x2\x2\x2"+
		"\x474\x477\x3\x2\x2\x2\x475\x473\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476"+
		"\x479\x3\x2\x2\x2\x477\x475\x3\x2\x2\x2\x478\x468\x3\x2\x2\x2\x478\x470"+
		"\x3\x2\x2\x2\x479\x9B\x3\x2\x2\x2\x47A\x47C\x5\x9EP\x2\x47B\x47A\x3\x2"+
		"\x2\x2\x47C\x47F\x3\x2\x2\x2\x47D\x47B\x3\x2\x2\x2\x47D\x47E\x3\x2\x2"+
		"\x2\x47E\x480\x3\x2\x2\x2\x47F\x47D\x3\x2\x2\x2\x480\x481\x5v<\x2\x481"+
		"\x482\x5r:\x2\x482\x9D\x3\x2\x2\x2\x483\x486\x5\xE8u\x2\x484\x486\a\x15"+
		"\x2\x2\x485\x483\x3\x2\x2\x2\x485\x484\x3\x2\x2\x2\x486\x9F\x3\x2\x2\x2"+
		"\x487\x489\x5\x9EP\x2\x488\x487\x3\x2\x2\x2\x489\x48C\x3\x2\x2\x2\x48A"+
		"\x488\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48D\x3\x2\x2\x2\x48C\x48A"+
		"\x3\x2\x2\x2\x48D\x491\x5v<\x2\x48E\x490\x5\xE8u\x2\x48F\x48E\x3\x2\x2"+
		"\x2\x490\x493\x3\x2\x2\x2\x491\x48F\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2"+
		"\x492\x494\x3\x2\x2\x2\x493\x491\x3\x2\x2\x2\x494\x495\ak\x2\x2\x495\x496"+
		"\x5r:\x2\x496\x499\x3\x2\x2\x2\x497\x499\x5\x9CO\x2\x498\x48A\x3\x2\x2"+
		"\x2\x498\x497\x3\x2\x2\x2\x499\xA1\x3\x2\x2\x2\x49A\x49C\x5\xE8u\x2\x49B"+
		"\x49A\x3\x2\x2\x2\x49C\x49F\x3\x2\x2\x2\x49D\x49B\x3\x2\x2\x2\x49D\x49E"+
		"\x3\x2\x2\x2\x49E\x4A0\x3\x2\x2\x2\x49F\x49D\x3\x2\x2\x2\x4A0\x4A3\x5"+
		"v<\x2\x4A1\x4A2\ai\x2\x2\x4A2\x4A4\a\x44\x2\x2\x4A3\x4A1\x3\x2\x2\x2\x4A3"+
		"\x4A4\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A6\a.\x2\x2\x4A6\xA3\x3"+
		"\x2\x2\x2\x4A7\x4A8\a\x30\x2\x2\x4A8\x4A9\x5\xA6T\x2\x4A9\xA5\x3\x2\x2"+
		"\x2\x4AA\x4AF\x5\xA8U\x2\x4AB\x4AC\a\x43\x2\x2\x4AC\x4AE\x5\xA8U\x2\x4AD"+
		"\x4AB\x3\x2\x2\x2\x4AE\x4B1\x3\x2\x2\x2\x4AF\x4AD\x3\x2\x2\x2\x4AF\x4B0"+
		"\x3\x2\x2\x2\x4B0\xA7\x3\x2\x2\x2\x4B1\x4AF\x3\x2\x2\x2\x4B2\x4B5\x5\x12"+
		"\n\x2\x4B3\x4B5\x5\x1E\x10\x2\x4B4\x4B2\x3\x2\x2\x2\x4B4\x4B3\x3\x2\x2"+
		"\x2\x4B5\xA9\x3\x2\x2\x2\x4B6\x4B9\x5\xFE\x80\x2\x4B7\x4B9\a\x42\x2\x2"+
		"\x4B8\x4B6\x3\x2\x2\x2\x4B8\x4B7\x3\x2\x2\x2\x4B9\xAB\x3\x2\x2\x2\x4BA"+
		"\x4BB\x5\xFE\x80\x2\x4BB\xAD\x3\x2\x2\x2\x4BC\x4BD\a)\x2\x2\x4BD\x4BE"+
		"\x5\xFE\x80\x2\x4BE\xAF\x3\x2\x2\x2\x4BF\x4C1\x5\xB2Z\x2\x4C0\x4BF\x3"+
		"\x2\x2\x2\x4C1\x4C4\x3\x2\x2\x2\x4C2\x4C0\x3\x2\x2\x2\x4C2\x4C3\x3\x2"+
		"\x2\x2\x4C3\x4C5\x3\x2\x2\x2\x4C4\x4C2\x3\x2\x2\x2\x4C5\x4C7\x5\xB4[\x2"+
		"\x4C6\x4C8\x5\xA4S\x2\x4C7\x4C6\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8"+
		"\x4C9\x3\x2\x2\x2\x4C9\x4CA\x5\xB8]\x2\x4CA\xB1\x3\x2\x2\x2\x4CB\x4D0"+
		"\x5\xE8u\x2\x4CC\x4D0\a&\x2\x2\x4CD\x4D0\a%\x2\x2\x4CE\x4D0\a$\x2\x2\x4CF"+
		"\x4CB\x3\x2\x2\x2\x4CF\x4CC\x3\x2\x2\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4CE"+
		"\x3\x2\x2\x2\x4D0\xB3\x3\x2\x2\x2\x4D1\x4D3\x5Z.\x2\x4D2\x4D1\x3\x2\x2"+
		"\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4\x4D5\x5\xB6\\\x2"+
		"\x4D5\x4D7\a<\x2\x2\x4D6\x4D8\x5\x98M\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8"+
		"\x3\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\a=\x2\x2\x4DA\xB5\x3\x2\x2"+
		"\x2\x4DB\x4DC\ai\x2\x2\x4DC\xB7\x3\x2\x2\x2\x4DD\x4DF\a>\x2\x2\x4DE\x4E0"+
		"\x5\xBA^\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x4E2\x3\x2"+
		"\x2\x2\x4E1\x4E3\x5\x100\x81\x2\x4E2\x4E1\x3\x2\x2\x2\x4E2\x4E3\x3\x2"+
		"\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4E5\a?\x2\x2\x4E5\xB9\x3\x2\x2\x2\x4E6"+
		"\x4E8\x5,\x17\x2\x4E7\x4E6\x3\x2\x2\x2\x4E7\x4E8\x3\x2\x2\x2\x4E8\x4E9"+
		"\x3\x2\x2\x2\x4E9\x4EA\a.\x2\x2\x4EA\x4EC\a<\x2\x2\x4EB\x4ED\x5\x190\xC9"+
		"\x2\x4EC\x4EB\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2"+
		"\x4EE\x4EF\a=\x2\x2\x4EF\x515\a\x42\x2\x2\x4F0\x4F2\x5,\x17\x2\x4F1\x4F0"+
		"\x3\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4F4\a+"+
		"\x2\x2\x4F4\x4F6\a<\x2\x2\x4F5\x4F7\x5\x190\xC9\x2\x4F6\x4F5\x3\x2\x2"+
		"\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x4F9\a=\x2\x2\x4F9"+
		"\x515\a\x42\x2\x2\x4FA\x4FB\x5<\x1F\x2\x4FB\x4FD\a\x44\x2\x2\x4FC\x4FE"+
		"\x5,\x17\x2\x4FD\x4FC\x3\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x4FF\x3\x2"+
		"\x2\x2\x4FF\x500\a+\x2\x2\x500\x502\a<\x2\x2\x501\x503\x5\x190\xC9\x2"+
		"\x502\x501\x3\x2\x2\x2\x502\x503\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504"+
		"\x505\a=\x2\x2\x505\x506\a\x42\x2\x2\x506\x515\x3\x2\x2\x2\x507\x508\x5"+
		"\x162\xB2\x2\x508\x50A\a\x44\x2\x2\x509\x50B\x5,\x17\x2\x50A\x509\x3\x2"+
		"\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B\x50C\x3\x2\x2\x2\x50C\x50D\a+\x2\x2"+
		"\x50D\x50F\a<\x2\x2\x50E\x510\x5\x190\xC9\x2\x50F\x50E\x3\x2\x2\x2\x50F"+
		"\x510\x3\x2\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512\a=\x2\x2\x512\x513\a"+
		"\x42\x2\x2\x513\x515\x3\x2\x2\x2\x514\x4E7\x3\x2\x2\x2\x514\x4F1\x3\x2"+
		"\x2\x2\x514\x4FA\x3\x2\x2\x2\x514\x507\x3\x2\x2\x2\x515\xBB\x3\x2\x2\x2"+
		"\x516\x518\x5X-\x2\x517\x516\x3\x2\x2\x2\x518\x51B\x3\x2\x2\x2\x519\x517"+
		"\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51C\x3\x2\x2\x2\x51B\x519\x3"+
		"\x2\x2\x2\x51C\x51D\a\x13\x2\x2\x51D\x51F\ai\x2\x2\x51E\x520\x5`\x31\x2"+
		"\x51F\x51E\x3\x2\x2\x2\x51F\x520\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521"+
		"\x522\x5\xBE`\x2\x522\xBD\x3\x2\x2\x2\x523\x525\a>\x2\x2\x524\x526\x5"+
		"\xC0\x61\x2\x525\x524\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x528\x3\x2"+
		"\x2\x2\x527\x529\a\x43\x2\x2\x528\x527\x3\x2\x2\x2\x528\x529\x3\x2\x2"+
		"\x2\x529\x52B\x3\x2\x2\x2\x52A\x52C\x5\xC6\x64\x2\x52B\x52A\x3\x2\x2\x2"+
		"\x52B\x52C\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2\x52D\x52E\a?\x2\x2\x52E\xBF"+
		"\x3\x2\x2\x2\x52F\x534\x5\xC2\x62\x2\x530\x531\a\x43\x2\x2\x531\x533\x5"+
		"\xC2\x62\x2\x532\x530\x3\x2\x2\x2\x533\x536\x3\x2\x2\x2\x534\x532\x3\x2"+
		"\x2\x2\x534\x535\x3\x2\x2\x2\x535\xC1\x3\x2\x2\x2\x536\x534\x3\x2\x2\x2"+
		"\x537\x539\x5\xC4\x63\x2\x538\x537\x3\x2\x2\x2\x539\x53C\x3\x2\x2\x2\x53A"+
		"\x538\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53D\x3\x2\x2\x2\x53C\x53A"+
		"\x3\x2\x2\x2\x53D\x543\ai\x2\x2\x53E\x540\a<\x2\x2\x53F\x541\x5\x190\xC9"+
		"\x2\x540\x53F\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2"+
		"\x542\x544\a=\x2\x2\x543\x53E\x3\x2\x2\x2\x543\x544\x3\x2\x2\x2\x544\x546"+
		"\x3\x2\x2\x2\x545\x547\x5\x64\x33\x2\x546\x545\x3\x2\x2\x2\x546\x547\x3"+
		"\x2\x2\x2\x547\xC3\x3\x2\x2\x2\x548\x549\x5\xE8u\x2\x549\xC5\x3\x2\x2"+
		"\x2\x54A\x54E\a\x42\x2\x2\x54B\x54D\x5\x66\x34\x2\x54C\x54B\x3\x2\x2\x2"+
		"\x54D\x550\x3\x2\x2\x2\x54E\x54C\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F"+
		"\xC7\x3\x2\x2\x2\x550\x54E\x3\x2\x2\x2\x551\x554\x5\xCA\x66\x2\x552\x554"+
		"\x5\xDCo\x2\x553\x551\x3\x2\x2\x2\x553\x552\x3\x2\x2\x2\x554\xC9\x3\x2"+
		"\x2\x2\x555\x557\x5\xCCg\x2\x556\x555\x3\x2\x2\x2\x557\x55A\x3\x2\x2\x2"+
		"\x558\x556\x3\x2\x2\x2\x558\x559\x3\x2\x2\x2\x559\x55B\x3\x2\x2\x2\x55A"+
		"\x558\x3\x2\x2\x2\x55B\x55C\a\x1F\x2\x2\x55C\x55E\ai\x2\x2\x55D\x55F\x5"+
		"Z.\x2\x55E\x55D\x3\x2\x2\x2\x55E\x55F\x3\x2\x2\x2\x55F\x561\x3\x2\x2\x2"+
		"\x560\x562\x5\xCEh\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3\x2\x2\x2\x562"+
		"\x563\x3\x2\x2\x2\x563\x564\x5\xD0i\x2\x564\xCB\x3\x2\x2\x2\x565\x56D"+
		"\x5\xE8u\x2\x566\x56D\a&\x2\x2\x567\x56D\a%\x2\x2\x568\x56D\a$\x2\x2\x569"+
		"\x56D\a\x4\x2\x2\x56A\x56D\a)\x2\x2\x56B\x56D\a*\x2\x2\x56C\x565\x3\x2"+
		"\x2\x2\x56C\x566\x3\x2\x2\x2\x56C\x567\x3\x2\x2\x2\x56C\x568\x3\x2\x2"+
		"\x2\x56C\x569\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56C\x56B\x3\x2\x2\x2"+
		"\x56D\xCD\x3\x2\x2\x2\x56E\x56F\a\x14\x2\x2\x56F\x570\x5\x62\x32\x2\x570"+
		"\xCF\x3\x2\x2\x2\x571\x575\a>\x2\x2\x572\x574\x5\xD2j\x2\x573\x572\x3"+
		"\x2\x2\x2\x574\x577\x3\x2\x2\x2\x575\x573\x3\x2\x2\x2\x575\x576\x3\x2"+
		"\x2\x2\x576\x578\x3\x2\x2\x2\x577\x575\x3\x2\x2\x2\x578\x579\a?\x2\x2"+
		"\x579\xD1\x3\x2\x2\x2\x57A\x580\x5\xD4k\x2\x57B\x580\x5\xD8m\x2\x57C\x580"+
		"\x5T+\x2\x57D\x580\x5\xC8\x65\x2\x57E\x580\a\x42\x2\x2\x57F\x57A\x3\x2"+
		"\x2\x2\x57F\x57B\x3\x2\x2\x2\x57F\x57C\x3\x2\x2\x2\x57F\x57D\x3\x2\x2"+
		"\x2\x57F\x57E\x3\x2\x2\x2\x580\xD3\x3\x2\x2\x2\x581\x583\x5\xD6l\x2\x582"+
		"\x581\x3\x2\x2\x2\x583\x586\x3\x2\x2\x2\x584\x582\x3\x2\x2\x2\x584\x585"+
		"\x3\x2\x2\x2\x585\x587\x3\x2\x2\x2\x586\x584\x3\x2\x2\x2\x587\x588\x5"+
		"v<\x2\x588\x589\x5n\x38\x2\x589\x58A\a\x42\x2\x2\x58A\xD5\x3\x2\x2\x2"+
		"\x58B\x590\x5\xE8u\x2\x58C\x590\a&\x2\x2\x58D\x590\a)\x2\x2\x58E\x590"+
		"\a\x15\x2\x2\x58F\x58B\x3\x2\x2\x2\x58F\x58C\x3\x2\x2\x2\x58F\x58D\x3"+
		"\x2\x2\x2\x58F\x58E\x3\x2\x2\x2\x590\xD7\x3\x2\x2\x2\x591\x593\x5\xDA"+
		"n\x2\x592\x591\x3\x2\x2\x2\x593\x596\x3\x2\x2\x2\x594\x592\x3\x2\x2\x2"+
		"\x594\x595\x3\x2\x2\x2\x595\x597\x3\x2\x2\x2\x596\x594\x3\x2\x2\x2\x597"+
		"\x598\x5\x92J\x2\x598\x599\x5\xAAV\x2\x599\xD9\x3\x2\x2\x2\x59A\x5A1\x5"+
		"\xE8u\x2\x59B\x5A1\a&\x2\x2\x59C\x5A1\a\x4\x2\x2\x59D\x5A1\a\xF\x2\x2"+
		"\x59E\x5A1\a)\x2\x2\x59F\x5A1\a*\x2\x2\x5A0\x59A\x3\x2\x2\x2\x5A0\x59B"+
		"\x3\x2\x2\x2\x5A0\x59C\x3\x2\x2\x2\x5A0\x59D\x3\x2\x2\x2\x5A0\x59E\x3"+
		"\x2\x2\x2\x5A0\x59F\x3\x2\x2\x2\x5A1\xDB\x3\x2\x2\x2\x5A2\x5A4\x5\xCC"+
		"g\x2\x5A3\x5A2\x3\x2\x2\x2\x5A4\x5A7\x3\x2\x2\x2\x5A5\x5A3\x3\x2\x2\x2"+
		"\x5A5\x5A6\x3\x2\x2\x2\x5A6\x5A8\x3\x2\x2\x2\x5A7\x5A5\x3\x2\x2\x2\x5A8"+
		"\x5A9\aj\x2\x2\x5A9\x5AA\a\x1F\x2\x2\x5AA\x5AB\ai\x2\x2\x5AB\x5AC\x5\xDE"+
		"p\x2\x5AC\xDD\x3\x2\x2\x2\x5AD\x5B1\a>\x2\x2\x5AE\x5B0\x5\xE0q\x2\x5AF"+
		"\x5AE\x3\x2\x2\x2\x5B0\x5B3\x3\x2\x2\x2\x5B1\x5AF\x3\x2\x2\x2\x5B1\x5B2"+
		"\x3\x2\x2\x2\x5B2\x5B4\x3\x2\x2\x2\x5B3\x5B1\x3\x2\x2\x2\x5B4\x5B5\a?"+
		"\x2\x2\x5B5\xDF\x3\x2\x2\x2\x5B6\x5BC\x5\xE2r\x2\x5B7\x5BC\x5\xD4k\x2"+
		"\x5B8\x5BC\x5T+\x2\x5B9\x5BC\x5\xC8\x65\x2\x5BA\x5BC\a\x42\x2\x2\x5BB"+
		"\x5B6\x3\x2\x2\x2\x5BB\x5B7\x3\x2\x2\x2\x5BB\x5B8\x3\x2\x2\x2\x5BB\x5B9"+
		"\x3\x2\x2\x2\x5BB\x5BA\x3\x2\x2\x2\x5BC\xE1\x3\x2\x2\x2\x5BD\x5BF\x5\xE4"+
		"s\x2\x5BE\x5BD\x3\x2\x2\x2\x5BF\x5C2\x3\x2\x2\x2\x5C0\x5BE\x3\x2\x2\x2"+
		"\x5C0\x5C1\x3\x2\x2\x2\x5C1\x5C3\x3\x2\x2\x2\x5C2\x5C0\x3\x2\x2\x2\x5C3"+
		"\x5C4\x5v<\x2\x5C4\x5C5\ai\x2\x2\x5C5\x5C6\a<\x2\x2\x5C6\x5C8\a=\x2\x2"+
		"\x5C7\x5C9\x5\"\x12\x2\x5C8\x5C7\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9"+
		"\x5CB\x3\x2\x2\x2\x5CA\x5CC\x5\xE6t\x2\x5CB\x5CA\x3\x2\x2\x2\x5CB\x5CC"+
		"\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CE\a\x42\x2\x2\x5CE\xE3\x3\x2"+
		"\x2\x2\x5CF\x5D3\x5\xE8u\x2\x5D0\x5D3\a&\x2\x2\x5D1\x5D3\a\x4\x2\x2\x5D2"+
		"\x5CF\x3\x2\x2\x2\x5D2\x5D0\x3\x2\x2\x2\x5D2\x5D1\x3\x2\x2\x2\x5D3\xE5"+
		"\x3\x2\x2\x2\x5D4\x5D5\a\xF\x2\x2\x5D5\x5D6\x5\xF0y\x2\x5D6\xE7\x3\x2"+
		"\x2\x2\x5D7\x5DB\x5\xEAv\x2\x5D8\x5DB\x5\xF6|\x2\x5D9\x5DB\x5\xF8}\x2"+
		"\x5DA\x5D7\x3\x2\x2\x2\x5DA\x5D8\x3\x2\x2\x2\x5DA\x5D9\x3\x2\x2\x2\x5DB"+
		"\xE9\x3\x2\x2\x2\x5DC\x5DD\aj\x2\x2\x5DD\x5DE\x5\x38\x1D\x2\x5DE\x5E0"+
		"\a<\x2\x2\x5DF\x5E1\x5\xECw\x2\x5E0\x5DF\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2"+
		"\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E3\a=\x2\x2\x5E3\xEB\x3\x2\x2\x2\x5E4"+
		"\x5E9\x5\xEEx\x2\x5E5\x5E6\a\x43\x2\x2\x5E6\x5E8\x5\xEEx\x2\x5E7\x5E5"+
		"\x3\x2\x2\x2\x5E8\x5EB\x3\x2\x2\x2\x5E9\x5E7\x3\x2\x2\x2\x5E9\x5EA\x3"+
		"\x2\x2\x2\x5EA\xED\x3\x2\x2\x2\x5EB\x5E9\x3\x2\x2\x2\x5EC\x5ED\ai\x2\x2"+
		"\x5ED\x5EE\a\x45\x2\x2\x5EE\x5EF\x5\xF0y\x2\x5EF\xEF\x3\x2\x2\x2\x5F0"+
		"\x5F4\x5\x1CA\xE6\x2\x5F1\x5F4\x5\xF2z\x2\x5F2\x5F4\x5\xE8u\x2\x5F3\x5F0"+
		"\x3\x2\x2\x2\x5F3\x5F1\x3\x2\x2\x2\x5F3\x5F2\x3\x2\x2\x2\x5F4\xF1\x3\x2"+
		"\x2\x2\x5F5\x5F7\a>\x2\x2\x5F6\x5F8\x5\xF4{\x2\x5F7\x5F6\x3\x2\x2\x2\x5F7"+
		"\x5F8\x3\x2\x2\x2\x5F8\x5FA\x3\x2\x2\x2\x5F9\x5FB\a\x43\x2\x2\x5FA\x5F9"+
		"\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\a?"+
		"\x2\x2\x5FD\xF3\x3\x2\x2\x2\x5FE\x603\x5\xF0y\x2\x5FF\x600\a\x43\x2\x2"+
		"\x600\x602\x5\xF0y\x2\x601\x5FF\x3\x2\x2\x2\x602\x605\x3\x2\x2\x2\x603"+
		"\x601\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\xF5\x3\x2\x2\x2\x605\x603"+
		"\x3\x2\x2\x2\x606\x607\aj\x2\x2\x607\x608\x5\x38\x1D\x2\x608\xF7\x3\x2"+
		"\x2\x2\x609\x60A\aj\x2\x2\x60A\x60B\x5\x38\x1D\x2\x60B\x60C\a<\x2\x2\x60C"+
		"\x60D\x5\xF0y\x2\x60D\x60E\a=\x2\x2\x60E\xF9\x3\x2\x2\x2\x60F\x611\a>"+
		"\x2\x2\x610\x612\x5\xFC\x7F\x2\x611\x610\x3\x2\x2\x2\x611\x612\x3\x2\x2"+
		"\x2\x612\x614\x3\x2\x2\x2\x613\x615\a\x43\x2\x2\x614\x613\x3\x2\x2\x2"+
		"\x614\x615\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2\x616\x617\a?\x2\x2\x617\xFB"+
		"\x3\x2\x2\x2\x618\x61D\x5t;\x2\x619\x61A\a\x43\x2\x2\x61A\x61C\x5t;\x2"+
		"\x61B\x619\x3\x2\x2\x2\x61C\x61F\x3\x2\x2\x2\x61D\x61B\x3\x2\x2\x2\x61D"+
		"\x61E\x3\x2\x2\x2\x61E\xFD\x3\x2\x2\x2\x61F\x61D\x3\x2\x2\x2\x620\x622"+
		"\a>\x2\x2\x621\x623\x5\x100\x81\x2\x622\x621\x3\x2\x2\x2\x622\x623\x3"+
		"\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624\x625\a?\x2\x2\x625\xFF\x3\x2\x2\x2"+
		"\x626\x62A\x5\x102\x82\x2\x627\x629\x5\x102\x82\x2\x628\x627\x3\x2\x2"+
		"\x2\x629\x62C\x3\x2\x2\x2\x62A\x628\x3\x2\x2\x2\x62A\x62B\x3\x2\x2\x2"+
		"\x62B\x101\x3\x2\x2\x2\x62C\x62A\x3\x2\x2\x2\x62D\x631\x5\x104\x83\x2"+
		"\x62E\x631\x5T+\x2\x62F\x631\x5\x108\x85\x2\x630\x62D\x3\x2\x2\x2\x630"+
		"\x62E\x3\x2\x2\x2\x630\x62F\x3\x2\x2\x2\x631\x103\x3\x2\x2\x2\x632\x633"+
		"\x5\x106\x84\x2\x633\x634\a\x42\x2\x2\x634\x105\x3\x2\x2\x2\x635\x637"+
		"\x5\x9EP\x2\x636\x635\x3\x2\x2\x2\x637\x63A\x3\x2\x2\x2\x638\x636\x3\x2"+
		"\x2\x2\x638\x639\x3\x2\x2\x2\x639\x63B\x3\x2\x2\x2\x63A\x638\x3\x2\x2"+
		"\x2\x63B\x63C\x5v<\x2\x63C\x63D\x5n\x38\x2\x63D\x107\x3\x2\x2\x2\x63E"+
		"\x645\x5\x10C\x87\x2\x63F\x645\x5\x110\x89\x2\x640\x645\x5\x118\x8D\x2"+
		"\x641\x645\x5\x11A\x8E\x2\x642\x645\x5\x12C\x97\x2\x643\x645\x5\x132\x9A"+
		"\x2\x644\x63E\x3\x2\x2\x2\x644\x63F\x3\x2\x2\x2\x644\x640\x3\x2\x2\x2"+
		"\x644\x641\x3\x2\x2\x2\x644\x642\x3\x2\x2\x2\x644\x643\x3\x2\x2\x2\x645"+
		"\x109\x3\x2\x2\x2\x646\x64C\x5\x10C\x87\x2\x647\x64C\x5\x112\x8A\x2\x648"+
		"\x64C\x5\x11C\x8F\x2\x649\x64C\x5\x12E\x98\x2\x64A\x64C\x5\x134\x9B\x2"+
		"\x64B\x646\x3\x2\x2\x2\x64B\x647\x3\x2\x2\x2\x64B\x648\x3\x2\x2\x2\x64B"+
		"\x649\x3\x2\x2\x2\x64B\x64A\x3\x2\x2\x2\x64C\x10B\x3\x2\x2\x2\x64D\x65A"+
		"\x5\xFE\x80\x2\x64E\x65A\x5\x10E\x88\x2\x64F\x65A\x5\x114\x8B\x2\x650"+
		"\x65A\x5\x11E\x90\x2\x651\x65A\x5\x120\x91\x2\x652\x65A\x5\x130\x99\x2"+
		"\x653\x65A\x5\x144\xA3\x2\x654\x65A\x5\x146\xA4\x2\x655\x65A\x5\x148\xA5"+
		"\x2\x656\x65A\x5\x14C\xA7\x2\x657\x65A\x5\x14A\xA6\x2\x658\x65A\x5\x14E"+
		"\xA8\x2\x659\x64D\x3\x2\x2\x2\x659\x64E\x3\x2\x2\x2\x659\x64F\x3\x2\x2"+
		"\x2\x659\x650\x3\x2\x2\x2\x659\x651\x3\x2\x2\x2\x659\x652\x3\x2\x2\x2"+
		"\x659\x653\x3\x2\x2\x2\x659\x654\x3\x2\x2\x2\x659\x655\x3\x2\x2\x2\x659"+
		"\x656\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x659\x658\x3\x2\x2\x2\x65A\x10D"+
		"\x3\x2\x2\x2\x65B\x65C\a\x42\x2\x2\x65C\x10F\x3\x2\x2\x2\x65D\x65E\ai"+
		"\x2\x2\x65E\x65F\aK\x2\x2\x65F\x660\x5\x108\x85\x2\x660\x111\x3\x2\x2"+
		"\x2\x661\x662\ai\x2\x2\x662\x663\aK\x2\x2\x663\x664\x5\x10A\x86\x2\x664"+
		"\x113\x3\x2\x2\x2\x665\x666\x5\x116\x8C\x2\x666\x667\a\x42\x2\x2\x667"+
		"\x115\x3\x2\x2\x2\x668\x670\x5\x1AC\xD7\x2\x669\x670\x5\x214\x10B\x2\x66A"+
		"\x670\x5\x216\x10C\x2\x66B\x670\x5\x220\x111\x2\x66C\x670\x5\x224\x113"+
		"\x2\x66D\x670\x5\x18A\xC6\x2\x66E\x670\x5\x176\xBC\x2\x66F\x668\x3\x2"+
		"\x2\x2\x66F\x669\x3\x2\x2\x2\x66F\x66A\x3\x2\x2\x2\x66F\x66B\x3\x2\x2"+
		"\x2\x66F\x66C\x3\x2\x2\x2\x66F\x66D\x3\x2\x2\x2\x66F\x66E\x3\x2\x2\x2"+
		"\x670\x117\x3\x2\x2\x2\x671\x672\a\x19\x2\x2\x672\x673\a<\x2\x2\x673\x674"+
		"\x5\x1A0\xD1\x2\x674\x675\a=\x2\x2\x675\x676\x5\x108\x85\x2\x676\x119"+
		"\x3\x2\x2\x2\x677\x678\a\x19\x2\x2\x678\x679\a<\x2\x2\x679\x67A\x5\x1A0"+
		"\xD1\x2\x67A\x67B\a=\x2\x2\x67B\x67C\x5\x10A\x86\x2\x67C\x67D\a\x12\x2"+
		"\x2\x67D\x67E\x5\x108\x85\x2\x67E\x11B\x3\x2\x2\x2\x67F\x680\a\x19\x2"+
		"\x2\x680\x681\a<\x2\x2\x681\x682\x5\x1A0\xD1\x2\x682\x683\a=\x2\x2\x683"+
		"\x684\x5\x10A\x86\x2\x684\x685\a\x12\x2\x2\x685\x686\x5\x10A\x86\x2\x686"+
		"\x11D\x3\x2\x2\x2\x687\x688\a\x5\x2\x2\x688\x689\x5\x1A0\xD1\x2\x689\x68A"+
		"\a\x42\x2\x2\x68A\x692\x3\x2\x2\x2\x68B\x68C\a\x5\x2\x2\x68C\x68D\x5\x1A0"+
		"\xD1\x2\x68D\x68E\aK\x2\x2\x68E\x68F\x5\x1A0\xD1\x2\x68F\x690\a\x42\x2"+
		"\x2\x690\x692\x3\x2\x2\x2\x691\x687\x3\x2\x2\x2\x691\x68B\x3\x2\x2\x2"+
		"\x692\x11F\x3\x2\x2\x2\x693\x694\a,\x2\x2\x694\x695\a<\x2\x2\x695\x696"+
		"\x5\x1A0\xD1\x2\x696\x697\a=\x2\x2\x697\x698\x5\x122\x92\x2\x698\x121"+
		"\x3\x2\x2\x2\x699\x69D\a>\x2\x2\x69A\x69C\x5\x124\x93\x2\x69B\x69A\x3"+
		"\x2\x2\x2\x69C\x69F\x3\x2\x2\x2\x69D\x69B\x3\x2\x2\x2\x69D\x69E\x3\x2"+
		"\x2\x2\x69E\x6A3\x3\x2\x2\x2\x69F\x69D\x3\x2\x2\x2\x6A0\x6A2\x5\x128\x95"+
		"\x2\x6A1\x6A0\x3\x2\x2\x2\x6A2\x6A5\x3\x2\x2\x2\x6A3\x6A1\x3\x2\x2\x2"+
		"\x6A3\x6A4\x3\x2\x2\x2\x6A4\x6A6\x3\x2\x2\x2\x6A5\x6A3\x3\x2\x2\x2\x6A6"+
		"\x6A7\a?\x2\x2\x6A7\x123\x3\x2\x2\x2\x6A8\x6A9\x5\x126\x94\x2\x6A9\x6AA"+
		"\x5\x100\x81\x2\x6AA\x125\x3\x2\x2\x2\x6AB\x6AF\x5\x128\x95\x2\x6AC\x6AE"+
		"\x5\x128\x95\x2\x6AD\x6AC\x3\x2\x2\x2\x6AE\x6B1\x3\x2\x2\x2\x6AF\x6AD"+
		"\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x127\x3\x2\x2\x2\x6B1\x6AF\x3"+
		"\x2\x2\x2\x6B2\x6B3\a\t\x2\x2\x6B3\x6B4\x5\x19E\xD0\x2\x6B4\x6B5\aK\x2"+
		"\x2\x6B5\x6BD\x3\x2\x2\x2\x6B6\x6B7\a\t\x2\x2\x6B7\x6B8\x5\x12A\x96\x2"+
		"\x6B8\x6B9\aK\x2\x2\x6B9\x6BD\x3\x2\x2\x2\x6BA\x6BB\a\xF\x2\x2\x6BB\x6BD"+
		"\aK\x2\x2\x6BC\x6B2\x3\x2\x2\x2\x6BC\x6B6\x3\x2\x2\x2\x6BC\x6BA\x3\x2"+
		"\x2\x2\x6BD\x129\x3\x2\x2\x2\x6BE\x6BF\ai\x2\x2\x6BF\x12B\x3\x2\x2\x2"+
		"\x6C0\x6C1\a\x35\x2\x2\x6C1\x6C2\a<\x2\x2\x6C2\x6C3\x5\x1A0\xD1\x2\x6C3"+
		"\x6C4\a=\x2\x2\x6C4\x6C5\x5\x108\x85\x2\x6C5\x12D\x3\x2\x2\x2\x6C6\x6C7"+
		"\a\x35\x2\x2\x6C7\x6C8\a<\x2\x2\x6C8\x6C9\x5\x1A0\xD1\x2\x6C9\x6CA\a="+
		"\x2\x2\x6CA\x6CB\x5\x10A\x86\x2\x6CB\x12F\x3\x2\x2\x2\x6CC\x6CD\a\x10"+
		"\x2\x2\x6CD\x6CE\x5\x108\x85\x2\x6CE\x6CF\a\x35\x2\x2\x6CF\x6D0\a<\x2"+
		"\x2\x6D0\x6D1\x5\x1A0\xD1\x2\x6D1\x6D2\a=\x2\x2\x6D2\x6D3\a\x42\x2\x2"+
		"\x6D3\x131\x3\x2\x2\x2\x6D4\x6D7\x5\x136\x9C\x2\x6D5\x6D7\x5\x140\xA1"+
		"\x2\x6D6\x6D4\x3\x2\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D7\x133\x3\x2\x2\x2"+
		"\x6D8\x6DB\x5\x138\x9D\x2\x6D9\x6DB\x5\x142\xA2\x2\x6DA\x6D8\x3\x2\x2"+
		"\x2\x6DA\x6D9\x3\x2\x2\x2\x6DB\x135\x3\x2\x2\x2\x6DC\x6DD\a\x18\x2\x2"+
		"\x6DD\x6DF\a<\x2\x2\x6DE\x6E0\x5\x13A\x9E\x2\x6DF\x6DE\x3\x2\x2\x2\x6DF"+
		"\x6E0\x3\x2\x2\x2\x6E0\x6E1\x3\x2\x2\x2\x6E1\x6E3\a\x42\x2\x2\x6E2\x6E4"+
		"\x5\x1A0\xD1\x2\x6E3\x6E2\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E5"+
		"\x3\x2\x2\x2\x6E5\x6E7\a\x42\x2\x2\x6E6\x6E8\x5\x13C\x9F\x2\x6E7\x6E6"+
		"\x3\x2\x2\x2\x6E7\x6E8\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6EA\a="+
		"\x2\x2\x6EA\x6EB\x5\x108\x85\x2\x6EB\x137\x3\x2\x2\x2\x6EC\x6ED\a\x18"+
		"\x2\x2\x6ED\x6EF\a<\x2\x2\x6EE\x6F0\x5\x13A\x9E\x2\x6EF\x6EE\x3\x2\x2"+
		"\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F3\a\x42\x2\x2"+
		"\x6F2\x6F4\x5\x1A0\xD1\x2\x6F3\x6F2\x3\x2\x2\x2\x6F3\x6F4\x3\x2\x2\x2"+
		"\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F7\a\x42\x2\x2\x6F6\x6F8\x5\x13C\x9F\x2"+
		"\x6F7\x6F6\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9"+
		"\x6FA\a=\x2\x2\x6FA\x6FB\x5\x10A\x86\x2\x6FB\x139\x3\x2\x2\x2\x6FC\x6FF"+
		"\x5\x13E\xA0\x2\x6FD\x6FF\x5\x106\x84\x2\x6FE\x6FC\x3\x2\x2\x2\x6FE\x6FD"+
		"\x3\x2\x2\x2\x6FF\x13B\x3\x2\x2\x2\x700\x701\x5\x13E\xA0\x2\x701\x13D"+
		"\x3\x2\x2\x2\x702\x707\x5\x116\x8C\x2\x703\x704\a\x43\x2\x2\x704\x706"+
		"\x5\x116\x8C\x2\x705\x703\x3\x2\x2\x2\x706\x709\x3\x2\x2\x2\x707\x705"+
		"\x3\x2\x2\x2\x707\x708\x3\x2\x2\x2\x708\x13F\x3\x2\x2\x2\x709\x707\x3"+
		"\x2\x2\x2\x70A\x70B\a\x18\x2\x2\x70B\x70F\a<\x2\x2\x70C\x70E\x5\x9EP\x2"+
		"\x70D\x70C\x3\x2\x2\x2\x70E\x711\x3\x2\x2\x2\x70F\x70D\x3\x2\x2\x2\x70F"+
		"\x710\x3\x2\x2\x2\x710\x712\x3\x2\x2\x2\x711\x70F\x3\x2\x2\x2\x712\x713"+
		"\x5v<\x2\x713\x714\x5r:\x2\x714\x715\aK\x2\x2\x715\x716\x5\x1A0\xD1\x2"+
		"\x716\x717\a=\x2\x2\x717\x718\x5\x108\x85\x2\x718\x141\x3\x2\x2\x2\x719"+
		"\x71A\a\x18\x2\x2\x71A\x71E\a<\x2\x2\x71B\x71D\x5\x9EP\x2\x71C\x71B\x3"+
		"\x2\x2\x2\x71D\x720\x3\x2\x2\x2\x71E\x71C\x3\x2\x2\x2\x71E\x71F\x3\x2"+
		"\x2\x2\x71F\x721\x3\x2\x2\x2\x720\x71E\x3\x2\x2\x2\x721\x722\x5v<\x2\x722"+
		"\x723\x5r:\x2\x723\x724\aK\x2\x2\x724\x725\x5\x1A0\xD1\x2\x725\x726\a"+
		"=\x2\x2\x726\x727\x5\x10A\x86\x2\x727\x143\x3\x2\x2\x2\x728\x72A\a\a\x2"+
		"\x2\x729\x72B\ai\x2\x2\x72A\x729\x3\x2\x2\x2\x72A\x72B\x3\x2\x2\x2\x72B"+
		"\x72C\x3\x2\x2\x2\x72C\x72D\a\x42\x2\x2\x72D\x145\x3\x2\x2\x2\x72E\x730"+
		"\a\xE\x2\x2\x72F\x731\ai\x2\x2\x730\x72F\x3\x2\x2\x2\x730\x731\x3\x2\x2"+
		"\x2\x731\x732\x3\x2\x2\x2\x732\x733\a\x42\x2\x2\x733\x147\x3\x2\x2\x2"+
		"\x734\x736\a\'\x2\x2\x735\x737\x5\x1A0\xD1\x2\x736\x735\x3\x2\x2\x2\x736"+
		"\x737\x3\x2\x2\x2\x737\x738\x3\x2\x2\x2\x738\x739\a\x42\x2\x2\x739\x149"+
		"\x3\x2\x2\x2\x73A\x73B\a/\x2\x2\x73B\x73C\x5\x1A0\xD1\x2\x73C\x73D\a\x42"+
		"\x2\x2\x73D\x14B\x3\x2\x2\x2\x73E\x73F\a-\x2\x2\x73F\x740\a<\x2\x2\x740"+
		"\x741\x5\x1A0\xD1\x2\x741\x742\a=\x2\x2\x742\x743\x5\xFE\x80\x2\x743\x14D"+
		"\x3\x2\x2\x2\x744\x745\a\x32\x2\x2\x745\x746\x5\xFE\x80\x2\x746\x747\x5"+
		"\x150\xA9\x2\x747\x751\x3\x2\x2\x2\x748\x749\a\x32\x2\x2\x749\x74B\x5"+
		"\xFE\x80\x2\x74A\x74C\x5\x150\xA9\x2\x74B\x74A\x3\x2\x2\x2\x74B\x74C\x3"+
		"\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x5\x158\xAD\x2\x74E\x751\x3"+
		"\x2\x2\x2\x74F\x751\x5\x15A\xAE\x2\x750\x744\x3\x2\x2\x2\x750\x748\x3"+
		"\x2\x2\x2\x750\x74F\x3\x2\x2\x2\x751\x14F\x3\x2\x2\x2\x752\x756\x5\x152"+
		"\xAA\x2\x753\x755\x5\x152\xAA\x2\x754\x753\x3\x2\x2\x2\x755\x758\x3\x2"+
		"\x2\x2\x756\x754\x3\x2\x2\x2\x756\x757\x3\x2\x2\x2\x757\x151\x3\x2\x2"+
		"\x2\x758\x756\x3\x2\x2\x2\x759\x75A\a\n\x2\x2\x75A\x75B\a<\x2\x2\x75B"+
		"\x75C\x5\x154\xAB\x2\x75C\x75D\a=\x2\x2\x75D\x75E\x5\xFE\x80\x2\x75E\x153"+
		"\x3\x2\x2\x2\x75F\x761\x5\x9EP\x2\x760\x75F\x3\x2\x2\x2\x761\x764\x3\x2"+
		"\x2\x2\x762\x760\x3\x2\x2\x2\x762\x763\x3\x2\x2\x2\x763\x765\x3\x2\x2"+
		"\x2\x764\x762\x3\x2\x2\x2\x765\x766\x5\x156\xAC\x2\x766\x767\x5r:\x2\x767"+
		"\x155\x3\x2\x2\x2\x768\x76D\x5~@\x2\x769\x76A\aY\x2\x2\x76A\x76C\x5\x12"+
		"\n\x2\x76B\x769\x3\x2\x2\x2\x76C\x76F\x3\x2\x2\x2\x76D\x76B\x3\x2\x2\x2"+
		"\x76D\x76E\x3\x2\x2\x2\x76E\x157\x3\x2\x2\x2\x76F\x76D\x3\x2\x2\x2\x770"+
		"\x771\a\x16\x2\x2\x771\x772\x5\xFE\x80\x2\x772\x159\x3\x2\x2\x2\x773\x774"+
		"\a\x32\x2\x2\x774\x775\x5\x15C\xAF\x2\x775\x777\x5\xFE\x80\x2\x776\x778"+
		"\x5\x150\xA9\x2\x777\x776\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x77A"+
		"\x3\x2\x2\x2\x779\x77B\x5\x158\xAD\x2\x77A\x779\x3\x2\x2\x2\x77A\x77B"+
		"\x3\x2\x2\x2\x77B\x15B\x3\x2\x2\x2\x77C\x77D\a<\x2\x2\x77D\x77F\x5\x15E"+
		"\xB0\x2\x77E\x780\a\x42\x2\x2\x77F\x77E\x3\x2\x2\x2\x77F\x780\x3\x2\x2"+
		"\x2\x780\x781\x3\x2\x2\x2\x781\x782\a=\x2\x2\x782\x15D\x3\x2\x2\x2\x783"+
		"\x788\x5\x160\xB1\x2\x784\x785\a\x42\x2\x2\x785\x787\x5\x160\xB1\x2\x786"+
		"\x784\x3\x2\x2\x2\x787\x78A\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x788\x789"+
		"\x3\x2\x2\x2\x789\x15F\x3\x2\x2\x2\x78A\x788\x3\x2\x2\x2\x78B\x78D\x5"+
		"\x9EP\x2\x78C\x78B\x3\x2\x2\x2\x78D\x790\x3\x2\x2\x2\x78E\x78C\x3\x2\x2"+
		"\x2\x78E\x78F\x3\x2\x2\x2\x78F\x791\x3\x2\x2\x2\x790\x78E\x3\x2\x2\x2"+
		"\x791\x792\x5v<\x2\x792\x793\x5r:\x2\x793\x794\a\x45\x2\x2\x794\x795\x5"+
		"\x1A0\xD1\x2\x795\x161\x3\x2\x2\x2\x796\x799\x5\x170\xB9\x2\x797\x799"+
		"\x5\x198\xCD\x2\x798\x796\x3\x2\x2\x2\x798\x797\x3\x2\x2\x2\x799\x79D"+
		"\x3\x2\x2\x2\x79A\x79C\x5\x16A\xB6\x2\x79B\x79A\x3\x2\x2\x2\x79C\x79F"+
		"\x3\x2\x2\x2\x79D\x79B\x3\x2\x2\x2\x79D\x79E\x3\x2\x2\x2\x79E\x163\x3"+
		"\x2\x2\x2\x79F\x79D\x3\x2\x2\x2\x7A0\x7BE\x5\x2\x2\x2\x7A1\x7A6\x5\x38"+
		"\x1D\x2\x7A2\x7A3\a@\x2\x2\x7A3\x7A5\a\x41\x2\x2\x7A4\x7A2\x3\x2\x2\x2"+
		"\x7A5\x7A8\x3\x2\x2\x2\x7A6\x7A4\x3\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7"+
		"\x7A9\x3\x2\x2\x2\x7A8\x7A6\x3\x2\x2\x2\x7A9\x7AA\a\x44\x2\x2\x7AA\x7AB"+
		"\a\f\x2\x2\x7AB\x7BE\x3\x2\x2\x2\x7AC\x7AD\a\x33\x2\x2\x7AD\x7AE\a\x44"+
		"\x2\x2\x7AE\x7BE\a\f\x2\x2\x7AF\x7BE\a.\x2\x2\x7B0\x7B1\x5\x38\x1D\x2"+
		"\x7B1\x7B2\a\x44\x2\x2\x7B2\x7B3\a.\x2\x2\x7B3\x7BE\x3\x2\x2\x2\x7B4\x7B5"+
		"\a<\x2\x2\x7B5\x7B6\x5\x1A0\xD1\x2\x7B6\x7B7\a=\x2\x2\x7B7\x7BE\x3\x2"+
		"\x2\x2\x7B8\x7BE\x5\x176\xBC\x2\x7B9\x7BE\x5\x17E\xC0\x2\x7BA\x7BE\x5"+
		"\x184\xC3\x2\x7BB\x7BE\x5\x18A\xC6\x2\x7BC\x7BE\x5\x192\xCA\x2\x7BD\x7A0"+
		"\x3\x2\x2\x2\x7BD\x7A1\x3\x2\x2\x2\x7BD\x7AC\x3\x2\x2\x2\x7BD\x7AF\x3"+
		"\x2\x2\x2\x7BD\x7B0\x3\x2\x2\x2\x7BD\x7B4\x3\x2\x2\x2\x7BD\x7B8\x3\x2"+
		"\x2\x2\x7BD\x7B9\x3\x2\x2\x2\x7BD\x7BA\x3\x2\x2\x2\x7BD\x7BB\x3\x2\x2"+
		"\x2\x7BD\x7BC\x3\x2\x2\x2\x7BE\x165\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2"+
		"\x7C0\x167\x3\x2\x2\x2\x7C1\x7DE\x5\x2\x2\x2\x7C2\x7C7\x5\x38\x1D\x2\x7C3"+
		"\x7C4\a@\x2\x2\x7C4\x7C6\a\x41\x2\x2\x7C5\x7C3\x3\x2\x2\x2\x7C6\x7C9\x3"+
		"\x2\x2\x2\x7C7\x7C5\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7CA\x3\x2"+
		"\x2\x2\x7C9\x7C7\x3\x2\x2\x2\x7CA\x7CB\a\x44\x2\x2\x7CB\x7CC\a\f\x2\x2"+
		"\x7CC\x7DE\x3\x2\x2\x2\x7CD\x7CE\a\x33\x2\x2\x7CE\x7CF\a\x44\x2\x2\x7CF"+
		"\x7DE\a\f\x2\x2\x7D0\x7DE\a.\x2\x2\x7D1\x7D2\x5\x38\x1D\x2\x7D2\x7D3\a"+
		"\x44\x2\x2\x7D3\x7D4\a.\x2\x2\x7D4\x7DE\x3\x2\x2\x2\x7D5\x7D6\a<\x2\x2"+
		"\x7D6\x7D7\x5\x1A0\xD1\x2\x7D7\x7D8\a=\x2\x2\x7D8\x7DE\x3\x2\x2\x2\x7D9"+
		"\x7DE\x5\x176\xBC\x2\x7DA\x7DE\x5\x17E\xC0\x2\x7DB\x7DE\x5\x18A\xC6\x2"+
		"\x7DC\x7DE\x5\x192\xCA\x2\x7DD\x7C1\x3\x2\x2\x2\x7DD\x7C2\x3\x2\x2\x2"+
		"\x7DD\x7CD\x3\x2\x2\x2\x7DD\x7D0\x3\x2\x2\x2\x7DD\x7D1\x3\x2\x2\x2\x7DD"+
		"\x7D5\x3\x2\x2\x2\x7DD\x7D9\x3\x2\x2\x2\x7DD\x7DA\x3\x2\x2\x2\x7DD\x7DB"+
		"\x3\x2\x2\x2\x7DD\x7DC\x3\x2\x2\x2\x7DE\x169\x3\x2\x2\x2\x7DF\x7E5\x5"+
		"\x178\xBD\x2\x7E0\x7E5\x5\x180\xC1\x2\x7E1\x7E5\x5\x186\xC4\x2\x7E2\x7E5"+
		"\x5\x18C\xC7\x2\x7E3\x7E5\x5\x194\xCB\x2\x7E4\x7DF\x3\x2\x2\x2\x7E4\x7E0"+
		"\x3\x2\x2\x2\x7E4\x7E1\x3\x2\x2\x2\x7E4\x7E2\x3\x2\x2\x2\x7E4\x7E3\x3"+
		"\x2\x2\x2\x7E5\x16B\x3\x2\x2\x2\x7E6\x7E7\x3\x2\x2\x2\x7E7\x16D\x3\x2"+
		"\x2\x2\x7E8\x7ED\x5\x178\xBD\x2\x7E9\x7ED\x5\x180\xC1\x2\x7EA\x7ED\x5"+
		"\x18C\xC7\x2\x7EB\x7ED\x5\x194\xCB\x2\x7EC\x7E8\x3\x2\x2\x2\x7EC\x7E9"+
		"\x3\x2\x2\x2\x7EC\x7EA\x3\x2\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7ED\x16F\x3"+
		"\x2\x2\x2\x7EE\x817\x5\x2\x2\x2\x7EF\x7F4\x5\x38\x1D\x2\x7F0\x7F1\a@\x2"+
		"\x2\x7F1\x7F3\a\x41\x2\x2\x7F2\x7F0\x3\x2\x2\x2\x7F3\x7F6\x3\x2\x2\x2"+
		"\x7F4\x7F2\x3\x2\x2\x2\x7F4\x7F5\x3\x2\x2\x2\x7F5\x7F7\x3\x2\x2\x2\x7F6"+
		"\x7F4\x3\x2\x2\x2\x7F7\x7F8\a\x44\x2\x2\x7F8\x7F9\a\f\x2\x2\x7F9\x817"+
		"\x3\x2\x2\x2\x7FA\x7FF\x5x=\x2\x7FB\x7FC\a@\x2\x2\x7FC\x7FE\a\x41\x2\x2"+
		"\x7FD\x7FB\x3\x2\x2\x2\x7FE\x801\x3\x2\x2\x2\x7FF\x7FD\x3\x2\x2\x2\x7FF"+
		"\x800\x3\x2\x2\x2\x800\x802\x3\x2\x2\x2\x801\x7FF\x3\x2\x2\x2\x802\x803"+
		"\a\x44\x2\x2\x803\x804\a\f\x2\x2\x804\x817\x3\x2\x2\x2\x805\x806\a\x33"+
		"\x2\x2\x806\x807\a\x44\x2\x2\x807\x817\a\f\x2\x2\x808\x817\a.\x2\x2\x809"+
		"\x80A\x5\x38\x1D\x2\x80A\x80B\a\x44\x2\x2\x80B\x80C\a.\x2\x2\x80C\x817"+
		"\x3\x2\x2\x2\x80D\x80E\a<\x2\x2\x80E\x80F\x5\x1A0\xD1\x2\x80F\x810\a="+
		"\x2\x2\x810\x817\x3\x2\x2\x2\x811\x817\x5\x17A\xBE\x2\x812\x817\x5\x182"+
		"\xC2\x2\x813\x817\x5\x188\xC5\x2\x814\x817\x5\x18E\xC8\x2\x815\x817\x5"+
		"\x196\xCC\x2\x816\x7EE\x3\x2\x2\x2\x816\x7EF\x3\x2\x2\x2\x816\x7FA\x3"+
		"\x2\x2\x2\x816\x805\x3\x2\x2\x2\x816\x808\x3\x2\x2\x2\x816\x809\x3\x2"+
		"\x2\x2\x816\x80D\x3\x2\x2\x2\x816\x811\x3\x2\x2\x2\x816\x812\x3\x2\x2"+
		"\x2\x816\x813\x3\x2\x2\x2\x816\x814\x3\x2\x2\x2\x816\x815\x3\x2\x2\x2"+
		"\x817\x171\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x173\x3\x2\x2\x2\x81A"+
		"\x842\x5\x2\x2\x2\x81B\x820\x5\x38\x1D\x2\x81C\x81D\a@\x2\x2\x81D\x81F"+
		"\a\x41\x2\x2\x81E\x81C\x3\x2\x2\x2\x81F\x822\x3\x2\x2\x2\x820\x81E\x3"+
		"\x2\x2\x2\x820\x821\x3\x2\x2\x2\x821\x823\x3\x2\x2\x2\x822\x820\x3\x2"+
		"\x2\x2\x823\x824\a\x44\x2\x2\x824\x825\a\f\x2\x2\x825\x842\x3\x2\x2\x2"+
		"\x826\x82B\x5x=\x2\x827\x828\a@\x2\x2\x828\x82A\a\x41\x2\x2\x829\x827"+
		"\x3\x2\x2\x2\x82A\x82D\x3\x2\x2\x2\x82B\x829\x3\x2\x2\x2\x82B\x82C\x3"+
		"\x2\x2\x2\x82C\x82E\x3\x2\x2\x2\x82D\x82B\x3\x2\x2\x2\x82E\x82F\a\x44"+
		"\x2\x2\x82F\x830\a\f\x2\x2\x830\x842\x3\x2\x2\x2\x831\x832\a\x33\x2\x2"+
		"\x832\x833\a\x44\x2\x2\x833\x842\a\f\x2\x2\x834\x842\a.\x2\x2\x835\x836"+
		"\x5\x38\x1D\x2\x836\x837\a\x44\x2\x2\x837\x838\a.\x2\x2\x838\x842\x3\x2"+
		"\x2\x2\x839\x83A\a<\x2\x2\x83A\x83B\x5\x1A0\xD1\x2\x83B\x83C\a=\x2\x2"+
		"\x83C\x842\x3\x2\x2\x2\x83D\x842\x5\x17A\xBE\x2\x83E\x842\x5\x182\xC2"+
		"\x2\x83F\x842\x5\x18E\xC8\x2\x840\x842\x5\x196\xCC\x2\x841\x81A\x3\x2"+
		"\x2\x2\x841\x81B\x3\x2\x2\x2\x841\x826\x3\x2\x2\x2\x841\x831\x3\x2\x2"+
		"\x2\x841\x834\x3\x2\x2\x2\x841\x835\x3\x2\x2\x2\x841\x839\x3\x2\x2\x2"+
		"\x841\x83D\x3\x2\x2\x2\x841\x83E\x3\x2\x2\x2\x841\x83F\x3\x2\x2\x2\x841"+
		"\x840\x3\x2\x2\x2\x842\x175\x3\x2\x2\x2\x843\x845\a\"\x2\x2\x844\x846"+
		"\x5,\x17\x2\x845\x844\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x84A\x3\x2"+
		"\x2\x2\x847\x849\x5\xE8u\x2\x848\x847\x3\x2\x2\x2\x849\x84C\x3\x2\x2\x2"+
		"\x84A\x848\x3\x2\x2\x2\x84A\x84B\x3\x2\x2\x2\x84B\x84D\x3\x2\x2\x2\x84C"+
		"\x84A\x3\x2\x2\x2\x84D\x858\ai\x2\x2\x84E\x852\a\x44\x2\x2\x84F\x851\x5"+
		"\xE8u\x2\x850\x84F\x3\x2\x2\x2\x851\x854\x3\x2\x2\x2\x852\x850\x3\x2\x2"+
		"\x2\x852\x853\x3\x2\x2\x2\x853\x855\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2"+
		"\x855\x857\ai\x2\x2\x856\x84E\x3\x2\x2\x2\x857\x85A\x3\x2\x2\x2\x858\x856"+
		"\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x85C\x3\x2\x2\x2\x85A\x858\x3"+
		"\x2\x2\x2\x85B\x85D\x5\x17C\xBF\x2\x85C\x85B\x3\x2\x2\x2\x85C\x85D\x3"+
		"\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x860\a<\x2\x2\x85F\x861\x5\x190\xC9"+
		"\x2\x860\x85F\x3\x2\x2\x2\x860\x861\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2"+
		"\x862\x864\a=\x2\x2\x863\x865\x5\x64\x33\x2\x864\x863\x3\x2\x2\x2\x864"+
		"\x865\x3\x2\x2\x2\x865\x897\x3\x2\x2\x2\x866\x867\x5<\x1F\x2\x867\x868"+
		"\a\x44\x2\x2\x868\x86A\a\"\x2\x2\x869\x86B\x5,\x17\x2\x86A\x869\x3\x2"+
		"\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B\x86F\x3\x2\x2\x2\x86C\x86E\x5\xE8u\x2"+
		"\x86D\x86C\x3\x2\x2\x2\x86E\x871\x3\x2\x2\x2\x86F\x86D\x3\x2\x2\x2\x86F"+
		"\x870\x3\x2\x2\x2\x870\x872\x3\x2\x2\x2\x871\x86F\x3\x2\x2\x2\x872\x874"+
		"\ai\x2\x2\x873\x875\x5\x17C\xBF\x2\x874\x873\x3\x2\x2\x2\x874\x875\x3"+
		"\x2\x2\x2\x875\x876\x3\x2\x2\x2\x876\x878\a<\x2\x2\x877\x879\x5\x190\xC9"+
		"\x2\x878\x877\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2"+
		"\x87A\x87C\a=\x2\x2\x87B\x87D\x5\x64\x33\x2\x87C\x87B\x3\x2\x2\x2\x87C"+
		"\x87D\x3\x2\x2\x2\x87D\x897\x3\x2\x2\x2\x87E\x87F\x5\x162\xB2\x2\x87F"+
		"\x880\a\x44\x2\x2\x880\x882\a\"\x2\x2\x881\x883\x5,\x17\x2\x882\x881\x3"+
		"\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x887\x3\x2\x2\x2\x884\x886\x5\xE8"+
		"u\x2\x885\x884\x3\x2\x2\x2\x886\x889\x3\x2\x2\x2\x887\x885\x3\x2\x2\x2"+
		"\x887\x888\x3\x2\x2\x2\x888\x88A\x3\x2\x2\x2\x889\x887\x3\x2\x2\x2\x88A"+
		"\x88C\ai\x2\x2\x88B\x88D\x5\x17C\xBF\x2\x88C\x88B\x3\x2\x2\x2\x88C\x88D"+
		"\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E\x890\a<\x2\x2\x88F\x891\x5\x190"+
		"\xC9\x2\x890\x88F\x3\x2\x2\x2\x890\x891\x3\x2\x2\x2\x891\x892\x3\x2\x2"+
		"\x2\x892\x894\a=\x2\x2\x893\x895\x5\x64\x33\x2\x894\x893\x3\x2\x2\x2\x894"+
		"\x895\x3\x2\x2\x2\x895\x897\x3\x2\x2\x2\x896\x843\x3\x2\x2\x2\x896\x866"+
		"\x3\x2\x2\x2\x896\x87E\x3\x2\x2\x2\x897\x177\x3\x2\x2\x2\x898\x899\a\x44"+
		"\x2\x2\x899\x89B\a\"\x2\x2\x89A\x89C\x5,\x17\x2\x89B\x89A\x3\x2\x2\x2"+
		"\x89B\x89C\x3\x2\x2\x2\x89C\x8A0\x3\x2\x2\x2\x89D\x89F\x5\xE8u\x2\x89E"+
		"\x89D\x3\x2\x2\x2\x89F\x8A2\x3\x2\x2\x2\x8A0\x89E\x3\x2\x2\x2\x8A0\x8A1"+
		"\x3\x2\x2\x2\x8A1\x8A3\x3\x2\x2\x2\x8A2\x8A0\x3\x2\x2\x2\x8A3\x8A5\ai"+
		"\x2\x2\x8A4\x8A6\x5\x17C\xBF\x2\x8A5\x8A4\x3\x2\x2\x2\x8A5\x8A6\x3\x2"+
		"\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A9\a<\x2\x2\x8A8\x8AA\x5\x190\xC9"+
		"\x2\x8A9\x8A8\x3\x2\x2\x2\x8A9\x8AA\x3\x2\x2\x2\x8AA\x8AB\x3\x2\x2\x2"+
		"\x8AB\x8AD\a=\x2\x2\x8AC\x8AE\x5\x64\x33\x2\x8AD\x8AC\x3\x2\x2\x2\x8AD"+
		"\x8AE\x3\x2\x2\x2\x8AE\x179\x3\x2\x2\x2\x8AF\x8B1\a\"\x2\x2\x8B0\x8B2"+
		"\x5,\x17\x2\x8B1\x8B0\x3\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B6\x3\x2"+
		"\x2\x2\x8B3\x8B5\x5\xE8u\x2\x8B4\x8B3\x3\x2\x2\x2\x8B5\x8B8\x3\x2\x2\x2"+
		"\x8B6\x8B4\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B9\x3\x2\x2\x2\x8B8"+
		"\x8B6\x3\x2\x2\x2\x8B9\x8C4\ai\x2\x2\x8BA\x8BE\a\x44\x2\x2\x8BB\x8BD\x5"+
		"\xE8u\x2\x8BC\x8BB\x3\x2\x2\x2\x8BD\x8C0\x3\x2\x2\x2\x8BE\x8BC\x3\x2\x2"+
		"\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1\x3\x2\x2\x2\x8C0\x8BE\x3\x2\x2\x2"+
		"\x8C1\x8C3\ai\x2\x2\x8C2\x8BA\x3\x2\x2\x2\x8C3\x8C6\x3\x2\x2\x2\x8C4\x8C2"+
		"\x3\x2\x2\x2\x8C4\x8C5\x3\x2\x2\x2\x8C5\x8C8\x3\x2\x2\x2\x8C6\x8C4\x3"+
		"\x2\x2\x2\x8C7\x8C9\x5\x17C\xBF\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3"+
		"\x2\x2\x2\x8C9\x8CA\x3\x2\x2\x2\x8CA\x8CC\a<\x2\x2\x8CB\x8CD\x5\x190\xC9"+
		"\x2\x8CC\x8CB\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2"+
		"\x8CE\x8D0\a=\x2\x2\x8CF\x8D1\x5\x64\x33\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0"+
		"\x8D1\x3\x2\x2\x2\x8D1\x8EB\x3\x2\x2\x2\x8D2\x8D3\x5<\x1F\x2\x8D3\x8D4"+
		"\a\x44\x2\x2\x8D4\x8D6\a\"\x2\x2\x8D5\x8D7\x5,\x17\x2\x8D6\x8D5\x3\x2"+
		"\x2\x2\x8D6\x8D7\x3\x2\x2\x2\x8D7\x8DB\x3\x2\x2\x2\x8D8\x8DA\x5\xE8u\x2"+
		"\x8D9\x8D8\x3\x2\x2\x2\x8DA\x8DD\x3\x2\x2\x2\x8DB\x8D9\x3\x2\x2\x2\x8DB"+
		"\x8DC\x3\x2\x2\x2\x8DC\x8DE\x3\x2\x2\x2\x8DD\x8DB\x3\x2\x2\x2\x8DE\x8E0"+
		"\ai\x2\x2\x8DF\x8E1\x5\x17C\xBF\x2\x8E0\x8DF\x3\x2\x2\x2\x8E0\x8E1\x3"+
		"\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E4\a<\x2\x2\x8E3\x8E5\x5\x190\xC9"+
		"\x2\x8E4\x8E3\x3\x2\x2\x2\x8E4\x8E5\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2"+
		"\x8E6\x8E8\a=\x2\x2\x8E7\x8E9\x5\x64\x33\x2\x8E8\x8E7\x3\x2\x2\x2\x8E8"+
		"\x8E9\x3\x2\x2\x2\x8E9\x8EB\x3\x2\x2\x2\x8EA\x8AF\x3\x2\x2\x2\x8EA\x8D2"+
		"\x3\x2\x2\x2\x8EB\x17B\x3\x2\x2\x2\x8EC\x8F0\x5,\x17\x2\x8ED\x8EE\aG\x2"+
		"\x2\x8EE\x8F0\a\x46\x2\x2\x8EF\x8EC\x3\x2\x2\x2\x8EF\x8ED\x3\x2\x2\x2"+
		"\x8F0\x17D\x3\x2\x2\x2\x8F1\x8F2\x5\x162\xB2\x2\x8F2\x8F3\a\x44\x2\x2"+
		"\x8F3\x8F4\ai\x2\x2\x8F4\x8FF\x3\x2\x2\x2\x8F5\x8F6\a+\x2\x2\x8F6\x8F7"+
		"\a\x44\x2\x2\x8F7\x8FF\ai\x2\x2\x8F8\x8F9\x5\x38\x1D\x2\x8F9\x8FA\a\x44"+
		"\x2\x2\x8FA\x8FB\a+\x2\x2\x8FB\x8FC\a\x44\x2\x2\x8FC\x8FD\ai\x2\x2\x8FD"+
		"\x8FF\x3\x2\x2\x2\x8FE\x8F1\x3\x2\x2\x2\x8FE\x8F5\x3\x2\x2\x2\x8FE\x8F8"+
		"\x3\x2\x2\x2\x8FF\x17F\x3\x2\x2\x2\x900\x901\a\x44\x2\x2\x901\x902\ai"+
		"\x2\x2\x902\x181\x3\x2\x2\x2\x903\x904\a+\x2\x2\x904\x905\a\x44\x2\x2"+
		"\x905\x90D\ai\x2\x2\x906\x907\x5\x38\x1D\x2\x907\x908\a\x44\x2\x2\x908"+
		"\x909\a+\x2\x2\x909\x90A\a\x44\x2\x2\x90A\x90B\ai\x2\x2\x90B\x90D\x3\x2"+
		"\x2\x2\x90C\x903\x3\x2\x2\x2\x90C\x906\x3\x2\x2\x2\x90D\x183\x3\x2\x2"+
		"\x2\x90E\x90F\x5<\x1F\x2\x90F\x910\a@\x2\x2\x910\x911\x5\x1A0\xD1\x2\x911"+
		"\x912\a\x41\x2\x2\x912\x919\x3\x2\x2\x2\x913\x914\x5\x168\xB5\x2\x914"+
		"\x915\a@\x2\x2\x915\x916\x5\x1A0\xD1\x2\x916\x917\a\x41\x2\x2\x917\x919"+
		"\x3\x2\x2\x2\x918\x90E\x3\x2\x2\x2\x918\x913\x3\x2\x2\x2\x919\x921\x3"+
		"\x2\x2\x2\x91A\x91B\x5\x166\xB4\x2\x91B\x91C\a@\x2\x2\x91C\x91D\x5\x1A0"+
		"\xD1\x2\x91D\x91E\a\x41\x2\x2\x91E\x920\x3\x2\x2\x2\x91F\x91A\x3\x2\x2"+
		"\x2\x920\x923\x3\x2\x2\x2\x921\x91F\x3\x2\x2\x2\x921\x922\x3\x2\x2\x2"+
		"\x922\x185\x3\x2\x2\x2\x923\x921\x3\x2\x2\x2\x924\x925\x5\x16E\xB8\x2"+
		"\x925\x926\a@\x2\x2\x926\x927\x5\x1A0\xD1\x2\x927\x928\a\x41\x2\x2\x928"+
		"\x930\x3\x2\x2\x2\x929\x92A\x5\x16C\xB7\x2\x92A\x92B\a@\x2\x2\x92B\x92C"+
		"\x5\x1A0\xD1\x2\x92C\x92D\a\x41\x2\x2\x92D\x92F\x3\x2\x2\x2\x92E\x929"+
		"\x3\x2\x2\x2\x92F\x932\x3\x2\x2\x2\x930\x92E\x3\x2\x2\x2\x930\x931\x3"+
		"\x2\x2\x2\x931\x187\x3\x2\x2\x2\x932\x930\x3\x2\x2\x2\x933\x934\x5<\x1F"+
		"\x2\x934\x935\a@\x2\x2\x935\x936\x5\x1A0\xD1\x2\x936\x937\a\x41\x2\x2"+
		"\x937\x93E\x3\x2\x2\x2\x938\x939\x5\x174\xBB\x2\x939\x93A\a@\x2\x2\x93A"+
		"\x93B\x5\x1A0\xD1\x2\x93B\x93C\a\x41\x2\x2\x93C\x93E\x3\x2\x2\x2\x93D"+
		"\x933\x3\x2\x2\x2\x93D\x938\x3\x2\x2\x2\x93E\x946\x3\x2\x2\x2\x93F\x940"+
		"\x5\x172\xBA\x2\x940\x941\a@\x2\x2\x941\x942\x5\x1A0\xD1\x2\x942\x943"+
		"\a\x41\x2\x2\x943\x945\x3\x2\x2\x2\x944\x93F\x3\x2\x2\x2\x945\x948\x3"+
		"\x2\x2\x2\x946\x944\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947\x189\x3\x2"+
		"\x2\x2\x948\x946\x3\x2\x2\x2\x949\x94A\x5> \x2\x94A\x94C\a<\x2\x2\x94B"+
		"\x94D\x5\x190\xC9\x2\x94C\x94B\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D"+
		"\x94E\x3\x2\x2\x2\x94E\x94F\a=\x2\x2\x94F\x98E\x3\x2\x2\x2\x950\x951\x5"+
		"\x38\x1D\x2\x951\x953\a\x44\x2\x2\x952\x954\x5,\x17\x2\x953\x952\x3\x2"+
		"\x2\x2\x953\x954\x3\x2\x2\x2\x954\x955\x3\x2\x2\x2\x955\x956\ai\x2\x2"+
		"\x956\x958\a<\x2\x2\x957\x959\x5\x190\xC9\x2\x958\x957\x3\x2\x2\x2\x958"+
		"\x959\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x95B\a=\x2\x2\x95B\x98E\x3"+
		"\x2\x2\x2\x95C\x95D\x5<\x1F\x2\x95D\x95F\a\x44\x2\x2\x95E\x960\x5,\x17"+
		"\x2\x95F\x95E\x3\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2"+
		"\x961\x962\ai\x2\x2\x962\x964\a<\x2\x2\x963\x965\x5\x190\xC9\x2\x964\x963"+
		"\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2\x966\x967\a="+
		"\x2\x2\x967\x98E\x3\x2\x2\x2\x968\x969\x5\x162\xB2\x2\x969\x96B\a\x44"+
		"\x2\x2\x96A\x96C\x5,\x17\x2\x96B\x96A\x3\x2\x2\x2\x96B\x96C\x3\x2\x2\x2"+
		"\x96C\x96D\x3\x2\x2\x2\x96D\x96E\ai\x2\x2\x96E\x970\a<\x2\x2\x96F\x971"+
		"\x5\x190\xC9\x2\x970\x96F\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2\x971\x972"+
		"\x3\x2\x2\x2\x972\x973\a=\x2\x2\x973\x98E\x3\x2\x2\x2\x974\x975\a+\x2"+
		"\x2\x975\x977\a\x44\x2\x2\x976\x978\x5,\x17\x2\x977\x976\x3\x2\x2\x2\x977"+
		"\x978\x3\x2\x2\x2\x978\x979\x3\x2\x2\x2\x979\x97A\ai\x2\x2\x97A\x97C\a"+
		"<\x2\x2\x97B\x97D\x5\x190\xC9\x2\x97C\x97B\x3\x2\x2\x2\x97C\x97D\x3\x2"+
		"\x2\x2\x97D\x97E\x3\x2\x2\x2\x97E\x98E\a=\x2\x2\x97F\x980\x5\x38\x1D\x2"+
		"\x980\x981\a\x44\x2\x2\x981\x982\a+\x2\x2\x982\x984\a\x44\x2\x2\x983\x985"+
		"\x5,\x17\x2\x984\x983\x3\x2\x2\x2\x984\x985\x3\x2\x2\x2\x985\x986\x3\x2"+
		"\x2\x2\x986\x987\ai\x2\x2\x987\x989\a<\x2\x2\x988\x98A\x5\x190\xC9\x2"+
		"\x989\x988\x3\x2\x2\x2\x989\x98A\x3\x2\x2\x2\x98A\x98B\x3\x2\x2\x2\x98B"+
		"\x98C\a=\x2\x2\x98C\x98E\x3\x2\x2\x2\x98D\x949\x3\x2\x2\x2\x98D\x950\x3"+
		"\x2\x2\x2\x98D\x95C\x3\x2\x2\x2\x98D\x968\x3\x2\x2\x2\x98D\x974\x3\x2"+
		"\x2\x2\x98D\x97F\x3\x2\x2\x2\x98E\x18B\x3\x2\x2\x2\x98F\x991\a\x44\x2"+
		"\x2\x990\x992\x5,\x17\x2\x991\x990\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992"+
		"\x993\x3\x2\x2\x2\x993\x994\ai\x2\x2\x994\x996\a<\x2\x2\x995\x997\x5\x190"+
		"\xC9\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x998\x3\x2\x2"+
		"\x2\x998\x999\a=\x2\x2\x999\x18D\x3\x2\x2\x2\x99A\x99B\x5> \x2\x99B\x99D"+
		"\a<\x2\x2\x99C\x99E\x5\x190\xC9\x2\x99D\x99C\x3\x2\x2\x2\x99D\x99E\x3"+
		"\x2\x2\x2\x99E\x99F\x3\x2\x2\x2\x99F\x9A0\a=\x2\x2\x9A0\x9D3\x3\x2\x2"+
		"\x2\x9A1\x9A2\x5\x38\x1D\x2\x9A2\x9A4\a\x44\x2\x2\x9A3\x9A5\x5,\x17\x2"+
		"\x9A4\x9A3\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9A6\x3\x2\x2\x2\x9A6"+
		"\x9A7\ai\x2\x2\x9A7\x9A9\a<\x2\x2\x9A8\x9AA\x5\x190\xC9\x2\x9A9\x9A8\x3"+
		"\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9AC\a=\x2"+
		"\x2\x9AC\x9D3\x3\x2\x2\x2\x9AD\x9AE\x5<\x1F\x2\x9AE\x9B0\a\x44\x2\x2\x9AF"+
		"\x9B1\x5,\x17\x2\x9B0\x9AF\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9B2"+
		"\x3\x2\x2\x2\x9B2\x9B3\ai\x2\x2\x9B3\x9B5\a<\x2\x2\x9B4\x9B6\x5\x190\xC9"+
		"\x2\x9B5\x9B4\x3\x2\x2\x2\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2"+
		"\x9B7\x9B8\a=\x2\x2\x9B8\x9D3\x3\x2\x2\x2\x9B9\x9BA\a+\x2\x2\x9BA\x9BC"+
		"\a\x44\x2\x2\x9BB\x9BD\x5,\x17\x2\x9BC\x9BB\x3\x2\x2\x2\x9BC\x9BD\x3\x2"+
		"\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\x9BF\ai\x2\x2\x9BF\x9C1\a<\x2\x2\x9C0"+
		"\x9C2\x5\x190\xC9\x2\x9C1\x9C0\x3\x2\x2\x2\x9C1\x9C2\x3\x2\x2\x2\x9C2"+
		"\x9C3\x3\x2\x2\x2\x9C3\x9D3\a=\x2\x2\x9C4\x9C5\x5\x38\x1D\x2\x9C5\x9C6"+
		"\a\x44\x2\x2\x9C6\x9C7\a+\x2\x2\x9C7\x9C9\a\x44\x2\x2\x9C8\x9CA\x5,\x17"+
		"\x2\x9C9\x9C8\x3\x2\x2\x2\x9C9\x9CA\x3\x2\x2\x2\x9CA\x9CB\x3\x2\x2\x2"+
		"\x9CB\x9CC\ai\x2\x2\x9CC\x9CE\a<\x2\x2\x9CD\x9CF\x5\x190\xC9\x2\x9CE\x9CD"+
		"\x3\x2\x2\x2\x9CE\x9CF\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9D1\a="+
		"\x2\x2\x9D1\x9D3\x3\x2\x2\x2\x9D2\x99A\x3\x2\x2\x2\x9D2\x9A1\x3\x2\x2"+
		"\x2\x9D2\x9AD\x3\x2\x2\x2\x9D2\x9B9\x3\x2\x2\x2\x9D2\x9C4\x3\x2\x2\x2"+
		"\x9D3\x18F\x3\x2\x2\x2\x9D4\x9D9\x5\x1A0\xD1\x2\x9D5\x9D6\a\x43\x2\x2"+
		"\x9D6\x9D8\x5\x1A0\xD1\x2\x9D7\x9D5\x3\x2\x2\x2\x9D8\x9DB\x3\x2\x2\x2"+
		"\x9D9\x9D7\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x191\x3\x2\x2\x2\x9DB"+
		"\x9D9\x3\x2\x2\x2\x9DC\x9DD\x5<\x1F\x2\x9DD\x9DF\a]\x2\x2\x9DE\x9E0\x5"+
		",\x17\x2\x9DF\x9DE\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x9E1\x3\x2\x2"+
		"\x2\x9E1\x9E2\ai\x2\x2\x9E2\xA0C\x3\x2\x2\x2\x9E3\x9E4\x5\xE\b\x2\x9E4"+
		"\x9E6\a]\x2\x2\x9E5\x9E7\x5,\x17\x2\x9E6\x9E5\x3\x2\x2\x2\x9E6\x9E7\x3"+
		"\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\x9E9\ai\x2\x2\x9E9\xA0C\x3\x2\x2"+
		"\x2\x9EA\x9EB\x5\x162\xB2\x2\x9EB\x9ED\a]\x2\x2\x9EC\x9EE\x5,\x17\x2\x9ED"+
		"\x9EC\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9EF\x3\x2\x2\x2\x9EF\x9F0"+
		"\ai\x2\x2\x9F0\xA0C\x3\x2\x2\x2\x9F1\x9F2\a+\x2\x2\x9F2\x9F4\a]\x2\x2"+
		"\x9F3\x9F5\x5,\x17\x2\x9F4\x9F3\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2\x9F5"+
		"\x9F6\x3\x2\x2\x2\x9F6\xA0C\ai\x2\x2\x9F7\x9F8\x5\x38\x1D\x2\x9F8\x9F9"+
		"\a\x44\x2\x2\x9F9\x9FA\a+\x2\x2\x9FA\x9FC\a]\x2\x2\x9FB\x9FD\x5,\x17\x2"+
		"\x9FC\x9FB\x3\x2\x2\x2\x9FC\x9FD\x3\x2\x2\x2\x9FD\x9FE\x3\x2\x2\x2\x9FE"+
		"\x9FF\ai\x2\x2\x9FF\xA0C\x3\x2\x2\x2\xA00\xA01\x5\x12\n\x2\xA01\xA03\a"+
		"]\x2\x2\xA02\xA04\x5,\x17\x2\xA03\xA02\x3\x2\x2\x2\xA03\xA04\x3\x2\x2"+
		"\x2\xA04\xA05\x3\x2\x2\x2\xA05\xA06\a\"\x2\x2\xA06\xA0C\x3\x2\x2\x2\xA07"+
		"\xA08\x5 \x11\x2\xA08\xA09\a]\x2\x2\xA09\xA0A\a\"\x2\x2\xA0A\xA0C\x3\x2"+
		"\x2\x2\xA0B\x9DC\x3\x2\x2\x2\xA0B\x9E3\x3\x2\x2\x2\xA0B\x9EA\x3\x2\x2"+
		"\x2\xA0B\x9F1\x3\x2\x2\x2\xA0B\x9F7\x3\x2\x2\x2\xA0B\xA00\x3\x2\x2\x2"+
		"\xA0B\xA07\x3\x2\x2\x2\xA0C\x193\x3\x2\x2\x2\xA0D\xA0F\a]\x2\x2\xA0E\xA10"+
		"\x5,\x17\x2\xA0F\xA0E\x3\x2\x2\x2\xA0F\xA10\x3\x2\x2\x2\xA10\xA11\x3\x2"+
		"\x2\x2\xA11\xA12\ai\x2\x2\xA12\x195\x3\x2\x2\x2\xA13\xA14\x5<\x1F\x2\xA14"+
		"\xA16\a]\x2\x2\xA15\xA17\x5,\x17\x2\xA16\xA15\x3\x2\x2\x2\xA16\xA17\x3"+
		"\x2\x2\x2\xA17\xA18\x3\x2\x2\x2\xA18\xA19\ai\x2\x2\xA19\xA3C\x3\x2\x2"+
		"\x2\xA1A\xA1B\x5\xE\b\x2\xA1B\xA1D\a]\x2\x2\xA1C\xA1E\x5,\x17\x2\xA1D"+
		"\xA1C\x3\x2\x2\x2\xA1D\xA1E\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2\x2\xA1F\xA20"+
		"\ai\x2\x2\xA20\xA3C\x3\x2\x2\x2\xA21\xA22\a+\x2\x2\xA22\xA24\a]\x2\x2"+
		"\xA23\xA25\x5,\x17\x2\xA24\xA23\x3\x2\x2\x2\xA24\xA25\x3\x2\x2\x2\xA25"+
		"\xA26\x3\x2\x2\x2\xA26\xA3C\ai\x2\x2\xA27\xA28\x5\x38\x1D\x2\xA28\xA29"+
		"\a\x44\x2\x2\xA29\xA2A\a+\x2\x2\xA2A\xA2C\a]\x2\x2\xA2B\xA2D\x5,\x17\x2"+
		"\xA2C\xA2B\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E"+
		"\xA2F\ai\x2\x2\xA2F\xA3C\x3\x2\x2\x2\xA30\xA31\x5\x12\n\x2\xA31\xA33\a"+
		"]\x2\x2\xA32\xA34\x5,\x17\x2\xA33\xA32\x3\x2\x2\x2\xA33\xA34\x3\x2\x2"+
		"\x2\xA34\xA35\x3\x2\x2\x2\xA35\xA36\a\"\x2\x2\xA36\xA3C\x3\x2\x2\x2\xA37"+
		"\xA38\x5 \x11\x2\xA38\xA39\a]\x2\x2\xA39\xA3A\a\"\x2\x2\xA3A\xA3C\x3\x2"+
		"\x2\x2\xA3B\xA13\x3\x2\x2\x2\xA3B\xA1A\x3\x2\x2\x2\xA3B\xA21\x3\x2\x2"+
		"\x2\xA3B\xA27\x3\x2\x2\x2\xA3B\xA30\x3\x2\x2\x2\xA3B\xA37\x3\x2\x2\x2"+
		"\xA3C\x197\x3\x2\x2\x2\xA3D\xA3E\a\"\x2\x2\xA3E\xA3F\x5\x6\x4\x2\xA3F"+
		"\xA41\x5\x19A\xCE\x2\xA40\xA42\x5\"\x12\x2\xA41\xA40\x3\x2\x2\x2\xA41"+
		"\xA42\x3\x2\x2\x2\xA42\xA54\x3\x2\x2\x2\xA43\xA44\a\"\x2\x2\xA44\xA45"+
		"\x5\x10\t\x2\xA45\xA47\x5\x19A\xCE\x2\xA46\xA48\x5\"\x12\x2\xA47\xA46"+
		"\x3\x2\x2\x2\xA47\xA48\x3\x2\x2\x2\xA48\xA54\x3\x2\x2\x2\xA49\xA4A\a\""+
		"\x2\x2\xA4A\xA4B\x5\x6\x4\x2\xA4B\xA4C\x5\"\x12\x2\xA4C\xA4D\x5\xFA~\x2"+
		"\xA4D\xA54\x3\x2\x2\x2\xA4E\xA4F\a\"\x2\x2\xA4F\xA50\x5\x10\t\x2\xA50"+
		"\xA51\x5\"\x12\x2\xA51\xA52\x5\xFA~\x2\xA52\xA54\x3\x2\x2\x2\xA53\xA3D"+
		"\x3\x2\x2\x2\xA53\xA43\x3\x2\x2\x2\xA53\xA49\x3\x2\x2\x2\xA53\xA4E\x3"+
		"\x2\x2\x2\xA54\x199\x3\x2\x2\x2\xA55\xA59\x5\x19C\xCF\x2\xA56\xA58\x5"+
		"\x19C\xCF\x2\xA57\xA56\x3\x2\x2\x2\xA58\xA5B\x3\x2\x2\x2\xA59\xA57\x3"+
		"\x2\x2\x2\xA59\xA5A\x3\x2\x2\x2\xA5A\x19B\x3\x2\x2\x2\xA5B\xA59\x3\x2"+
		"\x2\x2\xA5C\xA5E\x5\xE8u\x2\xA5D\xA5C\x3\x2\x2\x2\xA5E\xA61\x3\x2\x2\x2"+
		"\xA5F\xA5D\x3\x2\x2\x2\xA5F\xA60\x3\x2\x2\x2\xA60\xA62\x3\x2\x2\x2\xA61"+
		"\xA5F\x3\x2\x2\x2\xA62\xA63\a@\x2\x2\xA63\xA64\x5\x1A0\xD1\x2\xA64\xA65"+
		"\a\x41\x2\x2\xA65\x19D\x3\x2\x2\x2\xA66\xA67\x5\x1A0\xD1\x2\xA67\x19F"+
		"\x3\x2\x2\x2\xA68\xA6B\x5\x1A2\xD2\x2\xA69\xA6B\x5\x1AA\xD6\x2\xA6A\xA68"+
		"\x3\x2\x2\x2\xA6A\xA69\x3\x2\x2\x2\xA6B\x1A1\x3\x2\x2\x2\xA6C\xA6D\x5"+
		"\x1A4\xD3\x2\xA6D\xA6E\a\\\x2\x2\xA6E\xA6F\x5\x1A8\xD5\x2\xA6F\x1A3\x3"+
		"\x2\x2\x2\xA70\xA7B\ai\x2\x2\xA71\xA73\a<\x2\x2\xA72\xA74\x5\x98M\x2\xA73"+
		"\xA72\x3\x2\x2\x2\xA73\xA74\x3\x2\x2\x2\xA74\xA75\x3\x2\x2\x2\xA75\xA7B"+
		"\a=\x2\x2\xA76\xA77\a<\x2\x2\xA77\xA78\x5\x1A6\xD4\x2\xA78\xA79\a=\x2"+
		"\x2\xA79\xA7B\x3\x2\x2\x2\xA7A\xA70\x3\x2\x2\x2\xA7A\xA71\x3\x2\x2\x2"+
		"\xA7A\xA76\x3\x2\x2\x2\xA7B\x1A5\x3\x2\x2\x2\xA7C\xA81\ai\x2\x2\xA7D\xA7E"+
		"\a\x43\x2\x2\xA7E\xA80\ai\x2\x2\xA7F\xA7D\x3\x2\x2\x2\xA80\xA83\x3\x2"+
		"\x2\x2\xA81\xA7F\x3\x2\x2\x2\xA81\xA82\x3\x2\x2\x2\xA82\x1A7\x3\x2\x2"+
		"\x2\xA83\xA81\x3\x2\x2\x2\xA84\xA87\x5\x1A0\xD1\x2\xA85\xA87\x5\xFE\x80"+
		"\x2\xA86\xA84\x3\x2\x2\x2\xA86\xA85\x3\x2\x2\x2\xA87\x1A9\x3\x2\x2\x2"+
		"\xA88\xA8B\x5\x1CA\xE6\x2\xA89\xA8B\x5\x1AC\xD7\x2\xA8A\xA88\x3\x2\x2"+
		"\x2\xA8A\xA89\x3\x2\x2\x2\xA8B\x1AB\x3\x2\x2\x2\xA8C\xA8D\x5\x1AE\xD8"+
		"\x2\xA8D\xA8E\x5\x1B0\xD9\x2\xA8E\xA8F\x5\x1A0\xD1\x2\xA8F\x1AD\x3\x2"+
		"\x2\x2\xA90\xA94\x5<\x1F\x2\xA91\xA94\x5\x17E\xC0\x2\xA92\xA94\x5\x184"+
		"\xC3\x2\xA93\xA90\x3\x2\x2\x2\xA93\xA91\x3\x2\x2\x2\xA93\xA92\x3\x2\x2"+
		"\x2\xA94\x1AF\x3\x2\x2\x2\xA95\xAA2\x5\x1B2\xDA\x2\xA96\xAA2\x5\x1B4\xDB"+
		"\x2\xA97\xAA2\x5\x1B6\xDC\x2\xA98\xAA2\x5\x1B8\xDD\x2\xA99\xAA2\x5\x1BA"+
		"\xDE\x2\xA9A\xAA2\x5\x1BC\xDF\x2\xA9B\xAA2\x5\x1BE\xE0\x2\xA9C\xAA2\x5"+
		"\x1C0\xE1\x2\xA9D\xAA2\x5\x1C2\xE2\x2\xA9E\xAA2\x5\x1C4\xE3\x2\xA9F\xAA2"+
		"\x5\x1C6\xE4\x2\xAA0\xAA2\x5\x1C8\xE5\x2\xAA1\xA95\x3\x2\x2\x2\xAA1\xA96"+
		"\x3\x2\x2\x2\xAA1\xA97\x3\x2\x2\x2\xAA1\xA98\x3\x2\x2\x2\xAA1\xA99\x3"+
		"\x2\x2\x2\xAA1\xA9A\x3\x2\x2\x2\xAA1\xA9B\x3\x2\x2\x2\xAA1\xA9C\x3\x2"+
		"\x2\x2\xAA1\xA9D\x3\x2\x2\x2\xAA1\xA9E\x3\x2\x2\x2\xAA1\xA9F\x3\x2\x2"+
		"\x2\xAA1\xAA0\x3\x2\x2\x2\xAA2\x1B1\x3\x2\x2\x2\xAA3\xAA4\a\x45\x2\x2"+
		"\xAA4\x1B3\x3\x2\x2\x2\xAA5\xAA6\a`\x2\x2\xAA6\x1B5\x3\x2\x2\x2\xAA7\xAA8"+
		"\a\x61\x2\x2\xAA8\x1B7\x3\x2\x2\x2\xAA9\xAAA\a\x65\x2\x2\xAAA\x1B9\x3"+
		"\x2\x2\x2\xAAB\xAAC\a^\x2\x2\xAAC\x1BB\x3\x2\x2\x2\xAAD\xAAE\a_\x2\x2"+
		"\xAAE\x1BD\x3\x2\x2\x2\xAAF\xAB0\a\x66\x2\x2\xAB0\x1BF\x3\x2\x2\x2\xAB1"+
		"\xAB2\ag\x2\x2\xAB2\x1C1\x3\x2\x2\x2\xAB3\xAB4\ah\x2\x2\xAB4\x1C3\x3\x2"+
		"\x2\x2\xAB5\xAB6\a\x62\x2\x2\xAB6\x1C5\x3\x2\x2\x2\xAB7\xAB8\a\x64\x2"+
		"\x2\xAB8\x1C7\x3\x2\x2\x2\xAB9\xABA\a\x63\x2\x2\xABA\x1C9\x3\x2\x2\x2"+
		"\xABB\xAC3\x5\x1CC\xE7\x2\xABC\xABD\x5\x1CC\xE7\x2\xABD\xABE\aJ\x2\x2"+
		"\xABE\xABF\x5\x1A0\xD1\x2\xABF\xAC0\aK\x2\x2\xAC0\xAC1\x5\x1CA\xE6\x2"+
		"\xAC1\xAC3\x3\x2\x2\x2\xAC2\xABB\x3\x2\x2\x2\xAC2\xABC\x3\x2\x2\x2\xAC3"+
		"\x1CB\x3\x2\x2\x2\xAC4\xAC5\b\xE7\x1\x2\xAC5\xAC6\x5\x1CE\xE8\x2\xAC6"+
		"\xACD\x3\x2\x2\x2\xAC7\xAC8\f\x3\x2\x2\xAC8\xAC9\x5\x1D6\xEC\x2\xAC9\xACA"+
		"\x5\x1CE\xE8\x2\xACA\xACC\x3\x2\x2\x2\xACB\xAC7\x3\x2\x2\x2\xACC\xACF"+
		"\x3\x2\x2\x2\xACD\xACB\x3\x2\x2\x2\xACD\xACE\x3\x2\x2\x2\xACE\x1CD\x3"+
		"\x2\x2\x2\xACF\xACD\x3\x2\x2\x2\xAD0\xAD1\b\xE8\x1\x2\xAD1\xAD2\x5\x1D0"+
		"\xE9\x2\xAD2\xAD9\x3\x2\x2\x2\xAD3\xAD4\f\x3\x2\x2\xAD4\xAD5\x5\x1D6\xEC"+
		"\x2\xAD5\xAD6\x5\x1D0\xE9\x2\xAD6\xAD8\x3\x2\x2\x2\xAD7\xAD3\x3\x2\x2"+
		"\x2\xAD8\xADB\x3\x2\x2\x2\xAD9\xAD7\x3\x2\x2\x2\xAD9\xADA\x3\x2\x2\x2"+
		"\xADA\x1CF\x3\x2\x2\x2\xADB\xAD9\x3\x2\x2\x2\xADC\xADD\b\xE9\x1\x2\xADD"+
		"\xADE\x5\x1D2\xEA\x2\xADE\xAE5\x3\x2\x2\x2\xADF\xAE0\f\x3\x2\x2\xAE0\xAE1"+
		"\x5\x1D6\xEC\x2\xAE1\xAE2\x5\x1D2\xEA\x2\xAE2\xAE4\x3\x2\x2\x2\xAE3\xADF"+
		"\x3\x2\x2\x2\xAE4\xAE7\x3\x2\x2\x2\xAE5\xAE3\x3\x2\x2\x2\xAE5\xAE6\x3"+
		"\x2\x2\x2\xAE6\x1D1\x3\x2\x2\x2\xAE7\xAE5\x3\x2\x2\x2\xAE8\xAE9\b\xEA"+
		"\x1\x2\xAE9\xAEA\x5\x1D4\xEB\x2\xAEA\xAF0\x3\x2\x2\x2\xAEB\xAEC\f\x3\x2"+
		"\x2\xAEC\xAED\a\x3\x2\x2\xAED\xAEF\x5\x1D4\xEB\x2\xAEE\xAEB\x3\x2\x2\x2"+
		"\xAEF\xAF2\x3\x2\x2\x2\xAF0\xAEE\x3\x2\x2\x2\xAF0\xAF1\x3\x2\x2\x2\xAF1"+
		"\x1D3\x3\x2\x2\x2\xAF2\xAF0\x3\x2\x2\x2\xAF3\xAF4\b\xEB\x1\x2\xAF4\xAF5"+
		"\x5\x1E2\xF2\x2\xAF5\xAFC\x3\x2\x2\x2\xAF6\xAF7\f\x3\x2\x2\xAF7\xAF8\x5"+
		"\x1D6\xEC\x2\xAF8\xAF9\x5\x1E2\xF2\x2\xAF9\xAFB\x3\x2\x2\x2\xAFA\xAF6"+
		"\x3\x2\x2\x2\xAFB\xAFE\x3\x2\x2\x2\xAFC\xAFA\x3\x2\x2\x2\xAFC\xAFD\x3"+
		"\x2\x2\x2\xAFD\x1D5\x3\x2\x2\x2\xAFE\xAFC\x3\x2\x2\x2\xAFF\xB05\x5\x1D8"+
		"\xED\x2\xB00\xB05\x5\x1DA\xEE\x2\xB01\xB05\x5\x1DC\xEF\x2\xB02\xB05\x5"+
		"\x1DE\xF0\x2\xB03\xB05\x5\x1E0\xF1\x2\xB04\xAFF\x3\x2\x2\x2\xB04\xB00"+
		"\x3\x2\x2\x2\xB04\xB01\x3\x2\x2\x2\xB04\xB02\x3\x2\x2\x2\xB04\xB03\x3"+
		"\x2\x2\x2\xB05\x1D7\x3\x2\x2\x2\xB06\xB07\aQ\x2\x2\xB07\x1D9\x3\x2\x2"+
		"\x2\xB08\xB09\aP\x2\x2\xB09\x1DB\x3\x2\x2\x2\xB0A\xB0B\aY\x2\x2\xB0B\x1DD"+
		"\x3\x2\x2\x2\xB0C\xB0D\aZ\x2\x2\xB0D\x1DF\x3\x2\x2\x2\xB0E\xB0F\aX\x2"+
		"\x2\xB0F\x1E1\x3\x2\x2\x2\xB10\xB11\b\xF2\x1\x2\xB11\xB12\x5\x1E4\xF3"+
		"\x2\xB12\xB1D\x3\x2\x2\x2\xB13\xB14\f\x4\x2\x2\xB14\xB15\x5\x1E6\xF4\x2"+
		"\xB15\xB16\x5\x1E4\xF3\x2\xB16\xB1C\x3\x2\x2\x2\xB17\xB18\f\x3\x2\x2\xB18"+
		"\xB19\x5\x1E8\xF5\x2\xB19\xB1A\x5\x1E4\xF3\x2\xB1A\xB1C\x3\x2\x2\x2\xB1B"+
		"\xB13\x3\x2\x2\x2\xB1B\xB17\x3\x2\x2\x2\xB1C\xB1F\x3\x2\x2\x2\xB1D\xB1B"+
		"\x3\x2\x2\x2\xB1D\xB1E\x3\x2\x2\x2\xB1E\x1E3\x3\x2\x2\x2\xB1F\xB1D\x3"+
		"\x2\x2\x2\xB20\xB21\b\xF3\x1\x2\xB21\xB22\x5\x1F4\xFB\x2\xB22\xB2C\x3"+
		"\x2\x2\x2\xB23\xB24\f\x4\x2\x2\xB24\xB25\x5\x1F2\xFA\x2\xB25\xB26\x5\x1F4"+
		"\xFB\x2\xB26\xB2B\x3\x2\x2\x2\xB27\xB28\f\x3\x2\x2\xB28\xB29\a\x1D\x2"+
		"\x2\xB29\xB2B\x5\xE\b\x2\xB2A\xB23\x3\x2\x2\x2\xB2A\xB27\x3\x2\x2\x2\xB2B"+
		"\xB2E\x3\x2\x2\x2\xB2C\xB2A\x3\x2\x2\x2\xB2C\xB2D\x3\x2\x2\x2\xB2D\x1E5"+
		"\x3\x2\x2\x2\xB2E\xB2C\x3\x2\x2\x2\xB2F\xB30\aL\x2\x2\xB30\x1E7\x3\x2"+
		"\x2\x2\xB31\xB32\aO\x2\x2\xB32\x1E9\x3\x2\x2\x2\xB33\xB34\aG\x2\x2\xB34"+
		"\x1EB\x3\x2\x2\x2\xB35\xB36\a\x46\x2\x2\xB36\x1ED\x3\x2\x2\x2\xB37\xB38"+
		"\aM\x2\x2\xB38\x1EF\x3\x2\x2\x2\xB39\xB3A\aN\x2\x2\xB3A\x1F1\x3\x2\x2"+
		"\x2\xB3B\xB40\x5\x1EA\xF6\x2\xB3C\xB40\x5\x1EC\xF7\x2\xB3D\xB40\x5\x1EE"+
		"\xF8\x2\xB3E\xB40\x5\x1F0\xF9\x2\xB3F\xB3B\x3\x2\x2\x2\xB3F\xB3C\x3\x2"+
		"\x2\x2\xB3F\xB3D\x3\x2\x2\x2\xB3F\xB3E\x3\x2\x2\x2\xB40\x1F3\x3\x2\x2"+
		"\x2\xB41\xB42\b\xFB\x1\x2\xB42\xB43\x5\x1FC\xFF\x2\xB43\xB52\x3\x2\x2"+
		"\x2\xB44\xB45\f\x5\x2\x2\xB45\xB46\x5\x1F6\xFC\x2\xB46\xB47\x5\x1FC\xFF"+
		"\x2\xB47\xB51\x3\x2\x2\x2\xB48\xB49\f\x4\x2\x2\xB49\xB4A\x5\x1F8\xFD\x2"+
		"\xB4A\xB4B\x5\x1FC\xFF\x2\xB4B\xB51\x3\x2\x2\x2\xB4C\xB4D\f\x3\x2\x2\xB4D"+
		"\xB4E\x5\x1FA\xFE\x2\xB4E\xB4F\x5\x1FC\xFF\x2\xB4F\xB51\x3\x2\x2\x2\xB50"+
		"\xB44\x3\x2\x2\x2\xB50\xB48\x3\x2\x2\x2\xB50\xB4C\x3\x2\x2\x2\xB51\xB54"+
		"\x3\x2\x2\x2\xB52\xB50\x3\x2\x2\x2\xB52\xB53\x3\x2\x2\x2\xB53\x1F5\x3"+
		"\x2\x2\x2\xB54\xB52\x3\x2\x2\x2\xB55\xB56\aG\x2\x2\xB56\xB57\aG\x2\x2"+
		"\xB57\x1F7\x3\x2\x2\x2\xB58\xB59\a\x46\x2\x2\xB59\xB5A\a\x46\x2\x2\xB5A"+
		"\x1F9\x3\x2\x2\x2\xB5B\xB5C\a\x46\x2\x2\xB5C\xB5D\a\x46\x2\x2\xB5D\xB5E"+
		"\a\x46\x2\x2\xB5E\x1FB\x3\x2\x2\x2\xB5F\xB60\b\xFF\x1\x2\xB60\xB61\x5"+
		"\x1FE\x100\x2\xB61\xB6C\x3\x2\x2\x2\xB62\xB63\f\x4\x2\x2\xB63\xB64\x5"+
		"\x200\x101\x2\xB64\xB65\x5\x1FE\x100\x2\xB65\xB6B\x3\x2\x2\x2\xB66\xB67"+
		"\f\x3\x2\x2\xB67\xB68\x5\x202\x102\x2\xB68\xB69\x5\x1FE\x100\x2\xB69\xB6B"+
		"\x3\x2\x2\x2\xB6A\xB62\x3\x2\x2\x2\xB6A\xB66\x3\x2\x2\x2\xB6B\xB6E\x3"+
		"\x2\x2\x2\xB6C\xB6A\x3\x2\x2\x2\xB6C\xB6D\x3\x2\x2\x2\xB6D\x1FD\x3\x2"+
		"\x2\x2\xB6E\xB6C\x3\x2\x2\x2\xB6F\xB70\b\x100\x1\x2\xB70\xB71\x5\x20A"+
		"\x106\x2\xB71\xB80\x3\x2\x2\x2\xB72\xB73\f\x5\x2\x2\xB73\xB74\x5\x204"+
		"\x103\x2\xB74\xB75\x5\x20A\x106\x2\xB75\xB7F\x3\x2\x2\x2\xB76\xB77\f\x4"+
		"\x2\x2\xB77\xB78\x5\x206\x104\x2\xB78\xB79\x5\x20A\x106\x2\xB79\xB7F\x3"+
		"\x2\x2\x2\xB7A\xB7B\f\x3\x2\x2\xB7B\xB7C\x5\x208\x105\x2\xB7C\xB7D\x5"+
		"\x20A\x106\x2\xB7D\xB7F\x3\x2\x2\x2\xB7E\xB72\x3\x2\x2\x2\xB7E\xB76\x3"+
		"\x2\x2\x2\xB7E\xB7A\x3\x2\x2\x2\xB7F\xB82\x3\x2\x2\x2\xB80\xB7E\x3\x2"+
		"\x2\x2\xB80\xB81\x3\x2\x2\x2\xB81\x1FF\x3\x2\x2\x2\xB82\xB80\x3\x2\x2"+
		"\x2\xB83\xB84\aT\x2\x2\xB84\x201\x3\x2\x2\x2\xB85\xB86\aU\x2\x2\xB86\x203"+
		"\x3\x2\x2\x2\xB87\xB88\aV\x2\x2\xB88\x205\x3\x2\x2\x2\xB89\xB8A\aW\x2"+
		"\x2\xB8A\x207\x3\x2\x2\x2\xB8B\xB8C\a[\x2\x2\xB8C\x209\x3\x2\x2\x2\xB8D"+
		"\xB8E\x5\x210\x109\x2\xB8E\xB8F\x5\x20A\x106\x2\xB8F\xB9B\x3\x2\x2\x2"+
		"\xB90\xB91\x5\x212\x10A\x2\xB91\xB92\x5\x20A\x106\x2\xB92\xB9B\x3\x2\x2"+
		"\x2\xB93\xB94\x5\x20C\x107\x2\xB94\xB95\x5\x20A\x106\x2\xB95\xB9B\x3\x2"+
		"\x2\x2\xB96\xB97\x5\x20E\x108\x2\xB97\xB98\x5\x20A\x106\x2\xB98\xB9B\x3"+
		"\x2\x2\x2\xB99\xB9B\x5\x21C\x10F\x2\xB9A\xB8D\x3\x2\x2\x2\xB9A\xB90\x3"+
		"\x2\x2\x2\xB9A\xB93\x3\x2\x2\x2\xB9A\xB96\x3\x2\x2\x2\xB9A\xB99\x3\x2"+
		"\x2\x2\xB9B\x20B\x3\x2\x2\x2\xB9C\xB9D\aT\x2\x2\xB9D\x20D\x3\x2\x2\x2"+
		"\xB9E\xB9F\aU\x2\x2\xB9F\x20F\x3\x2\x2\x2\xBA0\xBA1\aR\x2\x2\xBA1\x211"+
		"\x3\x2\x2\x2\xBA2\xBA3\aS\x2\x2\xBA3\x213\x3\x2\x2\x2\xBA4\xBA5\x5\x210"+
		"\x109\x2\xBA5\xBA6\x5\x20A\x106\x2\xBA6\x215\x3\x2\x2\x2\xBA7\xBA8\x5"+
		"\x212\x10A\x2\xBA8\xBA9\x5\x20A\x106\x2\xBA9\x217\x3\x2\x2\x2\xBAA\xBAB"+
		"\aI\x2\x2\xBAB\x219\x3\x2\x2\x2\xBAC\xBAD\aH\x2\x2\xBAD\x21B\x3\x2\x2"+
		"\x2\xBAE\xBB7\x5\x21E\x110\x2\xBAF\xBB0\x5\x218\x10D\x2\xBB0\xBB1\x5\x20A"+
		"\x106\x2\xBB1\xBB7\x3\x2\x2\x2\xBB2\xBB3\x5\x21A\x10E\x2\xBB3\xBB4\x5"+
		"\x20A\x106\x2\xBB4\xBB7\x3\x2\x2\x2\xBB5\xBB7\x5\x228\x115\x2\xBB6\xBAE"+
		"\x3\x2\x2\x2\xBB6\xBAF\x3\x2\x2\x2\xBB6\xBB2\x3\x2\x2\x2\xBB6\xBB5\x3"+
		"\x2\x2\x2\xBB7\x21D\x3\x2\x2\x2\xBB8\xBBB\x5\x162\xB2\x2\xBB9\xBBB\x5"+
		"<\x1F\x2\xBBA\xBB8\x3\x2\x2\x2\xBBA\xBB9\x3\x2\x2\x2\xBBB\xBC0\x3\x2\x2"+
		"\x2\xBBC\xBBF\x5\x222\x112\x2\xBBD\xBBF\x5\x226\x114\x2\xBBE\xBBC\x3\x2"+
		"\x2\x2\xBBE\xBBD\x3\x2\x2\x2\xBBF\xBC2\x3\x2\x2\x2\xBC0\xBBE\x3\x2\x2"+
		"\x2\xBC0\xBC1\x3\x2\x2\x2\xBC1\x21F\x3\x2\x2\x2\xBC2\xBC0\x3\x2\x2\x2"+
		"\xBC3\xBC4\x5\x21E\x110\x2\xBC4\xBC5\aR\x2\x2\xBC5\x221\x3\x2\x2\x2\xBC6"+
		"\xBC7\aR\x2\x2\xBC7\x223\x3\x2\x2\x2\xBC8\xBC9\x5\x21E\x110\x2\xBC9\xBCA"+
		"\aS\x2\x2\xBCA\x225\x3\x2\x2\x2\xBCB\xBCC\aS\x2\x2\xBCC\x227\x3\x2\x2"+
		"\x2\xBCD\xBCE\a<\x2\x2\xBCE\xBCF\x5\x6\x4\x2\xBCF\xBD0\a=\x2\x2\xBD0\xBD1"+
		"\x5\x20A\x106\x2\xBD1\xBE9\x3\x2\x2\x2\xBD2\xBD3\a<\x2\x2\xBD3\xBD7\x5"+
		"\xE\b\x2\xBD4\xBD6\x5*\x16\x2\xBD5\xBD4\x3\x2\x2\x2\xBD6\xBD9\x3\x2\x2"+
		"\x2\xBD7\xBD5\x3\x2\x2\x2\xBD7\xBD8\x3\x2\x2\x2\xBD8\xBDA\x3\x2\x2\x2"+
		"\xBD9\xBD7\x3\x2\x2\x2\xBDA\xBDB\a=\x2\x2\xBDB\xBDC\x5\x21C\x10F\x2\xBDC"+
		"\xBE9\x3\x2\x2\x2\xBDD\xBDE\a<\x2\x2\xBDE\xBE2\x5\xE\b\x2\xBDF\xBE1\x5"+
		"*\x16\x2\xBE0\xBDF\x3\x2\x2\x2\xBE1\xBE4\x3\x2\x2\x2\xBE2\xBE0\x3\x2\x2"+
		"\x2\xBE2\xBE3\x3\x2\x2\x2\xBE3\xBE5\x3\x2\x2\x2\xBE4\xBE2\x3\x2\x2\x2"+
		"\xBE5\xBE6\a=\x2\x2\xBE6\xBE7\x5\x1A2\xD2\x2\xBE7\xBE9\x3\x2\x2\x2\xBE8"+
		"\xBCD\x3\x2\x2\x2\xBE8\xBD2\x3\x2\x2\x2\xBE8\xBDD\x3\x2\x2\x2\xBE9\x229"+
		"\x3\x2\x2\x2\x149\x22E\x233\x23A\x23E\x242\x24B\x24F\x253\x255\x25B\x260"+
		"\x267\x26C\x26E\x274\x279\x27E\x283\x28E\x29C\x2A1\x2A9\x2B0\x2B6\x2BB"+
		"\x2C6\x2C9\x2D7\x2DC\x2E1\x2E6\x2EC\x2F6\x2FE\x308\x310\x31C\x320\x325"+
		"\x32B\x333\x33C\x347\x364\x368\x36D\x373\x376\x379\x385\x390\x39E\x3A5"+
		"\x3AE\x3B5\x3BA\x3C9\x3D0\x3D6\x3DA\x3DE\x3E2\x3E6\x3EB\x3EF\x3F3\x3F5"+
		"\x3FA\x401\x406\x408\x40E\x413\x417\x42A\x42F\x43F\x444\x44A\x450\x452"+
		"\x456\x45B\x45F\x466\x46D\x475\x478\x47D\x485\x48A\x491\x498\x49D\x4A3"+
		"\x4AF\x4B4\x4B8\x4C2\x4C7\x4CF\x4D2\x4D7\x4DF\x4E2\x4E7\x4EC\x4F1\x4F6"+
		"\x4FD\x502\x50A\x50F\x514\x519\x51F\x525\x528\x52B\x534\x53A\x540\x543"+
		"\x546\x54E\x553\x558\x55E\x561\x56C\x575\x57F\x584\x58F\x594\x5A0\x5A5"+
		"\x5B1\x5BB\x5C0\x5C8\x5CB\x5D2\x5DA\x5E0\x5E9\x5F3\x5F7\x5FA\x603\x611"+
		"\x614\x61D\x622\x62A\x630\x638\x644\x64B\x659\x66F\x691\x69D\x6A3\x6AF"+
		"\x6BC\x6D6\x6DA\x6DF\x6E3\x6E7\x6EF\x6F3\x6F7\x6FE\x707\x70F\x71E\x72A"+
		"\x730\x736\x74B\x750\x756\x762\x76D\x777\x77A\x77F\x788\x78E\x798\x79D"+
		"\x7A6\x7BD\x7C7\x7DD\x7E4\x7EC\x7F4\x7FF\x816\x820\x82B\x841\x845\x84A"+
		"\x852\x858\x85C\x860\x864\x86A\x86F\x874\x878\x87C\x882\x887\x88C\x890"+
		"\x894\x896\x89B\x8A0\x8A5\x8A9\x8AD\x8B1\x8B6\x8BE\x8C4\x8C8\x8CC\x8D0"+
		"\x8D6\x8DB\x8E0\x8E4\x8E8\x8EA\x8EF\x8FE\x90C\x918\x921\x930\x93D\x946"+
		"\x94C\x953\x958\x95F\x964\x96B\x970\x977\x97C\x984\x989\x98D\x991\x996"+
		"\x99D\x9A4\x9A9\x9B0\x9B5\x9BC\x9C1\x9C9\x9CE\x9D2\x9D9\x9DF\x9E6\x9ED"+
		"\x9F4\x9FC\xA03\xA0B\xA0F\xA16\xA1D\xA24\xA2C\xA33\xA3B\xA41\xA47\xA53"+
		"\xA59\xA5F\xA6A\xA73\xA7A\xA81\xA86\xA8A\xA93\xAA1\xAC2\xACD\xAD9\xAE5"+
		"\xAF0\xAFC\xB04\xB1B\xB1D\xB2A\xB2C\xB3F\xB50\xB52\xB6A\xB6C\xB7E\xB80"+
		"\xB9A\xBB6\xBBA\xBBE\xBC0\xBD7\xBE2\xBE8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JavaMag
