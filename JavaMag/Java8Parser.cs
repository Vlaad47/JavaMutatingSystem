//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\JavaMag\JavaMutatingSystem\JavaMag\Java8.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JavaMag {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class Java8Parser : Parser {
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, IntegerLiteral=51, FloatingPointLiteral=52, BooleanLiteral=53, 
		CharacterLiteral=54, StringLiteral=55, NullLiteral=56, LPAREN=57, RPAREN=58, 
		LBRACE=59, RBRACE=60, LBRACK=61, RBRACK=62, SEMI=63, COMMA=64, DOT=65, 
		ASSIGN=66, GT=67, LT=68, BANG=69, TILDE=70, QUESTION=71, COLON=72, EQUAL=73, 
		LE=74, GE=75, NOTEQUAL=76, AND=77, OR=78, INC=79, DEC=80, ADD=81, SUB=82, 
		MUL=83, DIV=84, BITAND=85, BITOR=86, CARET=87, MOD=88, ARROW=89, COLONCOLON=90, 
		ADD_ASSIGN=91, SUB_ASSIGN=92, MUL_ASSIGN=93, DIV_ASSIGN=94, AND_ASSIGN=95, 
		OR_ASSIGN=96, XOR_ASSIGN=97, MOD_ASSIGN=98, LSHIFT_ASSIGN=99, RSHIFT_ASSIGN=100, 
		URSHIFT_ASSIGN=101, Identifier=102, AT=103, ELLIPSIS=104, WS=105, COMMENT=106, 
		LINE_COMMENT=107;
	public const int
		RULE_literal = 0, RULE_type = 1, RULE_primitiveType = 2, RULE_numericType = 3, 
		RULE_integralType = 4, RULE_floatingPointType = 5, RULE_referenceType = 6, 
		RULE_classOrInterfaceType = 7, RULE_classType = 8, RULE_classType_lf_classOrInterfaceType = 9, 
		RULE_classType_lfno_classOrInterfaceType = 10, RULE_interfaceType = 11, 
		RULE_interfaceType_lf_classOrInterfaceType = 12, RULE_interfaceType_lfno_classOrInterfaceType = 13, 
		RULE_typeVariable = 14, RULE_arrayType = 15, RULE_dims = 16, RULE_typeParameter = 17, 
		RULE_typeParameterModifier = 18, RULE_typeBound = 19, RULE_additionalBound = 20, 
		RULE_typeArguments = 21, RULE_typeArgumentList = 22, RULE_typeArgument = 23, 
		RULE_wildcard = 24, RULE_wildcardBounds = 25, RULE_packageName = 26, RULE_typeName = 27, 
		RULE_packageOrTypeName = 28, RULE_expressionName = 29, RULE_methodName = 30, 
		RULE_ambiguousName = 31, RULE_compilationUnit = 32, RULE_packageDeclaration = 33, 
		RULE_packageModifier = 34, RULE_importDeclaration = 35, RULE_singleTypeImportDeclaration = 36, 
		RULE_typeImportOnDemandDeclaration = 37, RULE_singleStaticImportDeclaration = 38, 
		RULE_staticImportOnDemandDeclaration = 39, RULE_typeDeclaration = 40, 
		RULE_classDeclaration = 41, RULE_normalClassDeclaration = 42, RULE_classModifier = 43, 
		RULE_typeParameters = 44, RULE_typeParameterList = 45, RULE_superclass = 46, 
		RULE_superinterfaces = 47, RULE_interfaceTypeList = 48, RULE_classBody = 49, 
		RULE_classBodyDeclaration = 50, RULE_classMemberDeclaration = 51, RULE_fieldDeclaration = 52, 
		RULE_fieldModifier = 53, RULE_variableDeclaratorList = 54, RULE_variableDeclarator = 55, 
		RULE_variableDeclaratorId = 56, RULE_variableInitializer = 57, RULE_unannType = 58, 
		RULE_unannPrimitiveType = 59, RULE_unannReferenceType = 60, RULE_unannClassOrInterfaceType = 61, 
		RULE_unannClassType = 62, RULE_unannClassType_lf_unannClassOrInterfaceType = 63, 
		RULE_unannClassType_lfno_unannClassOrInterfaceType = 64, RULE_unannInterfaceType = 65, 
		RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 66, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 67, 
		RULE_unannTypeVariable = 68, RULE_unannArrayType = 69, RULE_methodDeclaration = 70, 
		RULE_methodModifier = 71, RULE_methodHeader = 72, RULE_result = 73, RULE_methodDeclarator = 74, 
		RULE_formalParameterList = 75, RULE_formalParameters = 76, RULE_formalParameter = 77, 
		RULE_variableModifier = 78, RULE_lastFormalParameter = 79, RULE_receiverParameter = 80, 
		RULE_throws_ = 81, RULE_exceptionTypeList = 82, RULE_exceptionType = 83, 
		RULE_methodBody = 84, RULE_instanceInitializer = 85, RULE_staticInitializer = 86, 
		RULE_constructorDeclaration = 87, RULE_constructorModifier = 88, RULE_constructorDeclarator = 89, 
		RULE_simpleTypeName = 90, RULE_constructorBody = 91, RULE_explicitConstructorInvocation = 92, 
		RULE_enumDeclaration = 93, RULE_enumBody = 94, RULE_enumConstantList = 95, 
		RULE_enumConstant = 96, RULE_enumConstantModifier = 97, RULE_enumBodyDeclarations = 98, 
		RULE_interfaceDeclaration = 99, RULE_normalInterfaceDeclaration = 100, 
		RULE_interfaceModifier = 101, RULE_extendsInterfaces = 102, RULE_interfaceBody = 103, 
		RULE_interfaceMemberDeclaration = 104, RULE_constantDeclaration = 105, 
		RULE_constantModifier = 106, RULE_interfaceMethodDeclaration = 107, RULE_interfaceMethodModifier = 108, 
		RULE_annotationTypeDeclaration = 109, RULE_annotationTypeBody = 110, RULE_annotationTypeMemberDeclaration = 111, 
		RULE_annotationTypeElementDeclaration = 112, RULE_annotationTypeElementModifier = 113, 
		RULE_defaultValue = 114, RULE_annotation = 115, RULE_normalAnnotation = 116, 
		RULE_elementValuePairList = 117, RULE_elementValuePair = 118, RULE_elementValue = 119, 
		RULE_elementValueArrayInitializer = 120, RULE_elementValueList = 121, 
		RULE_markerAnnotation = 122, RULE_singleElementAnnotation = 123, RULE_arrayInitializer = 124, 
		RULE_variableInitializerList = 125, RULE_block = 126, RULE_blockStatements = 127, 
		RULE_blockStatement = 128, RULE_localVariableDeclarationStatement = 129, 
		RULE_localVariableDeclaration = 130, RULE_statement = 131, RULE_statementNoShortIf = 132, 
		RULE_statementWithoutTrailingSubstatement = 133, RULE_emptyStatement = 134, 
		RULE_labeledStatement = 135, RULE_labeledStatementNoShortIf = 136, RULE_expressionStatement = 137, 
		RULE_statementExpression = 138, RULE_ifThenStatement = 139, RULE_ifThenElseStatement = 140, 
		RULE_ifThenElseStatementNoShortIf = 141, RULE_assertStatement = 142, RULE_switchStatement = 143, 
		RULE_switchBlock = 144, RULE_switchBlockStatementGroup = 145, RULE_switchLabels = 146, 
		RULE_switchLabel = 147, RULE_enumConstantName = 148, RULE_whileStatement = 149, 
		RULE_whileStatementNoShortIf = 150, RULE_doStatement = 151, RULE_forStatement = 152, 
		RULE_forStatementNoShortIf = 153, RULE_basicForStatement = 154, RULE_basicForStatementNoShortIf = 155, 
		RULE_forInit = 156, RULE_forUpdate = 157, RULE_statementExpressionList = 158, 
		RULE_enhancedForStatement = 159, RULE_enhancedForStatementNoShortIf = 160, 
		RULE_breakStatement = 161, RULE_continueStatement = 162, RULE_returnStatement = 163, 
		RULE_throwStatement = 164, RULE_synchronizedStatement = 165, RULE_tryStatement = 166, 
		RULE_catches = 167, RULE_catchClause = 168, RULE_catchFormalParameter = 169, 
		RULE_catchType = 170, RULE_finally_ = 171, RULE_tryWithResourcesStatement = 172, 
		RULE_resourceSpecification = 173, RULE_resourceList = 174, RULE_resource = 175, 
		RULE_primary = 176, RULE_primaryNoNewArray = 177, RULE_primaryNoNewArray_lf_arrayAccess = 178, 
		RULE_primaryNoNewArray_lfno_arrayAccess = 179, RULE_primaryNoNewArray_lf_primary = 180, 
		RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 181, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 182, 
		RULE_primaryNoNewArray_lfno_primary = 183, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 184, 
		RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 185, 
		RULE_classInstanceCreationExpression = 186, RULE_classInstanceCreationExpression_lf_primary = 187, 
		RULE_classInstanceCreationExpression_lfno_primary = 188, RULE_typeArgumentsOrDiamond = 189, 
		RULE_fieldAccess = 190, RULE_fieldAccess_lf_primary = 191, RULE_fieldAccess_lfno_primary = 192, 
		RULE_arrayAccess = 193, RULE_arrayAccess_lf_primary = 194, RULE_arrayAccess_lfno_primary = 195, 
		RULE_methodInvocation = 196, RULE_methodInvocation_lf_primary = 197, RULE_methodInvocation_lfno_primary = 198, 
		RULE_argumentList = 199, RULE_methodReference = 200, RULE_methodReference_lf_primary = 201, 
		RULE_methodReference_lfno_primary = 202, RULE_arrayCreationExpression = 203, 
		RULE_dimExprs = 204, RULE_dimExpr = 205, RULE_constantExpression = 206, 
		RULE_expression = 207, RULE_lambdaExpression = 208, RULE_lambdaParameters = 209, 
		RULE_inferredFormalParameterList = 210, RULE_lambdaBody = 211, RULE_assignmentExpression = 212, 
		RULE_assignment = 213, RULE_leftHandSide = 214, RULE_assignmentOperator = 215, 
		RULE_conditionalExpression = 216, RULE_conditionalOrExpression = 217, 
		RULE_conditionalAndExpression = 218, RULE_inclusiveOrExpression = 219, 
		RULE_exclusiveOrExpression = 220, RULE_andExpression = 221, RULE_equalityExpression = 222, 
		RULE_relationalExpression = 223, RULE_lesserThanOperator = 224, RULE_greaterThanOperator = 225, 
		RULE_compareOperator = 226, RULE_shiftExpression = 227, RULE_additiveExpression = 228, 
		RULE_multiplicativeExpression = 229, RULE_unaryExpression = 230, RULE_preIncrementExpression = 231, 
		RULE_preDecrementExpression = 232, RULE_unaryExpressionNotPlusMinus = 233, 
		RULE_postfixExpression = 234, RULE_postIncrementExpression = 235, RULE_postIncrementExpression_lf_postfixExpression = 236, 
		RULE_postDecrementExpression = 237, RULE_postDecrementExpression_lf_postfixExpression = 238, 
		RULE_castExpression = 239;
	public static readonly string[] ruleNames = {
		"literal", "type", "primitiveType", "numericType", "integralType", "floatingPointType", 
		"referenceType", "classOrInterfaceType", "classType", "classType_lf_classOrInterfaceType", 
		"classType_lfno_classOrInterfaceType", "interfaceType", "interfaceType_lf_classOrInterfaceType", 
		"interfaceType_lfno_classOrInterfaceType", "typeVariable", "arrayType", 
		"dims", "typeParameter", "typeParameterModifier", "typeBound", "additionalBound", 
		"typeArguments", "typeArgumentList", "typeArgument", "wildcard", "wildcardBounds", 
		"packageName", "typeName", "packageOrTypeName", "expressionName", "methodName", 
		"ambiguousName", "compilationUnit", "packageDeclaration", "packageModifier", 
		"importDeclaration", "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
		"singleStaticImportDeclaration", "staticImportOnDemandDeclaration", "typeDeclaration", 
		"classDeclaration", "normalClassDeclaration", "classModifier", "typeParameters", 
		"typeParameterList", "superclass", "superinterfaces", "interfaceTypeList", 
		"classBody", "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
		"fieldModifier", "variableDeclaratorList", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "unannType", "unannPrimitiveType", "unannReferenceType", 
		"unannClassOrInterfaceType", "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
		"unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
		"unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
		"unannTypeVariable", "unannArrayType", "methodDeclaration", "methodModifier", 
		"methodHeader", "result", "methodDeclarator", "formalParameterList", "formalParameters", 
		"formalParameter", "variableModifier", "lastFormalParameter", "receiverParameter", 
		"throws_", "exceptionTypeList", "exceptionType", "methodBody", "instanceInitializer", 
		"staticInitializer", "constructorDeclaration", "constructorModifier", 
		"constructorDeclarator", "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
		"enumDeclaration", "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
		"enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
		"interfaceModifier", "extendsInterfaces", "interfaceBody", "interfaceMemberDeclaration", 
		"constantDeclaration", "constantModifier", "interfaceMethodDeclaration", 
		"interfaceMethodModifier", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeMemberDeclaration", "annotationTypeElementDeclaration", 
		"annotationTypeElementModifier", "defaultValue", "annotation", "normalAnnotation", 
		"elementValuePairList", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"elementValueList", "markerAnnotation", "singleElementAnnotation", "arrayInitializer", 
		"variableInitializerList", "block", "blockStatements", "blockStatement", 
		"localVariableDeclarationStatement", "localVariableDeclaration", "statement", 
		"statementNoShortIf", "statementWithoutTrailingSubstatement", "emptyStatement", 
		"labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
		"statementExpression", "ifThenStatement", "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
		"assertStatement", "switchStatement", "switchBlock", "switchBlockStatementGroup", 
		"switchLabels", "switchLabel", "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
		"doStatement", "forStatement", "forStatementNoShortIf", "basicForStatement", 
		"basicForStatementNoShortIf", "forInit", "forUpdate", "statementExpressionList", 
		"enhancedForStatement", "enhancedForStatementNoShortIf", "breakStatement", 
		"continueStatement", "returnStatement", "throwStatement", "synchronizedStatement", 
		"tryStatement", "catches", "catchClause", "catchFormalParameter", "catchType", 
		"finally_", "tryWithResourcesStatement", "resourceSpecification", "resourceList", 
		"resource", "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
		"primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
		"primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
		"primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
		"primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", "classInstanceCreationExpression", 
		"classInstanceCreationExpression_lf_primary", "classInstanceCreationExpression_lfno_primary", 
		"typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
		"arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", "methodInvocation", 
		"methodInvocation_lf_primary", "methodInvocation_lfno_primary", "argumentList", 
		"methodReference", "methodReference_lf_primary", "methodReference_lfno_primary", 
		"arrayCreationExpression", "dimExprs", "dimExpr", "constantExpression", 
		"expression", "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
		"lambdaBody", "assignmentExpression", "assignment", "leftHandSide", "assignmentOperator", 
		"conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "lesserThanOperator", "greaterThanOperator", "compareOperator", 
		"shiftExpression", "additiveExpression", "multiplicativeExpression", "unaryExpression", 
		"preIncrementExpression", "preDecrementExpression", "unaryExpressionNotPlusMinus", 
		"postfixExpression", "postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
		"postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
		"castExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", null, "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
		"BooleanLiteral", "CharacterLiteral", "StringLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
		"SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
		"MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
		"AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Java8.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public Java8Parser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(Java8Parser.IntegerLiteral, 0); }
		public ITerminalNode FloatingPointLiteral() { return GetToken(Java8Parser.FloatingPointLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(Java8Parser.BooleanLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(Java8Parser.CharacterLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(Java8Parser.StringLiteral, 0); }
		public ITerminalNode NullLiteral() { return GetToken(Java8Parser.NullLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			State = 484;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; primitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; referenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_primitiveType);
		int _la;
		try {
			State = 500;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 486; annotation();
					}
					}
					State = 491;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 492; numericType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 493; annotation();
					}
					}
					State = 498;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 499; Match(BOOLEAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_numericType);
		try {
			State = 504;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; integralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503; floatingPointType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegralType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext integralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatingPointType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext floatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			_la = _input.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public ReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceTypeContext referenceType() {
		ReferenceTypeContext _localctx = new ReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_referenceType);
		try {
			State = 513;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 510; classOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 511; typeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 512; arrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
			return GetRuleContext<InterfaceType_lfno_classOrInterfaceTypeContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext[] classType_lf_classOrInterfaceType() {
			return GetRuleContexts<ClassType_lf_classOrInterfaceTypeContext>();
		}
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(i);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext[] interfaceType_lf_classOrInterfaceType() {
			return GetRuleContexts<InterfaceType_lf_classOrInterfaceTypeContext>();
		}
		public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType(int i) {
			return GetRuleContext<InterfaceType_lf_classOrInterfaceTypeContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 515; classType_lfno_classOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 516; interfaceType_lfno_classOrInterfaceType();
				}
				break;
			}
			State = 523;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 521;
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						State = 519; classType_lf_classOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 520; interfaceType_lf_classOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 525;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_classType);
		int _la;
		try {
			State = 548;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 526; annotation();
					}
					}
					State = 531;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 532; Match(Identifier);
				State = 534;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 533; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536; classOrInterfaceType();
				State = 537; Match(DOT);
				State = 541;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 538; annotation();
					}
					}
					State = 543;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 544; Match(Identifier);
				State = 546;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 545; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
		ClassType_lf_classOrInterfaceTypeContext _localctx = new ClassType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_classType_lf_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(DOT);
			State = 554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 551; annotation();
				}
				}
				State = 556;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 557; Match(Identifier);
			State = 559;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 558; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
		ClassType_lfno_classOrInterfaceTypeContext _localctx = new ClassType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_classType_lfno_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 561; annotation();
				}
				}
				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 567; Match(Identifier);
			State = 569;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 568; typeArguments();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_interfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lf_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lf_classOrInterfaceTypeContext classType_lf_classOrInterfaceType() {
			return GetRuleContext<ClassType_lf_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lf_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lf_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lf_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lf_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lf_classOrInterfaceTypeContext interfaceType_lf_classOrInterfaceType() {
		InterfaceType_lf_classOrInterfaceTypeContext _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_interfaceType_lf_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; classType_lf_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceType_lfno_classOrInterfaceTypeContext : ParserRuleContext {
		public ClassType_lfno_classOrInterfaceTypeContext classType_lfno_classOrInterfaceType() {
			return GetRuleContext<ClassType_lfno_classOrInterfaceTypeContext>(0);
		}
		public InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType_lfno_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceType_lfno_classOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceType_lfno_classOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceType_lfno_classOrInterfaceTypeContext interfaceType_lfno_classOrInterfaceType() {
		InterfaceType_lfno_classOrInterfaceTypeContext _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_interfaceType_lfno_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; classType_lfno_classOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeVariableContext typeVariable() {
		TypeVariableContext _localctx = new TypeVariableContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 577; annotation();
				}
				}
				State = 582;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 583; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_arrayType);
		try {
			State = 594;
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; primitiveType();
				State = 586; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588; classOrInterfaceType();
				State = 589; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 591; typeVariable();
				State = 592; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimsContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dims; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDims(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDims(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDims(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimsContext dims() {
		DimsContext _localctx = new DimsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_dims);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 596; annotation();
				}
				}
				State = 601;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 602; Match(LBRACK);
			State = 603; Match(RBRACK);
			State = 614;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 607;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 604; annotation();
						}
						}
						State = 609;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 610; Match(LBRACK);
					State = 611; Match(RBRACK);
					}
					} 
				}
				State = 616;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeParameterModifierContext[] typeParameterModifier() {
			return GetRuleContexts<TypeParameterModifierContext>();
		}
		public TypeParameterModifierContext typeParameterModifier(int i) {
			return GetRuleContext<TypeParameterModifierContext>(i);
		}
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 617; typeParameterModifier();
				}
				}
				State = 622;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 623; Match(Identifier);
			State = 625;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 624; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterModifierContext typeParameterModifier() {
		TypeParameterModifierContext _localctx = new TypeParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeParameterModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeBound);
		int _la;
		try {
			State = 639;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629; Match(EXTENDS);
				State = 630; typeVariable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; Match(EXTENDS);
				State = 632; classOrInterfaceType();
				State = 636;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 633; additionalBound();
					}
					}
					State = 638;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalBoundContext : ParserRuleContext {
		public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		public AdditionalBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditionalBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditionalBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalBoundContext additionalBound() {
		AdditionalBoundContext _localctx = new AdditionalBoundContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_additionalBound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(BITAND);
			State = 642; interfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_typeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; Match(LT);
			State = 645; typeArgumentList();
			State = 646; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext typeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648; typeArgument();
			State = 653;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 649; Match(COMMA);
				State = 650; typeArgument();
				}
				}
				State = 655;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typeArgument);
		try {
			State = 658;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656; referenceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657; wildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public WildcardBoundsContext wildcardBounds() {
			return GetRuleContext<WildcardBoundsContext>(0);
		}
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_wildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 660; annotation();
				}
				}
				State = 665;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 666; Match(QUESTION);
			State = 668;
			_la = _input.La(1);
			if (_la==EXTENDS || _la==SUPER) {
				{
				State = 667; wildcardBounds();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardBoundsContext : ParserRuleContext {
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public WildcardBoundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcardBounds; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWildcardBounds(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWildcardBounds(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardBounds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardBoundsContext wildcardBounds() {
		WildcardBoundsContext _localctx = new WildcardBoundsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_wildcardBounds);
		try {
			State = 674;
			switch (_input.La(1)) {
			case EXTENDS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670; Match(EXTENDS);
				State = 671; referenceType();
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 672; Match(SUPER);
				State = 673; referenceType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		return packageName(0);
	}

	private PackageNameContext packageName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageNameContext _localctx = new PackageNameContext(_ctx, _parentState);
		PackageNameContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_packageName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 677; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 684;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageName);
					State = 679;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 680; Match(DOT);
					State = 681; Match(Identifier);
					}
					} 
				}
				State = 686;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_typeName);
		try {
			State = 692;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 688; packageOrTypeName(0);
				State = 689; Match(DOT);
				State = 690; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageOrTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public PackageOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageOrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageOrTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageOrTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageOrTypeNameContext packageOrTypeName() {
		return packageOrTypeName(0);
	}

	private PackageOrTypeNameContext packageOrTypeName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PackageOrTypeNameContext _localctx = new PackageOrTypeNameContext(_ctx, _parentState);
		PackageOrTypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_packageOrTypeName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 695; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 702;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PackageOrTypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_packageOrTypeName);
					State = 697;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 698; Match(DOT);
					State = 699; Match(Identifier);
					}
					} 
				}
				State = 704;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public ExpressionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionNameContext expressionName() {
		ExpressionNameContext _localctx = new ExpressionNameContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_expressionName);
		try {
			State = 710;
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 706; ambiguousName(0);
				State = 707; Match(DOT);
				State = 708; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AmbiguousNameContext ambiguousName() {
			return GetRuleContext<AmbiguousNameContext>(0);
		}
		public AmbiguousNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAmbiguousName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAmbiguousName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousNameContext ambiguousName() {
		return ambiguousName(0);
	}

	private AmbiguousNameContext ambiguousName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AmbiguousNameContext _localctx = new AmbiguousNameContext(_ctx, _parentState);
		AmbiguousNameContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_ambiguousName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 715; Match(Identifier);
			}
			_ctx.stop = _input.Lt(-1);
			State = 722;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AmbiguousNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ambiguousName);
					State = 717;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 718; Match(DOT);
					State = 719; Match(Identifier);
					}
					} 
				}
				State = 724;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(Java8Parser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 725; packageDeclaration();
				}
				break;
			}
			State = 731;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT) {
				{
				{
				State = 728; importDeclaration();
				}
				}
				State = 733;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 734; typeDeclaration();
				}
				}
				State = 739;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 740; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public PackageModifierContext[] packageModifier() {
			return GetRuleContexts<PackageModifierContext>();
		}
		public PackageModifierContext packageModifier(int i) {
			return GetRuleContext<PackageModifierContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 742; packageModifier();
				}
				}
				State = 747;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 748; Match(PACKAGE);
			State = 749; Match(Identifier);
			State = 754;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DOT) {
				{
				{
				State = 750; Match(DOT);
				State = 751; Match(Identifier);
				}
				}
				State = 756;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 757; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public PackageModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPackageModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPackageModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageModifierContext packageModifier() {
		PackageModifierContext _localctx = new PackageModifierContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_packageModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
			return GetRuleContext<SingleTypeImportDeclarationContext>(0);
		}
		public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
			return GetRuleContext<TypeImportOnDemandDeclarationContext>(0);
		}
		public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
			return GetRuleContext<SingleStaticImportDeclarationContext>(0);
		}
		public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
			return GetRuleContext<StaticImportOnDemandDeclarationContext>(0);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_importDeclaration);
		try {
			State = 765;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761; singleTypeImportDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 762; typeImportOnDemandDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 763; singleStaticImportDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 764; staticImportOnDemandDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SingleTypeImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTypeImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleTypeImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleTypeImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleTypeImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeImportDeclarationContext singleTypeImportDeclaration() {
		SingleTypeImportDeclarationContext _localctx = new SingleTypeImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_singleTypeImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767; Match(IMPORT);
			State = 768; typeName();
			State = 769; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeImportOnDemandDeclarationContext : ParserRuleContext {
		public PackageOrTypeNameContext packageOrTypeName() {
			return GetRuleContext<PackageOrTypeNameContext>(0);
		}
		public TypeImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeImportOnDemandDeclarationContext typeImportOnDemandDeclaration() {
		TypeImportOnDemandDeclarationContext _localctx = new TypeImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771; Match(IMPORT);
			State = 772; packageOrTypeName(0);
			State = 773; Match(DOT);
			State = 774; Match(MUL);
			State = 775; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStaticImportDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SingleStaticImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStaticImportDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleStaticImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleStaticImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStaticImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStaticImportDeclarationContext singleStaticImportDeclaration() {
		SingleStaticImportDeclarationContext _localctx = new SingleStaticImportDeclarationContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_singleStaticImportDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; Match(IMPORT);
			State = 778; Match(STATIC);
			State = 779; typeName();
			State = 780; Match(DOT);
			State = 781; Match(Identifier);
			State = 782; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticImportOnDemandDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StaticImportOnDemandDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticImportOnDemandDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticImportOnDemandDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticImportOnDemandDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticImportOnDemandDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticImportOnDemandDeclarationContext staticImportOnDemandDeclaration() {
		StaticImportOnDemandDeclarationContext _localctx = new StaticImportOnDemandDeclarationContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_staticImportOnDemandDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; Match(IMPORT);
			State = 785; Match(STATIC);
			State = 786; typeName();
			State = 787; Match(DOT);
			State = 788; Match(MUL);
			State = 789; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_typeDeclaration);
		try {
			State = 794;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 791; classDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 792; interfaceDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 793; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public NormalClassDeclarationContext normalClassDeclaration() {
			return GetRuleContext<NormalClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_classDeclaration);
		try {
			State = 798;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796; normalClassDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public SuperclassContext superclass() {
			return GetRuleContext<SuperclassContext>(0);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public NormalClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalClassDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalClassDeclarationContext normalClassDeclaration() {
		NormalClassDeclarationContext _localctx = new NormalClassDeclarationContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_normalClassDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 800; classModifier();
				}
				}
				State = 805;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 806; Match(CLASS);
			State = 807; Match(Identifier);
			State = 809;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 808; typeParameters();
				}
			}

			State = 812;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 811; superclass();
				}
			}

			State = 815;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 814; superinterfaces();
				}
			}

			State = 817; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_classModifier);
		try {
			State = 827;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 820; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 821; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 822; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 823; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 824; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 825; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 826; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_typeParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829; Match(LT);
			State = 830; typeParameterList();
			State = 831; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext typeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833; typeParameter();
			State = 838;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 834; Match(COMMA);
				State = 835; typeParameter();
				}
				}
				State = 840;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperclassContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public SuperclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperclassContext superclass() {
		SuperclassContext _localctx = new SuperclassContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_superclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; Match(EXTENDS);
			State = 842; classType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperinterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public SuperinterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superinterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSuperinterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSuperinterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperinterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperinterfacesContext superinterfaces() {
		SuperinterfacesContext _localctx = new SuperinterfacesContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_superinterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(IMPLEMENTS);
			State = 845; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public InterfaceTypeContext[] interfaceType() {
			return GetRuleContexts<InterfaceTypeContext>();
		}
		public InterfaceTypeContext interfaceType(int i) {
			return GetRuleContext<InterfaceTypeContext>(i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext interfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; interfaceType();
			State = 852;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 848; Match(COMMA);
				State = 849; interfaceType();
				}
				}
				State = 854;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855; Match(LBRACE);
			State = 859;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 856; classBodyDeclaration();
				}
				}
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 862; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassMemberDeclarationContext classMemberDeclaration() {
			return GetRuleContext<ClassMemberDeclarationContext>(0);
		}
		public InstanceInitializerContext instanceInitializer() {
			return GetRuleContext<InstanceInitializerContext>(0);
		}
		public StaticInitializerContext staticInitializer() {
			return GetRuleContext<StaticInitializerContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_classBodyDeclaration);
		try {
			State = 868;
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864; classMemberDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865; instanceInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 866; staticInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 867; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext classMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_classMemberDeclaration);
		try {
			State = 875;
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 870; fieldDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 871; methodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 872; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 873; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 874; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public FieldModifierContext[] fieldModifier() {
			return GetRuleContexts<FieldModifierContext>();
		}
		public FieldModifierContext fieldModifier(int i) {
			return GetRuleContext<FieldModifierContext>(i);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || _la==AT) {
				{
				{
				State = 877; fieldModifier();
				}
				}
				State = 882;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 883; unannType();
			State = 884; variableDeclaratorList();
			State = 885; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public FieldModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldModifierContext fieldModifier() {
		FieldModifierContext _localctx = new FieldModifierContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_fieldModifier);
		try {
			State = 895;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 889; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 890; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 891; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 892; Match(FINAL);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 893; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 894; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorListContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorListContext variableDeclaratorList() {
		VariableDeclaratorListContext _localctx = new VariableDeclaratorListContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_variableDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; variableDeclarator();
			State = 902;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 898; Match(COMMA);
				State = 899; variableDeclarator();
				}
				}
				State = 904;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905; variableDeclaratorId();
			State = 908;
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 906; Match(ASSIGN);
				State = 907; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(Identifier);
			State = 912;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 911; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_variableInitializer);
		try {
			State = 916;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 914; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 915; arrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public UnannReferenceTypeContext unannReferenceType() {
			return GetRuleContext<UnannReferenceTypeContext>(0);
		}
		public UnannTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeContext unannType() {
		UnannTypeContext _localctx = new UnannTypeContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_unannType);
		try {
			State = 920;
			switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 918; unannPrimitiveType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 919; unannReferenceType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannPrimitiveTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public UnannPrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannPrimitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannPrimitiveTypeContext unannPrimitiveType() {
		UnannPrimitiveTypeContext _localctx = new UnannPrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_unannPrimitiveType);
		try {
			State = 924;
			switch (_input.La(1)) {
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 922; numericType();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 923; Match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannReferenceTypeContext : ParserRuleContext {
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext unannArrayType() {
			return GetRuleContext<UnannArrayTypeContext>(0);
		}
		public UnannReferenceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannReferenceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannReferenceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannReferenceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannReferenceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannReferenceTypeContext unannReferenceType() {
		UnannReferenceTypeContext _localctx = new UnannReferenceTypeContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_unannReferenceType);
		try {
			State = 929;
			switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 926; unannClassOrInterfaceType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 927; unannTypeVariable();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 928; unannArrayType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext[] unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannClassType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext[] unannInterfaceType_lf_unannClassOrInterfaceType() {
			return GetRuleContexts<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>();
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType(int i) {
			return GetRuleContext<UnannInterfaceType_lf_unannClassOrInterfaceTypeContext>(i);
		}
		public UnannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
		UnannClassOrInterfaceTypeContext _localctx = new UnannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_unannClassOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				State = 931; unannClassType_lfno_unannClassOrInterfaceType();
				}
				break;

			case 2:
				{
				State = 932; unannInterfaceType_lfno_unannClassOrInterfaceType();
				}
				break;
			}
			State = 939;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 937;
					switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						State = 935; unannClassType_lf_unannClassOrInterfaceType();
						}
						break;

					case 2:
						{
						State = 936; unannInterfaceType_lf_unannClassOrInterfaceType();
						}
						break;
					}
					} 
				}
				State = 941;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,66,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public UnannClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassTypeContext unannClassType() {
		UnannClassTypeContext _localctx = new UnannClassTypeContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_unannClassType);
		int _la;
		try {
			State = 958;
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942; Match(Identifier);
				State = 944;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 943; typeArguments();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946; unannClassOrInterfaceType();
				State = 947; Match(DOT);
				State = 951;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 948; annotation();
					}
					}
					State = 953;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 954; Match(Identifier);
				State = 956;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 955; typeArguments();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
		UnannClassType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_unannClassType_lf_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960; Match(DOT);
			State = 964;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 961; annotation();
				}
				}
				State = 966;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 967; Match(Identifier);
			State = 969;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 968; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannClassType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannClassType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannClassType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
		UnannClassType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_unannClassType_lfno_unannClassOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; Match(Identifier);
			State = 973;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 972; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public UnannInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceTypeContext unannInterfaceType() {
		UnannInterfaceTypeContext _localctx = new UnannInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_unannInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; unannClassType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lf_unannClassOrInterfaceTypeContext unannClassType_lf_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lf_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lf_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lf_unannClassOrInterfaceTypeContext unannInterfaceType_lf_unannClassOrInterfaceType() {
		UnannInterfaceType_lf_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; unannClassType_lf_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext : ParserRuleContext {
		public UnannClassType_lfno_unannClassOrInterfaceTypeContext unannClassType_lfno_unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassType_lfno_unannClassOrInterfaceTypeContext>(0);
		}
		public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannInterfaceType_lfno_unannClassOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext unannInterfaceType_lfno_unannClassOrInterfaceType() {
		UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979; unannClassType_lfno_unannClassOrInterfaceType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannTypeVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public UnannTypeVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannTypeVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannTypeVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannTypeVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannTypeVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannTypeVariableContext unannTypeVariable() {
		UnannTypeVariableContext _localctx = new UnannTypeVariableContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_unannTypeVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnannArrayTypeContext : ParserRuleContext {
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public UnannClassOrInterfaceTypeContext unannClassOrInterfaceType() {
			return GetRuleContext<UnannClassOrInterfaceTypeContext>(0);
		}
		public UnannTypeVariableContext unannTypeVariable() {
			return GetRuleContext<UnannTypeVariableContext>(0);
		}
		public UnannArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unannArrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnannArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnannArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnannArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnannArrayTypeContext unannArrayType() {
		UnannArrayTypeContext _localctx = new UnannArrayTypeContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_unannArrayType);
		try {
			State = 992;
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983; unannPrimitiveType();
				State = 984; dims();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 986; unannClassOrInterfaceType();
				State = 987; dims();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 989; unannTypeVariable();
				State = 990; dims();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodModifierContext[] methodModifier() {
			return GetRuleContexts<MethodModifierContext>();
		}
		public MethodModifierContext methodModifier(int i) {
			return GetRuleContext<MethodModifierContext>(i);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED))) != 0) || _la==AT) {
				{
				{
				State = 994; methodModifier();
				}
				}
				State = 999;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1000; methodHeader();
			State = 1001; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public MethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodModifierContext methodModifier() {
		MethodModifierContext _localctx = new MethodModifierContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_methodModifier);
		try {
			State = 1013;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1005; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1006; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1007; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1008; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1009; Match(FINAL);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1010; Match(SYNCHRONIZED);
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1011; Match(NATIVE);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1012; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodHeaderContext : ParserRuleContext {
		public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodDeclaratorContext methodDeclarator() {
			return GetRuleContext<MethodDeclaratorContext>(0);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public MethodHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodHeaderContext methodHeader() {
		MethodHeaderContext _localctx = new MethodHeaderContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_methodHeader);
		int _la;
		try {
			State = 1032;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1015; result();
				State = 1016; methodDeclarator();
				State = 1018;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1017; throws_();
					}
				}

				}
				break;
			case LT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1020; typeParameters();
				State = 1024;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1021; annotation();
					}
					}
					State = 1026;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1027; result();
				State = 1028; methodDeclarator();
				State = 1030;
				_la = _input.La(1);
				if (_la==THROWS) {
					{
					State = 1029; throws_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_result);
		try {
			State = 1036;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034; unannType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1035; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclaratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public MethodDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclaratorContext methodDeclarator() {
		MethodDeclaratorContext _localctx = new MethodDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_methodDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038; Match(Identifier);
			State = 1039; Match(LPAREN);
			State = 1041;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1040; formalParameterList();
				}
			}

			State = 1043; Match(RPAREN);
			State = 1045;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1044; dims();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_formalParameterList);
		try {
			State = 1052;
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1047; formalParameters();
				State = 1048; Match(COMMA);
				State = 1049; lastFormalParameter();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1051; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ReceiverParameterContext receiverParameter() {
			return GetRuleContext<ReceiverParameterContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_formalParameters);
		try {
			int _alt;
			State = 1070;
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1054; formalParameter();
				State = 1059;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1055; Match(COMMA);
						State = 1056; formalParameter();
						}
						} 
					}
					State = 1061;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1062; receiverParameter();
				State = 1067;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1063; Match(COMMA);
						State = 1064; formalParameter();
						}
						} 
					}
					State = 1069;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1072; variableModifier();
				}
				}
				State = 1077;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1078; unannType();
			State = 1079; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_variableModifier);
		try {
			State = 1083;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1081; annotation();
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public FormalParameterContext formalParameter() {
			return GetRuleContext<FormalParameterContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_lastFormalParameter);
		int _la;
		try {
			State = 1102;
			switch ( Interpreter.AdaptivePredict(_input,92,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1088;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==FINAL || _la==AT) {
					{
					{
					State = 1085; variableModifier();
					}
					}
					State = 1090;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1091; unannType();
				State = 1095;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 1092; annotation();
					}
					}
					State = 1097;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1098; Match(ELLIPSIS);
				State = 1099; variableDeclaratorId();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1101; formalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverParameterContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ReceiverParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReceiverParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReceiverParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceiverParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReceiverParameterContext receiverParameter() {
		ReceiverParameterContext _localctx = new ReceiverParameterContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_receiverParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1104; annotation();
				}
				}
				State = 1109;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1110; unannType();
			State = 1113;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1111; Match(Identifier);
				State = 1112; Match(DOT);
				}
			}

			State = 1115; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throws_Context : ParserRuleContext {
		public ExceptionTypeListContext exceptionTypeList() {
			return GetRuleContext<ExceptionTypeListContext>(0);
		}
		public Throws_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throws_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrows_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrows_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrows_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throws_Context throws_() {
		Throws_Context _localctx = new Throws_Context(_ctx, State);
		EnterRule(_localctx, 162, RULE_throws_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(THROWS);
			State = 1118; exceptionTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeListContext : ParserRuleContext {
		public ExceptionTypeContext[] exceptionType() {
			return GetRuleContexts<ExceptionTypeContext>();
		}
		public ExceptionTypeContext exceptionType(int i) {
			return GetRuleContext<ExceptionTypeContext>(i);
		}
		public ExceptionTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeListContext exceptionTypeList() {
		ExceptionTypeListContext _localctx = new ExceptionTypeListContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_exceptionTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120; exceptionType();
			State = 1125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1121; Match(COMMA);
				State = 1122; exceptionType();
				}
				}
				State = 1127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionTypeContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public TypeVariableContext typeVariable() {
			return GetRuleContext<TypeVariableContext>(0);
		}
		public ExceptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExceptionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExceptionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionTypeContext exceptionType() {
		ExceptionTypeContext _localctx = new ExceptionTypeContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_exceptionType);
		try {
			State = 1130;
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128; classType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129; typeVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_methodBody);
		try {
			State = 1134;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1132; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1133; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InstanceInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instanceInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInstanceInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInstanceInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstanceInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceInitializerContext instanceInitializer() {
		InstanceInitializerContext _localctx = new InstanceInitializerContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_instanceInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticInitializerContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StaticInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStaticInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStaticInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticInitializerContext staticInitializer() {
		StaticInitializerContext _localctx = new StaticInitializerContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_staticInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138; Match(STATIC);
			State = 1139; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public ConstructorDeclaratorContext constructorDeclarator() {
			return GetRuleContext<ConstructorDeclaratorContext>(0);
		}
		public ConstructorBodyContext constructorBody() {
			return GetRuleContext<ConstructorBodyContext>(0);
		}
		public ConstructorModifierContext[] constructorModifier() {
			return GetRuleContexts<ConstructorModifierContext>();
		}
		public ConstructorModifierContext constructorModifier(int i) {
			return GetRuleContext<ConstructorModifierContext>(i);
		}
		public Throws_Context throws_() {
			return GetRuleContext<Throws_Context>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==AT) {
				{
				{
				State = 1141; constructorModifier();
				}
				}
				State = 1146;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1147; constructorDeclarator();
			State = 1149;
			_la = _input.La(1);
			if (_la==THROWS) {
				{
				State = 1148; throws_();
				}
			}

			State = 1151; constructorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstructorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifierContext constructorModifier() {
		ConstructorModifierContext _localctx = new ConstructorModifierContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_constructorModifier);
		try {
			State = 1157;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1155; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1156; Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclaratorContext : ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return GetRuleContext<SimpleTypeNameContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclaratorContext constructorDeclarator() {
		ConstructorDeclaratorContext _localctx = new ConstructorDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_constructorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1159; typeParameters();
				}
			}

			State = 1162; simpleTypeName();
			State = 1163; Match(LPAREN);
			State = 1165;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
				{
				State = 1164; formalParameterList();
				}
			}

			State = 1167; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSimpleTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSimpleTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeNameContext simpleTypeName() {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_simpleTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorBodyContext : ParserRuleContext {
		public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
			return GetRuleContext<ExplicitConstructorInvocationContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public ConstructorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstructorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstructorBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorBodyContext constructorBody() {
		ConstructorBodyContext _localctx = new ConstructorBodyContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_constructorBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1171; Match(LBRACE);
			State = 1173;
			switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				State = 1172; explicitConstructorInvocation();
				}
				break;
			}
			State = 1176;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1175; blockStatements();
				}
			}

			State = 1178; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitConstructorInvocationContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExplicitConstructorInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitConstructorInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExplicitConstructorInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExplicitConstructorInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitConstructorInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitConstructorInvocationContext explicitConstructorInvocation() {
		ExplicitConstructorInvocationContext _localctx = new ExplicitConstructorInvocationContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_explicitConstructorInvocation);
		int _la;
		try {
			State = 1226;
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1181;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1180; typeArguments();
					}
				}

				State = 1183; Match(THIS);
				State = 1184; Match(LPAREN);
				State = 1186;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1185; argumentList();
					}
				}

				State = 1188; Match(RPAREN);
				State = 1189; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1191;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1190; typeArguments();
					}
				}

				State = 1193; Match(SUPER);
				State = 1194; Match(LPAREN);
				State = 1196;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1195; argumentList();
					}
				}

				State = 1198; Match(RPAREN);
				State = 1199; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1200; expressionName();
				State = 1201; Match(DOT);
				State = 1203;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1202; typeArguments();
					}
				}

				State = 1205; Match(SUPER);
				State = 1206; Match(LPAREN);
				State = 1208;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1207; argumentList();
					}
				}

				State = 1210; Match(RPAREN);
				State = 1211; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1213; primary();
				State = 1214; Match(DOT);
				State = 1216;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 1215; typeArguments();
					}
				}

				State = 1218; Match(SUPER);
				State = 1219; Match(LPAREN);
				State = 1221;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1220; argumentList();
					}
				}

				State = 1223; Match(RPAREN);
				State = 1224; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public SuperinterfacesContext superinterfaces() {
			return GetRuleContext<SuperinterfacesContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1228; classModifier();
				}
				}
				State = 1233;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1234; Match(ENUM);
			State = 1235; Match(Identifier);
			State = 1237;
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1236; superinterfaces();
				}
			}

			State = 1239; enumBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public EnumConstantListContext enumConstantList() {
			return GetRuleContext<EnumConstantListContext>(0);
		}
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext enumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_enumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1241; Match(LBRACE);
			State = 1243;
			_la = _input.La(1);
			if (_la==Identifier || _la==AT) {
				{
				State = 1242; enumConstantList();
				}
			}

			State = 1246;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1245; Match(COMMA);
				}
			}

			State = 1249;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1248; enumBodyDeclarations();
				}
			}

			State = 1251; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantListContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantListContext enumConstantList() {
		EnumConstantListContext _localctx = new EnumConstantListContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_enumConstantList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1253; enumConstant();
			State = 1258;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1254; Match(COMMA);
					State = 1255; enumConstant();
					}
					} 
				}
				State = 1260;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantModifierContext[] enumConstantModifier() {
			return GetRuleContexts<EnumConstantModifierContext>();
		}
		public EnumConstantModifierContext enumConstantModifier(int i) {
			return GetRuleContext<EnumConstantModifierContext>(i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 1261; enumConstantModifier();
				}
				}
				State = 1266;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1267; Match(Identifier);
			State = 1273;
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1268; Match(LPAREN);
				State = 1270;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 1269; argumentList();
					}
				}

				State = 1272; Match(RPAREN);
				}
			}

			State = 1276;
			_la = _input.La(1);
			if (_la==LBRACE) {
				{
				State = 1275; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public EnumConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantModifierContext enumConstantModifier() {
		EnumConstantModifierContext _localctx = new EnumConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_enumConstantModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278; annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280; Match(SEMI);
			State = 1284;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1281; classBodyDeclaration();
				}
				}
				State = 1286;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
			return GetRuleContext<NormalInterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_interfaceDeclaration);
		try {
			State = 1289;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1287; normalInterfaceDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1288; annotationTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalInterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ExtendsInterfacesContext extendsInterfaces() {
			return GetRuleContext<ExtendsInterfacesContext>(0);
		}
		public NormalInterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalInterfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalInterfaceDeclarationContext normalInterfaceDeclaration() {
		NormalInterfaceDeclarationContext _localctx = new NormalInterfaceDeclarationContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_normalInterfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1291; interfaceModifier();
				}
				}
				State = 1296;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1297; Match(INTERFACE);
			State = 1298; Match(Identifier);
			State = 1300;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1299; typeParameters();
				}
			}

			State = 1303;
			_la = _input.La(1);
			if (_la==EXTENDS) {
				{
				State = 1302; extendsInterfaces();
				}
			}

			State = 1305; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifierContext interfaceModifier() {
		InterfaceModifierContext _localctx = new InterfaceModifierContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_interfaceModifier);
		try {
			State = 1314;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1307; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1308; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1309; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1310; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1311; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1312; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1313; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendsInterfacesContext : ParserRuleContext {
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public ExtendsInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendsInterfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExtendsInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExtendsInterfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendsInterfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendsInterfacesContext extendsInterfaces() {
		ExtendsInterfacesContext _localctx = new ExtendsInterfacesContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_extendsInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316; Match(EXTENDS);
			State = 1317; interfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1319; Match(LBRACE);
			State = 1323;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << VOID) | (1L << SEMI))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LT - 68)) | (1L << (Identifier - 68)) | (1L << (AT - 68)))) != 0)) {
				{
				{
				State = 1320; interfaceMemberDeclaration();
				}
				}
				State = 1325;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1326; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_interfaceMemberDeclaration);
		try {
			State = 1333;
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1328; constantDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1329; interfaceMethodDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1330; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1331; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1332; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public ConstantModifierContext[] constantModifier() {
			return GetRuleContexts<ConstantModifierContext>();
		}
		public ConstantModifierContext constantModifier(int i) {
			return GetRuleContext<ConstantModifierContext>(i);
		}
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext constantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_constantDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINAL) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==AT) {
				{
				{
				State = 1335; constantModifier();
				}
				}
				State = 1340;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1341; unannType();
			State = 1342; variableDeclaratorList();
			State = 1343; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ConstantModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantModifierContext constantModifier() {
		ConstantModifierContext _localctx = new ConstantModifierContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_constantModifier);
		try {
			State = 1349;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1345; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1346; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1347; Match(STATIC);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1348; Match(FINAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public MethodHeaderContext methodHeader() {
			return GetRuleContext<MethodHeaderContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1354;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << DEFAULT) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
				{
				{
				State = 1351; interfaceMethodModifier();
				}
				}
				State = 1356;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1357; methodHeader();
			State = 1358; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_interfaceMethodModifier);
		try {
			State = 1366;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1361; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1362; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1363; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1364; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1365; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public InterfaceModifierContext[] interfaceModifier() {
			return GetRuleContexts<InterfaceModifierContext>();
		}
		public InterfaceModifierContext interfaceModifier(int i) {
			return GetRuleContext<InterfaceModifierContext>(i);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_annotationTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1368; interfaceModifier();
					}
					} 
				}
				State = 1373;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,136,_ctx);
			}
			State = 1374; Match(AT);
			State = 1375; Match(INTERFACE);
			State = 1376; Match(Identifier);
			State = 1377; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeMemberDeclarationContext[] annotationTypeMemberDeclaration() {
			return GetRuleContexts<AnnotationTypeMemberDeclarationContext>();
		}
		public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration(int i) {
			return GetRuleContext<AnnotationTypeMemberDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379; Match(LBRACE);
			State = 1383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SEMI))) != 0) || _la==Identifier || _la==AT) {
				{
				{
				State = 1380; annotationTypeMemberDeclaration();
				}
				}
				State = 1385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1386; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeMemberDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(0);
		}
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeMemberDeclarationContext annotationTypeMemberDeclaration() {
		AnnotationTypeMemberDeclarationContext _localctx = new AnnotationTypeMemberDeclarationContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_annotationTypeMemberDeclaration);
		try {
			State = 1393;
			switch ( Interpreter.AdaptivePredict(_input,138,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1388; annotationTypeElementDeclaration();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1389; constantDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1390; classDeclaration();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1391; interfaceDeclaration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1392; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public AnnotationTypeElementModifierContext[] annotationTypeElementModifier() {
			return GetRuleContexts<AnnotationTypeElementModifierContext>();
		}
		public AnnotationTypeElementModifierContext annotationTypeElementModifier(int i) {
			return GetRuleContext<AnnotationTypeElementModifierContext>(i);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_annotationTypeElementDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ABSTRACT || _la==PUBLIC || _la==AT) {
				{
				{
				State = 1395; annotationTypeElementModifier();
				}
				}
				State = 1400;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1401; unannType();
			State = 1402; Match(Identifier);
			State = 1403; Match(LPAREN);
			State = 1404; Match(RPAREN);
			State = 1406;
			_la = _input.La(1);
			if (_la==LBRACK || _la==AT) {
				{
				State = 1405; dims();
				}
			}

			State = 1409;
			_la = _input.La(1);
			if (_la==DEFAULT) {
				{
				State = 1408; defaultValue();
				}
			}

			State = 1411; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public AnnotationTypeElementModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementModifierContext annotationTypeElementModifier() {
		AnnotationTypeElementModifierContext _localctx = new AnnotationTypeElementModifierContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_annotationTypeElementModifier);
		try {
			State = 1416;
			switch (_input.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1413; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1415; Match(ABSTRACT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418; Match(DEFAULT);
			State = 1419; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public NormalAnnotationContext normalAnnotation() {
			return GetRuleContext<NormalAnnotationContext>(0);
		}
		public MarkerAnnotationContext markerAnnotation() {
			return GetRuleContext<MarkerAnnotationContext>(0);
		}
		public SingleElementAnnotationContext singleElementAnnotation() {
			return GetRuleContext<SingleElementAnnotationContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_annotation);
		try {
			State = 1424;
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1421; normalAnnotation();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1422; markerAnnotation();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1423; singleElementAnnotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValuePairListContext elementValuePairList() {
			return GetRuleContext<ElementValuePairListContext>(0);
		}
		public NormalAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterNormalAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitNormalAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalAnnotationContext normalAnnotation() {
		NormalAnnotationContext _localctx = new NormalAnnotationContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_normalAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426; Match(AT);
			State = 1427; typeName();
			State = 1428; Match(LPAREN);
			State = 1430;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1429; elementValuePairList();
				}
			}

			State = 1432; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairListContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePairList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePairList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairListContext elementValuePairList() {
		ElementValuePairListContext _localctx = new ElementValuePairListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_elementValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434; elementValuePair();
			State = 1439;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1435; Match(COMMA);
				State = 1436; elementValuePair();
				}
				}
				State = 1441;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(Identifier);
			State = 1443; Match(ASSIGN);
			State = 1444; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_elementValue);
		try {
			State = 1449;
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1446; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1447; elementValueArrayInitializer();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1448; annotation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueListContext elementValueList() {
			return GetRuleContext<ElementValueListContext>(0);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_elementValueArrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451; Match(LBRACE);
			State = 1453;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1452; elementValueList();
				}
			}

			State = 1456;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1455; Match(COMMA);
				}
			}

			State = 1458; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueListContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterElementValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitElementValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueListContext elementValueList() {
		ElementValueListContext _localctx = new ElementValueListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_elementValueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460; elementValue();
			State = 1465;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1461; Match(COMMA);
					State = 1462; elementValue();
					}
					} 
				}
				State = 1467;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,149,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MarkerAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MarkerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_markerAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMarkerAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMarkerAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMarkerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MarkerAnnotationContext markerAnnotation() {
		MarkerAnnotationContext _localctx = new MarkerAnnotationContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_markerAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(AT);
			State = 1469; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleElementAnnotationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public SingleElementAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleElementAnnotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSingleElementAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSingleElementAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleElementAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleElementAnnotationContext singleElementAnnotation() {
		SingleElementAnnotationContext _localctx = new SingleElementAnnotationContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_singleElementAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471; Match(AT);
			State = 1472; typeName();
			State = 1473; Match(LPAREN);
			State = 1474; elementValue();
			State = 1475; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerListContext variableInitializerList() {
			return GetRuleContext<VariableInitializerListContext>(0);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; Match(LBRACE);
			State = 1479;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1478; variableInitializerList();
				}
			}

			State = 1482;
			_la = _input.La(1);
			if (_la==COMMA) {
				{
				State = 1481; Match(COMMA);
				}
			}

			State = 1484; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerListContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public VariableInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializerList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterVariableInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitVariableInitializerList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerListContext variableInitializerList() {
		VariableInitializerListContext _localctx = new VariableInitializerListContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_variableInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1486; variableInitializer();
			State = 1491;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1487; Match(COMMA);
					State = 1488; variableInitializer();
					}
					} 
				}
				State = 1493;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,152,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494; Match(LBRACE);
			State = 1496;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1495; blockStatements();
				}
			}

			State = 1498; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementsContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementsContext blockStatements() {
		BlockStatementsContext _localctx = new BlockStatementsContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_blockStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500; blockStatement();
			State = 1504;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				{
				State = 1501; blockStatement();
				}
				}
				State = 1506;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
			return GetRuleContext<LocalVariableDeclarationStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_blockStatement);
		try {
			State = 1510;
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1507; localVariableDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1508; classDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1509; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public LocalVariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationStatementContext localVariableDeclarationStatement() {
		LocalVariableDeclarationStatementContext _localctx = new LocalVariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_localVariableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512; localVariableDeclaration();
			State = 1513; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorListContext variableDeclaratorList() {
			return GetRuleContext<VariableDeclaratorListContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1515; variableModifier();
				}
				}
				State = 1520;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1521; unannType();
			State = 1522; variableDeclaratorList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public IfThenStatementContext ifThenStatement() {
			return GetRuleContext<IfThenStatementContext>(0);
		}
		public IfThenElseStatementContext ifThenElseStatement() {
			return GetRuleContext<IfThenElseStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_statement);
		try {
			State = 1530;
			switch ( Interpreter.AdaptivePredict(_input,157,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1524; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1525; labeledStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1526; ifThenStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1527; ifThenElseStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1528; whileStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1529; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementNoShortIfContext : ParserRuleContext {
		public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
			return GetRuleContext<StatementWithoutTrailingSubstatementContext>(0);
		}
		public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
			return GetRuleContext<LabeledStatementNoShortIfContext>(0);
		}
		public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
			return GetRuleContext<IfThenElseStatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext whileStatementNoShortIf() {
			return GetRuleContext<WhileStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext forStatementNoShortIf() {
			return GetRuleContext<ForStatementNoShortIfContext>(0);
		}
		public StatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementNoShortIfContext statementNoShortIf() {
		StatementNoShortIfContext _localctx = new StatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_statementNoShortIf);
		try {
			State = 1537;
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1532; statementWithoutTrailingSubstatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1533; labeledStatementNoShortIf();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1534; ifThenElseStatementNoShortIf();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1535; whileStatementNoShortIf();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1536; forStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementWithoutTrailingSubstatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SynchronizedStatementContext synchronizedStatement() {
			return GetRuleContext<SynchronizedStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public StatementWithoutTrailingSubstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementWithoutTrailingSubstatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementWithoutTrailingSubstatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementWithoutTrailingSubstatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWithoutTrailingSubstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementWithoutTrailingSubstatementContext statementWithoutTrailingSubstatement() {
		StatementWithoutTrailingSubstatementContext _localctx = new StatementWithoutTrailingSubstatementContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_statementWithoutTrailingSubstatement);
		try {
			State = 1551;
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1539; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1540; emptyStatement();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case INC:
			case DEC:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1541; expressionStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1542; assertStatement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1543; switchStatement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1544; doStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1545; breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1546; continueStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1547; returnStatement();
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1548; synchronizedStatement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1549; throwStatement();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1550; tryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; Match(Identifier);
			State = 1556; Match(COLON);
			State = 1557; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementNoShortIfContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public LabeledStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLabeledStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLabeledStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementNoShortIfContext labeledStatementNoShortIf() {
		LabeledStatementNoShortIfContext _localctx = new LabeledStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_labeledStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1559; Match(Identifier);
			State = 1560; Match(COLON);
			State = 1561; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public StatementExpressionContext statementExpression() {
			return GetRuleContext<StatementExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; statementExpression();
			State = 1564; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public PostIncrementExpressionContext postIncrementExpression() {
			return GetRuleContext<PostIncrementExpressionContext>(0);
		}
		public PostDecrementExpressionContext postDecrementExpression() {
			return GetRuleContext<PostDecrementExpressionContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public StatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionContext statementExpression() {
		StatementExpressionContext _localctx = new StatementExpressionContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_statementExpression);
		try {
			State = 1573;
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1566; assignment();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1567; preIncrementExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1568; preDecrementExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1569; postIncrementExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1570; postDecrementExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1571; methodInvocation();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1572; classInstanceCreationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenStatementContext ifThenStatement() {
		IfThenStatementContext _localctx = new IfThenStatementContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_ifThenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575; Match(IF);
			State = 1576; Match(LPAREN);
			State = 1577; expression();
			State = 1578; Match(RPAREN);
			State = 1579; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfThenElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementContext ifThenElseStatement() {
		IfThenElseStatementContext _localctx = new IfThenElseStatementContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_ifThenElseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581; Match(IF);
			State = 1582; Match(LPAREN);
			State = 1583; expression();
			State = 1584; Match(RPAREN);
			State = 1585; statementNoShortIf();
			State = 1586; Match(ELSE);
			State = 1587; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext[] statementNoShortIf() {
			return GetRuleContexts<StatementNoShortIfContext>();
		}
		public StatementNoShortIfContext statementNoShortIf(int i) {
			return GetRuleContext<StatementNoShortIfContext>(i);
		}
		public IfThenElseStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterIfThenElseStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitIfThenElseStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStatementNoShortIfContext ifThenElseStatementNoShortIf() {
		IfThenElseStatementNoShortIfContext _localctx = new IfThenElseStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_ifThenElseStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(IF);
			State = 1590; Match(LPAREN);
			State = 1591; expression();
			State = 1592; Match(RPAREN);
			State = 1593; statementNoShortIf();
			State = 1594; Match(ELSE);
			State = 1595; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_assertStatement);
		try {
			State = 1607;
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1597; Match(ASSERT);
				State = 1598; expression();
				State = 1599; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1601; Match(ASSERT);
				State = 1602; expression();
				State = 1603; Match(COLON);
				State = 1604; expression();
				State = 1605; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609; Match(SWITCH);
			State = 1610; Match(LPAREN);
			State = 1611; expression();
			State = 1612; Match(RPAREN);
			State = 1613; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_switchBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615; Match(LBRACE);
			State = 1619;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1616; switchBlockStatementGroup();
					}
					} 
				}
				State = 1621;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			}
			State = 1625;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1622; switchLabel();
				}
				}
				State = 1627;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1628; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelsContext switchLabels() {
			return GetRuleContext<SwitchLabelsContext>(0);
		}
		public BlockStatementsContext blockStatements() {
			return GetRuleContext<BlockStatementsContext>(0);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_switchBlockStatementGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630; switchLabels();
			State = 1631; blockStatements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelsContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabels; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelsContext switchLabels() {
		SwitchLabelsContext _localctx = new SwitchLabelsContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_switchLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1633; switchLabel();
			State = 1637;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1634; switchLabel();
				}
				}
				State = 1639;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumConstantNameContext enumConstantName() {
			return GetRuleContext<EnumConstantNameContext>(0);
		}
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_switchLabel);
		try {
			State = 1650;
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1640; Match(CASE);
				State = 1641; constantExpression();
				State = 1642; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1644; Match(CASE);
				State = 1645; enumConstantName();
				State = 1646; Match(COLON);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1648; Match(DEFAULT);
				State = 1649; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public EnumConstantNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstantName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnumConstantName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnumConstantName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstantName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantNameContext enumConstantName() {
		EnumConstantNameContext _localctx = new EnumConstantNameContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_enumConstantName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1652; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; Match(WHILE);
			State = 1655; Match(LPAREN);
			State = 1656; expression();
			State = 1657; Match(RPAREN);
			State = 1658; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementNoShortIfContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public WhileStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterWhileStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitWhileStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementNoShortIfContext whileStatementNoShortIf() {
		WhileStatementNoShortIfContext _localctx = new WhileStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_whileStatementNoShortIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1660; Match(WHILE);
			State = 1661; Match(LPAREN);
			State = 1662; expression();
			State = 1663; Match(RPAREN);
			State = 1664; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666; Match(DO);
			State = 1667; statement();
			State = 1668; Match(WHILE);
			State = 1669; Match(LPAREN);
			State = 1670; expression();
			State = 1671; Match(RPAREN);
			State = 1672; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BasicForStatementContext basicForStatement() {
			return GetRuleContext<BasicForStatementContext>(0);
		}
		public EnhancedForStatementContext enhancedForStatement() {
			return GetRuleContext<EnhancedForStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_forStatement);
		try {
			State = 1676;
			switch ( Interpreter.AdaptivePredict(_input,166,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1674; basicForStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1675; enhancedForStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementNoShortIfContext : ParserRuleContext {
		public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
			return GetRuleContext<BasicForStatementNoShortIfContext>(0);
		}
		public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
			return GetRuleContext<EnhancedForStatementNoShortIfContext>(0);
		}
		public ForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementNoShortIfContext forStatementNoShortIf() {
		ForStatementNoShortIfContext _localctx = new ForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_forStatementNoShortIf);
		try {
			State = 1680;
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1678; basicForStatementNoShortIf();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1679; enhancedForStatementNoShortIf();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementContext basicForStatement() {
		BasicForStatementContext _localctx = new BasicForStatementContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_basicForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682; Match(FOR);
			State = 1683; Match(LPAREN);
			State = 1685;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1684; forInit();
				}
			}

			State = 1687; Match(SEMI);
			State = 1689;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1688; expression();
				}
			}

			State = 1691; Match(SEMI);
			State = 1693;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1692; forUpdate();
				}
			}

			State = 1695; Match(RPAREN);
			State = 1696; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicForStatementNoShortIfContext : ParserRuleContext {
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public BasicForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBasicForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBasicForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicForStatementNoShortIfContext basicForStatementNoShortIf() {
		BasicForStatementNoShortIfContext _localctx = new BasicForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_basicForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698; Match(FOR);
			State = 1699; Match(LPAREN);
			State = 1701;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1700; forInit();
				}
			}

			State = 1703; Match(SEMI);
			State = 1705;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1704; expression();
				}
			}

			State = 1707; Match(SEMI);
			State = 1709;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (INC - 79)) | (1L << (DEC - 79)) | (1L << (Identifier - 79)) | (1L << (AT - 79)))) != 0)) {
				{
				State = 1708; forUpdate();
				}
			}

			State = 1711; Match(RPAREN);
			State = 1712; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_forInit);
		try {
			State = 1716;
			switch ( Interpreter.AdaptivePredict(_input,174,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714; statementExpressionList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1715; localVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public StatementExpressionListContext statementExpressionList() {
			return GetRuleContext<StatementExpressionListContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1718; statementExpressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementExpressionListContext : ParserRuleContext {
		public StatementExpressionContext[] statementExpression() {
			return GetRuleContexts<StatementExpressionContext>();
		}
		public StatementExpressionContext statementExpression(int i) {
			return GetRuleContext<StatementExpressionContext>(i);
		}
		public StatementExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterStatementExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitStatementExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementExpressionListContext statementExpressionList() {
		StatementExpressionListContext _localctx = new StatementExpressionListContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_statementExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720; statementExpression();
			State = 1725;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1721; Match(COMMA);
				State = 1722; statementExpression();
				}
				}
				State = 1727;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementContext enhancedForStatement() {
		EnhancedForStatementContext _localctx = new EnhancedForStatementContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_enhancedForStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1728; Match(FOR);
			State = 1729; Match(LPAREN);
			State = 1733;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1730; variableModifier();
				}
				}
				State = 1735;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1736; unannType();
			State = 1737; variableDeclaratorId();
			State = 1738; Match(COLON);
			State = 1739; expression();
			State = 1740; Match(RPAREN);
			State = 1741; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForStatementNoShortIfContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementNoShortIfContext statementNoShortIf() {
			return GetRuleContext<StatementNoShortIfContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForStatementNoShortIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForStatementNoShortIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEnhancedForStatementNoShortIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEnhancedForStatementNoShortIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForStatementNoShortIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForStatementNoShortIfContext enhancedForStatementNoShortIf() {
		EnhancedForStatementNoShortIfContext _localctx = new EnhancedForStatementNoShortIfContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_enhancedForStatementNoShortIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1743; Match(FOR);
			State = 1744; Match(LPAREN);
			State = 1748;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1745; variableModifier();
				}
				}
				State = 1750;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1751; unannType();
			State = 1752; variableDeclaratorId();
			State = 1753; Match(COLON);
			State = 1754; expression();
			State = 1755; Match(RPAREN);
			State = 1756; statementNoShortIf();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_breakStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1758; Match(BREAK);
			State = 1760;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1759; Match(Identifier);
				}
			}

			State = 1762; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_continueStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764; Match(CONTINUE);
			State = 1766;
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 1765; Match(Identifier);
				}
			}

			State = 1768; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(RETURN);
			State = 1772;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 1771; expression();
				}
			}

			State = 1774; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; Match(THROW);
			State = 1777; expression();
			State = 1778; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SynchronizedStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SynchronizedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synchronizedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterSynchronizedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitSynchronizedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynchronizedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SynchronizedStatementContext synchronizedStatement() {
		SynchronizedStatementContext _localctx = new SynchronizedStatementContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_synchronizedStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780; Match(SYNCHRONIZED);
			State = 1781; Match(LPAREN);
			State = 1782; expression();
			State = 1783; Match(RPAREN);
			State = 1784; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext tryWithResourcesStatement() {
			return GetRuleContext<TryWithResourcesStatementContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_tryStatement);
		int _la;
		try {
			State = 1798;
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1786; Match(TRY);
				State = 1787; block();
				State = 1788; catches();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1790; Match(TRY);
				State = 1791; block();
				State = 1793;
				_la = _input.La(1);
				if (_la==CATCH) {
					{
					State = 1792; catches();
					}
				}

				State = 1795; finally_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1797; tryWithResourcesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchesContext : ParserRuleContext {
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public CatchesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catches; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatches(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatches(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatches(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchesContext catches() {
		CatchesContext _localctx = new CatchesContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_catches);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800; catchClause();
			State = 1804;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==CATCH) {
				{
				{
				State = 1801; catchClause();
				}
				}
				State = 1806;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public CatchFormalParameterContext catchFormalParameter() {
			return GetRuleContext<CatchFormalParameterContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_catchClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1807; Match(CATCH);
			State = 1808; Match(LPAREN);
			State = 1809; catchFormalParameter();
			State = 1810; Match(RPAREN);
			State = 1811; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchFormalParameterContext : ParserRuleContext {
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchFormalParameterContext catchFormalParameter() {
		CatchFormalParameterContext _localctx = new CatchFormalParameterContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_catchFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1813; variableModifier();
				}
				}
				State = 1818;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1819; catchType();
			State = 1820; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public UnannClassTypeContext unannClassType() {
			return GetRuleContext<UnannClassTypeContext>(0);
		}
		public ClassTypeContext[] classType() {
			return GetRuleContexts<ClassTypeContext>();
		}
		public ClassTypeContext classType(int i) {
			return GetRuleContext<ClassTypeContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1822; unannClassType();
			State = 1827;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BITOR) {
				{
				{
				State = 1823; Match(BITOR);
				State = 1824; classType();
				}
				}
				State = 1829;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_Context : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFinally_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFinally_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_Context finally_() {
		Finally_Context _localctx = new Finally_Context(_ctx, State);
		EnterRule(_localctx, 342, RULE_finally_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830; Match(FINALLY);
			State = 1831; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryWithResourcesStatementContext : ParserRuleContext {
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchesContext catches() {
			return GetRuleContext<CatchesContext>(0);
		}
		public Finally_Context finally_() {
			return GetRuleContext<Finally_Context>(0);
		}
		public TryWithResourcesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryWithResourcesStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTryWithResourcesStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTryWithResourcesStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTryWithResourcesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TryWithResourcesStatementContext tryWithResourcesStatement() {
		TryWithResourcesStatementContext _localctx = new TryWithResourcesStatementContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_tryWithResourcesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833; Match(TRY);
			State = 1834; resourceSpecification();
			State = 1835; block();
			State = 1837;
			_la = _input.La(1);
			if (_la==CATCH) {
				{
				State = 1836; catches();
				}
			}

			State = 1840;
			_la = _input.La(1);
			if (_la==FINALLY) {
				{
				State = 1839; finally_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1842; Match(LPAREN);
			State = 1843; resourceList();
			State = 1845;
			_la = _input.La(1);
			if (_la==SEMI) {
				{
				State = 1844; Match(SEMI);
				}
			}

			State = 1847; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_resourceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849; resource();
			State = 1854;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1850; Match(SEMI);
					State = 1851; resource();
					}
					} 
				}
				State = 1856;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public UnannTypeContext unannType() {
			return GetRuleContext<UnannTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1860;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 1857; variableModifier();
				}
				}
				State = 1862;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1863; unannType();
			State = 1864; variableDeclaratorId();
			State = 1865; Match(ASSIGN);
			State = 1866; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primaryContext>(0);
		}
		public ArrayCreationExpressionContext arrayCreationExpression() {
			return GetRuleContext<ArrayCreationExpressionContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext[] primaryNoNewArray_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primaryContext>(i);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870;
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1868; primaryNoNewArray_lfno_primary();
				}
				break;

			case 2:
				{
				State = 1869; arrayCreationExpression();
				}
				break;
			}
			State = 1875;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1872; primaryNoNewArray_lf_primary();
					}
					} 
				}
				State = 1877;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArrayContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArrayContext primaryNoNewArray() {
		PrimaryNoNewArrayContext _localctx = new PrimaryNoNewArrayContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_primaryNoNewArray);
		int _la;
		try {
			State = 1907;
			switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1878; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1879; typeName();
				State = 1884;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1880; Match(LBRACK);
					State = 1881; Match(RBRACK);
					}
					}
					State = 1886;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1887; Match(DOT);
				State = 1888; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1890; Match(VOID);
				State = 1891; Match(DOT);
				State = 1892; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1893; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1894; typeName();
				State = 1895; Match(DOT);
				State = 1896; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1898; Match(LPAREN);
				State = 1899; expression();
				State = 1900; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1902; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1903; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1904; arrayAccess();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1905; methodInvocation();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1906; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_arrayAccessContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess() {
		PrimaryNoNewArray_lf_arrayAccessContext _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_primaryNoNewArray_lf_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_arrayAccessContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
			return GetRuleContext<ClassInstanceCreationExpressionContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public MethodInvocationContext methodInvocation() {
			return GetRuleContext<MethodInvocationContext>(0);
		}
		public MethodReferenceContext methodReference() {
			return GetRuleContext<MethodReferenceContext>(0);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_arrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
		PrimaryNoNewArray_lfno_arrayAccessContext _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_primaryNoNewArray_lfno_arrayAccess);
		int _la;
		try {
			State = 1939;
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1911; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1912; typeName();
				State = 1917;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1913; Match(LBRACK);
					State = 1914; Match(RBRACK);
					}
					}
					State = 1919;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1920; Match(DOT);
				State = 1921; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1923; Match(VOID);
				State = 1924; Match(DOT);
				State = 1925; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1926; Match(THIS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1927; typeName();
				State = 1928; Match(DOT);
				State = 1929; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1931; Match(LPAREN);
				State = 1932; expression();
				State = 1933; Match(RPAREN);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1935; classInstanceCreationExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1936; fieldAccess();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1937; methodInvocation();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1938; methodReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
			return GetRuleContext<ArrayAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primaryContext primaryNoNewArray_lf_primary() {
		PrimaryNoNewArray_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_primaryNoNewArray_lf_primary);
		try {
			State = 1946;
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1941; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1942; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1943; arrayAccess_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1944; methodInvocation_lf_primary();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1945; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext : ParserRuleContext {
		public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lf_primaryContext>(0);
		}
		public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
			return GetRuleContext<FieldAccess_lf_primaryContext>(0);
		}
		public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
			return GetRuleContext<MethodInvocation_lf_primaryContext>(0);
		}
		public MethodReference_lf_primaryContext methodReference_lf_primary() {
			return GetRuleContext<MethodReference_lf_primaryContext>(0);
		}
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
		PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
		try {
			State = 1954;
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950; classInstanceCreationExpression_lf_primary();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; fieldAccess_lf_primary();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1952; methodInvocation_lf_primary();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1953; methodReference_lf_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
			return GetRuleContext<ArrayAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primaryContext primaryNoNewArray_lfno_primary() {
		PrimaryNoNewArray_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_primaryNoNewArray_lfno_primary);
		int _la;
		try {
			State = 1996;
			switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1956; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1957; typeName();
				State = 1962;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1958; Match(LBRACK);
					State = 1959; Match(RBRACK);
					}
					}
					State = 1964;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1965; Match(DOT);
				State = 1966; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1968; unannPrimitiveType();
				State = 1973;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 1969; Match(LBRACK);
					State = 1970; Match(RBRACK);
					}
					}
					State = 1975;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1976; Match(DOT);
				State = 1977; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1979; Match(VOID);
				State = 1980; Match(DOT);
				State = 1981; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1982; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1983; typeName();
				State = 1984; Match(DOT);
				State = 1985; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1987; Match(LPAREN);
				State = 1988; expression();
				State = 1989; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1991; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1992; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1993; arrayAccess_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1994; methodInvocation_lfno_primary();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1995; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UnannPrimitiveTypeContext unannPrimitiveType() {
			return GetRuleContext<UnannPrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
			return GetRuleContext<ClassInstanceCreationExpression_lfno_primaryContext>(0);
		}
		public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
			return GetRuleContext<FieldAccess_lfno_primaryContext>(0);
		}
		public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
			return GetRuleContext<MethodInvocation_lfno_primaryContext>(0);
		}
		public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
			return GetRuleContext<MethodReference_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
		PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
		int _la;
		try {
			State = 2039;
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2000; literal();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2001; typeName();
				State = 2006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2002; Match(LBRACK);
					State = 2003; Match(RBRACK);
					}
					}
					State = 2008;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2009; Match(DOT);
				State = 2010; Match(CLASS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2012; unannPrimitiveType();
				State = 2017;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 2013; Match(LBRACK);
					State = 2014; Match(RBRACK);
					}
					}
					State = 2019;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2020; Match(DOT);
				State = 2021; Match(CLASS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2023; Match(VOID);
				State = 2024; Match(DOT);
				State = 2025; Match(CLASS);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2026; Match(THIS);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2027; typeName();
				State = 2028; Match(DOT);
				State = 2029; Match(THIS);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2031; Match(LPAREN);
				State = 2032; expression();
				State = 2033; Match(RPAREN);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2035; classInstanceCreationExpression_lfno_primary();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2036; fieldAccess_lfno_primary();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2037; methodInvocation_lfno_primary();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2038; methodReference_lfno_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpressionContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ClassInstanceCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpressionContext classInstanceCreationExpression() {
		ClassInstanceCreationExpressionContext _localctx = new ClassInstanceCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_classInstanceCreationExpression);
		int _la;
		try {
			State = 2124;
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2041; Match(NEW);
				State = 2043;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2042; typeArguments();
					}
				}

				State = 2048;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2045; annotation();
					}
					}
					State = 2050;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2051; Match(Identifier);
				State = 2062;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2052; Match(DOT);
					State = 2056;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2053; annotation();
						}
						}
						State = 2058;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2059; Match(Identifier);
					}
					}
					State = 2064;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2066;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2065; typeArgumentsOrDiamond();
					}
				}

				State = 2068; Match(LPAREN);
				State = 2070;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2069; argumentList();
					}
				}

				State = 2072; Match(RPAREN);
				State = 2074;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2073; classBody();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076; expressionName();
				State = 2077; Match(DOT);
				State = 2078; Match(NEW);
				State = 2080;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2079; typeArguments();
					}
				}

				State = 2085;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2082; annotation();
					}
					}
					State = 2087;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2088; Match(Identifier);
				State = 2090;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2089; typeArgumentsOrDiamond();
					}
				}

				State = 2092; Match(LPAREN);
				State = 2094;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2093; argumentList();
					}
				}

				State = 2096; Match(RPAREN);
				State = 2098;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2097; classBody();
					}
				}

				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2100; primary();
				State = 2101; Match(DOT);
				State = 2102; Match(NEW);
				State = 2104;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2103; typeArguments();
					}
				}

				State = 2109;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2106; annotation();
					}
					}
					State = 2111;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2112; Match(Identifier);
				State = 2114;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2113; typeArgumentsOrDiamond();
					}
				}

				State = 2116; Match(LPAREN);
				State = 2118;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2117; argumentList();
					}
				}

				State = 2120; Match(RPAREN);
				State = 2122;
				_la = _input.La(1);
				if (_la==LBRACE) {
					{
					State = 2121; classBody();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lf_primaryContext classInstanceCreationExpression_lf_primary() {
		ClassInstanceCreationExpression_lf_primaryContext _localctx = new ClassInstanceCreationExpression_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_classInstanceCreationExpression_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2126; Match(DOT);
			State = 2127; Match(NEW);
			State = 2129;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2128; typeArguments();
				}
			}

			State = 2134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2131; annotation();
				}
				}
				State = 2136;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2137; Match(Identifier);
			State = 2139;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2138; typeArgumentsOrDiamond();
				}
			}

			State = 2141; Match(LPAREN);
			State = 2143;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2142; argumentList();
				}
			}

			State = 2145; Match(RPAREN);
			State = 2147;
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 2146; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInstanceCreationExpression_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInstanceCreationExpression_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterClassInstanceCreationExpression_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitClassInstanceCreationExpression_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassInstanceCreationExpression_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassInstanceCreationExpression_lfno_primaryContext classInstanceCreationExpression_lfno_primary() {
		ClassInstanceCreationExpression_lfno_primaryContext _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_classInstanceCreationExpression_lfno_primary);
		int _la;
		try {
			State = 2208;
			switch (_input.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2149; Match(NEW);
				State = 2151;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2150; typeArguments();
					}
				}

				State = 2156;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2153; annotation();
					}
					}
					State = 2158;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2159; Match(Identifier);
				State = 2170;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DOT) {
					{
					{
					State = 2160; Match(DOT);
					State = 2164;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==AT) {
						{
						{
						State = 2161; annotation();
						}
						}
						State = 2166;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2167; Match(Identifier);
					}
					}
					State = 2172;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2174;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2173; typeArgumentsOrDiamond();
					}
				}

				State = 2176; Match(LPAREN);
				State = 2178;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2177; argumentList();
					}
				}

				State = 2180; Match(RPAREN);
				State = 2182;
				switch ( Interpreter.AdaptivePredict(_input,234,_ctx) ) {
				case 1:
					{
					State = 2181; classBody();
					}
					break;
				}
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2184; expressionName();
				State = 2185; Match(DOT);
				State = 2186; Match(NEW);
				State = 2188;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2187; typeArguments();
					}
				}

				State = 2193;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==AT) {
					{
					{
					State = 2190; annotation();
					}
					}
					State = 2195;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2196; Match(Identifier);
				State = 2198;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2197; typeArgumentsOrDiamond();
					}
				}

				State = 2200; Match(LPAREN);
				State = 2202;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2201; argumentList();
					}
				}

				State = 2204; Match(RPAREN);
				State = 2206;
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 2205; classBody();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_typeArgumentsOrDiamond);
		try {
			State = 2213;
			switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2210; typeArguments();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2211; Match(LT);
				State = 2212; Match(GT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_fieldAccess);
		try {
			State = 2228;
			switch ( Interpreter.AdaptivePredict(_input,242,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2215; primary();
				State = 2216; Match(DOT);
				State = 2217; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2219; Match(SUPER);
				State = 2220; Match(DOT);
				State = 2221; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2222; typeName();
				State = 2223; Match(DOT);
				State = 2224; Match(SUPER);
				State = 2225; Match(DOT);
				State = 2226; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FieldAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lf_primaryContext fieldAccess_lf_primary() {
		FieldAccess_lf_primaryContext _localctx = new FieldAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_fieldAccess_lf_primary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230; Match(DOT);
			State = 2231; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccess_lfno_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FieldAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterFieldAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitFieldAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccess_lfno_primaryContext fieldAccess_lfno_primary() {
		FieldAccess_lfno_primaryContext _localctx = new FieldAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 384, RULE_fieldAccess_lfno_primary);
		try {
			State = 2242;
			switch (_input.La(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2233; Match(SUPER);
				State = 2234; Match(DOT);
				State = 2235; Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2236; typeName();
				State = 2237; Match(DOT);
				State = 2238; Match(SUPER);
				State = 2239; Match(DOT);
				State = 2240; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_arrayAccessContext primaryNoNewArray_lfno_arrayAccess() {
			return GetRuleContext<PrimaryNoNewArray_lfno_arrayAccessContext>(0);
		}
		public PrimaryNoNewArray_lf_arrayAccessContext[] primaryNoNewArray_lf_arrayAccess() {
			return GetRuleContexts<PrimaryNoNewArray_lf_arrayAccessContext>();
		}
		public PrimaryNoNewArray_lf_arrayAccessContext primaryNoNewArray_lf_arrayAccess(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_arrayAccessContext>(i);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(_ctx, State);
		EnterRule(_localctx, 386, RULE_arrayAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2254;
			switch ( Interpreter.AdaptivePredict(_input,244,_ctx) ) {
			case 1:
				{
				State = 2244; expressionName();
				State = 2245; Match(LBRACK);
				State = 2246; expression();
				State = 2247; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2249; primaryNoNewArray_lfno_arrayAccess();
				State = 2250; Match(LBRACK);
				State = 2251; expression();
				State = 2252; Match(RBRACK);
				}
				break;
			}
			State = 2263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 2256; primaryNoNewArray_lf_arrayAccess();
				State = 2257; Match(LBRACK);
				State = 2258; expression();
				State = 2259; Match(RBRACK);
				}
				}
				State = 2265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lf_primaryContext : ParserRuleContext {
		public PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext[] primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>();
		}
		public PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext>(i);
		}
		public ArrayAccess_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lf_primaryContext arrayAccess_lf_primary() {
		ArrayAccess_lf_primaryContext _localctx = new ArrayAccess_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 388, RULE_arrayAccess_lf_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2266; primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
			State = 2267; Match(LBRACK);
			State = 2268; expression();
			State = 2269; Match(RBRACK);
			}
			State = 2278;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2271; primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
					State = 2272; Match(LBRACK);
					State = 2273; expression();
					State = 2274; Match(RBRACK);
					}
					} 
				}
				State = 2280;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,246,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccess_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext>(0);
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext[] primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
			return GetRuleContexts<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>();
		}
		public PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(int i) {
			return GetRuleContext<PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext>(i);
		}
		public ArrayAccess_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayAccess_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayAccess_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccess_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccess_lfno_primaryContext arrayAccess_lfno_primary() {
		ArrayAccess_lfno_primaryContext _localctx = new ArrayAccess_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 390, RULE_arrayAccess_lfno_primary);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291;
			switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				State = 2281; expressionName();
				State = 2282; Match(LBRACK);
				State = 2283; expression();
				State = 2284; Match(RBRACK);
				}
				break;

			case 2:
				{
				State = 2286; primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
				State = 2287; Match(LBRACK);
				State = 2288; expression();
				State = 2289; Match(RBRACK);
				}
				break;
			}
			State = 2300;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2293; primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
					State = 2294; Match(LBRACK);
					State = 2295; expression();
					State = 2296; Match(RBRACK);
					}
					} 
				}
				State = 2302;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,248,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext methodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(_ctx, State);
		EnterRule(_localctx, 392, RULE_methodInvocation);
		int _la;
		try {
			State = 2371;
			switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2303; methodName();
				State = 2304; Match(LPAREN);
				State = 2306;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2305; argumentList();
					}
				}

				State = 2308; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2310; typeName();
				State = 2311; Match(DOT);
				State = 2313;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2312; typeArguments();
					}
				}

				State = 2315; Match(Identifier);
				State = 2316; Match(LPAREN);
				State = 2318;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2317; argumentList();
					}
				}

				State = 2320; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2322; expressionName();
				State = 2323; Match(DOT);
				State = 2325;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2324; typeArguments();
					}
				}

				State = 2327; Match(Identifier);
				State = 2328; Match(LPAREN);
				State = 2330;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2329; argumentList();
					}
				}

				State = 2332; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2334; primary();
				State = 2335; Match(DOT);
				State = 2337;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2336; typeArguments();
					}
				}

				State = 2339; Match(Identifier);
				State = 2340; Match(LPAREN);
				State = 2342;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2341; argumentList();
					}
				}

				State = 2344; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2346; Match(SUPER);
				State = 2347; Match(DOT);
				State = 2349;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2348; typeArguments();
					}
				}

				State = 2351; Match(Identifier);
				State = 2352; Match(LPAREN);
				State = 2354;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2353; argumentList();
					}
				}

				State = 2356; Match(RPAREN);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2357; typeName();
				State = 2358; Match(DOT);
				State = 2359; Match(SUPER);
				State = 2360; Match(DOT);
				State = 2362;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2361; typeArguments();
					}
				}

				State = 2364; Match(Identifier);
				State = 2365; Match(LPAREN);
				State = 2367;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2366; argumentList();
					}
				}

				State = 2369; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocation_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lf_primaryContext methodInvocation_lf_primary() {
		MethodInvocation_lf_primaryContext _localctx = new MethodInvocation_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 394, RULE_methodInvocation_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373; Match(DOT);
			State = 2375;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2374; typeArguments();
				}
			}

			State = 2377; Match(Identifier);
			State = 2378; Match(LPAREN);
			State = 2380;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
				{
				State = 2379; argumentList();
				}
			}

			State = 2382; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocation_lfno_primaryContext : ParserRuleContext {
		public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public MethodInvocation_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodInvocation_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodInvocation_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodInvocation_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocation_lfno_primaryContext methodInvocation_lfno_primary() {
		MethodInvocation_lfno_primaryContext _localctx = new MethodInvocation_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 396, RULE_methodInvocation_lfno_primary);
		int _la;
		try {
			State = 2440;
			switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2384; methodName();
				State = 2385; Match(LPAREN);
				State = 2387;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2386; argumentList();
					}
				}

				State = 2389; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2391; typeName();
				State = 2392; Match(DOT);
				State = 2394;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2393; typeArguments();
					}
				}

				State = 2396; Match(Identifier);
				State = 2397; Match(LPAREN);
				State = 2399;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2398; argumentList();
					}
				}

				State = 2401; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2403; expressionName();
				State = 2404; Match(DOT);
				State = 2406;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2405; typeArguments();
					}
				}

				State = 2408; Match(Identifier);
				State = 2409; Match(LPAREN);
				State = 2411;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2410; argumentList();
					}
				}

				State = 2413; Match(RPAREN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2415; Match(SUPER);
				State = 2416; Match(DOT);
				State = 2418;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2417; typeArguments();
					}
				}

				State = 2420; Match(Identifier);
				State = 2421; Match(LPAREN);
				State = 2423;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2422; argumentList();
					}
				}

				State = 2425; Match(RPAREN);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2426; typeName();
				State = 2427; Match(DOT);
				State = 2428; Match(SUPER);
				State = 2429; Match(DOT);
				State = 2431;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2430; typeArguments();
					}
				}

				State = 2433; Match(Identifier);
				State = 2434; Match(LPAREN);
				State = 2436;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << IntegerLiteral) | (1L << FloatingPointLiteral) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << StringLiteral) | (1L << NullLiteral) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (BANG - 69)) | (1L << (TILDE - 69)) | (1L << (INC - 69)) | (1L << (DEC - 69)) | (1L << (ADD - 69)) | (1L << (SUB - 69)) | (1L << (Identifier - 69)) | (1L << (AT - 69)))) != 0)) {
					{
					State = 2435; argumentList();
					}
				}

				State = 2438; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 398, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442; expression();
			State = 2447;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2443; Match(COMMA);
				State = 2444; expression();
				}
				}
				State = 2449;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReferenceContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReferenceContext methodReference() {
		MethodReferenceContext _localctx = new MethodReferenceContext(_ctx, State);
		EnterRule(_localctx, 400, RULE_methodReference);
		int _la;
		try {
			State = 2497;
			switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2450; expressionName();
				State = 2451; Match(COLONCOLON);
				State = 2453;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2452; typeArguments();
					}
				}

				State = 2455; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2457; referenceType();
				State = 2458; Match(COLONCOLON);
				State = 2460;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2459; typeArguments();
					}
				}

				State = 2462; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2464; primary();
				State = 2465; Match(COLONCOLON);
				State = 2467;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2466; typeArguments();
					}
				}

				State = 2469; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2471; Match(SUPER);
				State = 2472; Match(COLONCOLON);
				State = 2474;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2473; typeArguments();
					}
				}

				State = 2476; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2477; typeName();
				State = 2478; Match(DOT);
				State = 2479; Match(SUPER);
				State = 2480; Match(COLONCOLON);
				State = 2482;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2481; typeArguments();
					}
				}

				State = 2484; Match(Identifier);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2486; classType();
				State = 2487; Match(COLONCOLON);
				State = 2489;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2488; typeArguments();
					}
				}

				State = 2491; Match(NEW);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2493; arrayType();
				State = 2494; Match(COLONCOLON);
				State = 2495; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lf_primaryContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodReference_lf_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lf_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lf_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lf_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lf_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lf_primaryContext methodReference_lf_primary() {
		MethodReference_lf_primaryContext _localctx = new MethodReference_lf_primaryContext(_ctx, State);
		EnterRule(_localctx, 402, RULE_methodReference_lf_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499; Match(COLONCOLON);
			State = 2501;
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 2500; typeArguments();
				}
			}

			State = 2503; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodReference_lfno_primaryContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public MethodReference_lfno_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodReference_lfno_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMethodReference_lfno_primary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMethodReference_lfno_primary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodReference_lfno_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodReference_lfno_primaryContext methodReference_lfno_primary() {
		MethodReference_lfno_primaryContext _localctx = new MethodReference_lfno_primaryContext(_ctx, State);
		EnterRule(_localctx, 404, RULE_methodReference_lfno_primary);
		int _la;
		try {
			State = 2545;
			switch ( Interpreter.AdaptivePredict(_input,287,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2505; expressionName();
				State = 2506; Match(COLONCOLON);
				State = 2508;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2507; typeArguments();
					}
				}

				State = 2510; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2512; referenceType();
				State = 2513; Match(COLONCOLON);
				State = 2515;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2514; typeArguments();
					}
				}

				State = 2517; Match(Identifier);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2519; Match(SUPER);
				State = 2520; Match(COLONCOLON);
				State = 2522;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2521; typeArguments();
					}
				}

				State = 2524; Match(Identifier);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2525; typeName();
				State = 2526; Match(DOT);
				State = 2527; Match(SUPER);
				State = 2528; Match(COLONCOLON);
				State = 2530;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2529; typeArguments();
					}
				}

				State = 2532; Match(Identifier);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2534; classType();
				State = 2535; Match(COLONCOLON);
				State = 2537;
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2536; typeArguments();
					}
				}

				State = 2539; Match(NEW);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2541; arrayType();
				State = 2542; Match(COLONCOLON);
				State = 2543; Match(NEW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreationExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public DimExprsContext dimExprs() {
			return GetRuleContext<DimExprsContext>(0);
		}
		public DimsContext dims() {
			return GetRuleContext<DimsContext>(0);
		}
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ArrayCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreationExpressionContext arrayCreationExpression() {
		ArrayCreationExpressionContext _localctx = new ArrayCreationExpressionContext(_ctx, State);
		EnterRule(_localctx, 406, RULE_arrayCreationExpression);
		try {
			State = 2569;
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2547; Match(NEW);
				State = 2548; primitiveType();
				State = 2549; dimExprs();
				State = 2551;
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 2550; dims();
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2553; Match(NEW);
				State = 2554; classOrInterfaceType();
				State = 2555; dimExprs();
				State = 2557;
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 2556; dims();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2559; Match(NEW);
				State = 2560; primitiveType();
				State = 2561; dims();
				State = 2562; arrayInitializer();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2564; Match(NEW);
				State = 2565; classOrInterfaceType();
				State = 2566; dims();
				State = 2567; arrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprsContext : ParserRuleContext {
		public DimExprContext[] dimExpr() {
			return GetRuleContexts<DimExprContext>();
		}
		public DimExprContext dimExpr(int i) {
			return GetRuleContext<DimExprContext>(i);
		}
		public DimExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExprs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExprs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExprs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprsContext dimExprs() {
		DimExprsContext _localctx = new DimExprsContext(_ctx, State);
		EnterRule(_localctx, 408, RULE_dimExprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2571; dimExpr();
			State = 2575;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2572; dimExpr();
					}
					} 
				}
				State = 2577;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,291,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimExprContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public DimExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterDimExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitDimExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimExprContext dimExpr() {
		DimExprContext _localctx = new DimExprContext(_ctx, State);
		EnterRule(_localctx, 410, RULE_dimExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2581;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AT) {
				{
				{
				State = 2578; annotation();
				}
				}
				State = 2583;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2584; Match(LBRACK);
			State = 2585; expression();
			State = 2586; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(_ctx, State);
		EnterRule(_localctx, 412, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2588; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 414, RULE_expression);
		try {
			State = 2592;
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2590; lambdaExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2591; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(_ctx, State);
		EnterRule(_localctx, 416, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2594; lambdaParameters();
			State = 2595; Match(ARROW);
			State = 2596; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(Java8Parser.Identifier, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public InferredFormalParameterListContext inferredFormalParameterList() {
			return GetRuleContext<InferredFormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(_ctx, State);
		EnterRule(_localctx, 418, RULE_lambdaParameters);
		int _la;
		try {
			State = 2608;
			switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2598; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2599; Match(LPAREN);
				State = 2601;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==Identifier || _la==AT) {
					{
					State = 2600; formalParameterList();
					}
				}

				State = 2603; Match(RPAREN);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2604; Match(LPAREN);
				State = 2605; inferredFormalParameterList();
				State = 2606; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredFormalParameterListContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(Java8Parser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(Java8Parser.Identifier, i);
		}
		public InferredFormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredFormalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInferredFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInferredFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInferredFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InferredFormalParameterListContext inferredFormalParameterList() {
		InferredFormalParameterListContext _localctx = new InferredFormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 420, RULE_inferredFormalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610; Match(Identifier);
			State = 2615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2611; Match(COMMA);
				State = 2612; Match(Identifier);
				}
				}
				State = 2617;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(_ctx, State);
		EnterRule(_localctx, 422, RULE_lambdaBody);
		try {
			State = 2620;
			switch (_input.La(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2618; expression();
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2619; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 424, RULE_assignmentExpression);
		try {
			State = 2624;
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2622; conditionalExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2623; assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public LeftHandSideContext leftHandSide() {
			return GetRuleContext<LeftHandSideContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 426, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2626; leftHandSide();
			State = 2627; assignmentOperator();
			State = 2628; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftHandSideContext : ParserRuleContext {
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftHandSideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftHandSide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLeftHandSide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLeftHandSide(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftHandSide(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftHandSideContext leftHandSide() {
		LeftHandSideContext _localctx = new LeftHandSideContext(_ctx, State);
		EnterRule(_localctx, 428, RULE_leftHandSide);
		try {
			State = 2633;
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2630; expressionName();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2631; fieldAccess();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2632; arrayAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(_ctx, State);
		EnterRule(_localctx, 430, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2635;
			_la = _input.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ASSIGN - 66)) | (1L << (ADD_ASSIGN - 66)) | (1L << (SUB_ASSIGN - 66)) | (1L << (MUL_ASSIGN - 66)) | (1L << (DIV_ASSIGN - 66)) | (1L << (AND_ASSIGN - 66)) | (1L << (OR_ASSIGN - 66)) | (1L << (XOR_ASSIGN - 66)) | (1L << (MOD_ASSIGN - 66)) | (1L << (LSHIFT_ASSIGN - 66)) | (1L << (RSHIFT_ASSIGN - 66)) | (1L << (URSHIFT_ASSIGN - 66)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(_ctx, State);
		EnterRule(_localctx, 432, RULE_conditionalExpression);
		try {
			State = 2644;
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2637; conditionalOrExpression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2638; conditionalOrExpression(0);
				State = 2639; Match(QUESTION);
				State = 2640; expression();
				State = 2641; Match(COLON);
				State = 2642; conditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext conditionalOrExpression() {
		return conditionalOrExpression(0);
	}

	private ConditionalOrExpressionContext conditionalOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(_ctx, _parentState);
		ConditionalOrExpressionContext _prevctx = _localctx;
		int _startState = 434;
		EnterRecursionRule(_localctx, 434, RULE_conditionalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2647; conditionalAndExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2654;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpression);
					State = 2649;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2650; Match(OR);
					State = 2651; conditionalAndExpression(0);
					}
					} 
				}
				State = 2656;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ConditionalAndExpressionContext conditionalAndExpression() {
			return GetRuleContext<ConditionalAndExpressionContext>(0);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext conditionalAndExpression() {
		return conditionalAndExpression(0);
	}

	private ConditionalAndExpressionContext conditionalAndExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(_ctx, _parentState);
		ConditionalAndExpressionContext _prevctx = _localctx;
		int _startState = 436;
		EnterRecursionRule(_localctx, 436, RULE_conditionalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2658; inclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2665;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpression);
					State = 2660;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2661; Match(AND);
					State = 2662; inclusiveOrExpression(0);
					}
					} 
				}
				State = 2667;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,302,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(_ctx, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 438;
		EnterRecursionRule(_localctx, 438, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2669; exclusiveOrExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2676;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 2671;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2672; Match(BITOR);
					State = 2673; exclusiveOrExpression(0);
					}
					} 
				}
				State = 2678;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(_ctx, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 440;
		EnterRecursionRule(_localctx, 440, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2680; andExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2687;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 2682;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2683; Match(CARET);
					State = 2684; andExpression(0);
					}
					} 
				}
				State = 2689;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,304,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 442;
		EnterRecursionRule(_localctx, 442, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2691; equalityExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2698;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 2693;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 2694; Match(BITAND);
					State = 2695; equalityExpression(0);
					}
					} 
				}
				State = 2700;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 444;
		EnterRecursionRule(_localctx, 444, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2702; relationalExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2712;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2710;
					switch ( Interpreter.AdaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2704;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2705; Match(EQUAL);
						State = 2706; relationalExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 2707;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2708; Match(NOTEQUAL);
						State = 2709; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 2714;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,307,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 446;
		EnterRecursionRule(_localctx, 446, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2716; shiftExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2727;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2725;
					switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2718;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2719; compareOperator();
						State = 2720; shiftExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 2722;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2723; Match(INSTANCEOF);
						State = 2724; referenceType();
						}
						break;
					}
					} 
				}
				State = 2729;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,309,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LesserThanOperatorContext : ParserRuleContext {
		public LesserThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lesserThanOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterLesserThanOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitLesserThanOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesserThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LesserThanOperatorContext lesserThanOperator() {
		LesserThanOperatorContext _localctx = new LesserThanOperatorContext(_ctx, State);
		EnterRule(_localctx, 448, RULE_lesserThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2730; Match(LT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreaterThanOperatorContext : ParserRuleContext {
		public GreaterThanOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greaterThanOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterGreaterThanOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitGreaterThanOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreaterThanOperatorContext greaterThanOperator() {
		GreaterThanOperatorContext _localctx = new GreaterThanOperatorContext(_ctx, State);
		EnterRule(_localctx, 450, RULE_greaterThanOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2732; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		public LesserThanOperatorContext lesserThanOperator() {
			return GetRuleContext<LesserThanOperatorContext>(0);
		}
		public GreaterThanOperatorContext greaterThanOperator() {
			return GetRuleContext<GreaterThanOperatorContext>(0);
		}
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(_ctx, State);
		EnterRule(_localctx, 452, RULE_compareOperator);
		try {
			State = 2738;
			switch (_input.La(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2734; lesserThanOperator();
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2735; greaterThanOperator();
				}
				break;
			case LE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2736; Match(LE);
				}
				break;
			case GE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2737; Match(GE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(_ctx, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 454;
		EnterRecursionRule(_localctx, 454, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2741; additiveExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2758;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,312,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2756;
					switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2743;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2744; Match(LT);
						State = 2745; Match(LT);
						State = 2746; additiveExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2747;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2748; Match(GT);
						State = 2749; Match(GT);
						State = 2750; additiveExpression(0);
						}
						break;

					case 3:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 2751;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2752; Match(GT);
						State = 2753; Match(GT);
						State = 2754; Match(GT);
						State = 2755; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 2760;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,312,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 456;
		EnterRecursionRule(_localctx, 456, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2762; multiplicativeExpression(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2772;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2770;
					switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2764;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2765; Match(ADD);
						State = 2766; multiplicativeExpression(0);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 2767;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2768; Match(SUB);
						State = 2769; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 2774;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 458;
		EnterRecursionRule(_localctx, 458, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2776; unaryExpression();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2789;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2787;
					switch ( Interpreter.AdaptivePredict(_input,315,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2778;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2779; Match(MUL);
						State = 2780; unaryExpression();
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2781;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2782; Match(DIV);
						State = 2783; unaryExpression();
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 2784;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 2785; Match(MOD);
						State = 2786; unaryExpression();
						}
						break;
					}
					} 
				}
				State = 2791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PreIncrementExpressionContext preIncrementExpression() {
			return GetRuleContext<PreIncrementExpressionContext>(0);
		}
		public PreDecrementExpressionContext preDecrementExpression() {
			return GetRuleContext<PreDecrementExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 460, RULE_unaryExpression);
		try {
			State = 2799;
			switch (_input.La(1)) {
			case INC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2792; preIncrementExpression();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2793; preDecrementExpression();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2794; Match(ADD);
				State = 2795; unaryExpression();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2796; Match(SUB);
				State = 2797; unaryExpression();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case IntegerLiteral:
			case FloatingPointLiteral:
			case BooleanLiteral:
			case CharacterLiteral:
			case StringLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case Identifier:
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2798; unaryExpressionNotPlusMinus();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreIncrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreIncrementExpressionContext preIncrementExpression() {
		PreIncrementExpressionContext _localctx = new PreIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 462, RULE_preIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; Match(INC);
			State = 2802; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreDecrementExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreDecrementExpressionContext preDecrementExpression() {
		PreDecrementExpressionContext _localctx = new PreDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 464, RULE_preDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2804; Match(DEC);
			State = 2805; unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionNotPlusMinusContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpressionNotPlusMinus; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterUnaryExpressionNotPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitUnaryExpressionNotPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionNotPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
		UnaryExpressionNotPlusMinusContext _localctx = new UnaryExpressionNotPlusMinusContext(_ctx, State);
		EnterRule(_localctx, 466, RULE_unaryExpressionNotPlusMinus);
		try {
			State = 2813;
			switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2807; postfixExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2808; Match(TILDE);
				State = 2809; unaryExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2810; Match(BANG);
				State = 2811; unaryExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2812; castExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ExpressionNameContext expressionName() {
			return GetRuleContext<ExpressionNameContext>(0);
		}
		public PostIncrementExpression_lf_postfixExpressionContext[] postIncrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostIncrementExpression_lf_postfixExpressionContext>();
		}
		public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostIncrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostDecrementExpression_lf_postfixExpressionContext[] postDecrementExpression_lf_postfixExpression() {
			return GetRuleContexts<PostDecrementExpression_lf_postfixExpressionContext>();
		}
		public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression(int i) {
			return GetRuleContext<PostDecrementExpression_lf_postfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 468, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2817;
			switch ( Interpreter.AdaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				State = 2815; primary();
				}
				break;

			case 2:
				{
				State = 2816; expressionName();
				}
				break;
			}
			State = 2823;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,321,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2821;
					switch (_input.La(1)) {
					case INC:
						{
						State = 2819; postIncrementExpression_lf_postfixExpression();
						}
						break;
					case DEC:
						{
						State = 2820; postDecrementExpression_lf_postfixExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2825;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,321,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostIncrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpressionContext postIncrementExpression() {
		PostIncrementExpressionContext _localctx = new PostIncrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 470, RULE_postIncrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2826; postfixExpression();
			State = 2827; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostIncrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postIncrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostIncrementExpression_lf_postfixExpressionContext postIncrementExpression_lf_postfixExpression() {
		PostIncrementExpression_lf_postfixExpressionContext _localctx = new PostIncrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 472, RULE_postIncrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2829; Match(INC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public PostDecrementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpressionContext postDecrementExpression() {
		PostDecrementExpressionContext _localctx = new PostDecrementExpressionContext(_ctx, State);
		EnterRule(_localctx, 474, RULE_postDecrementExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831; postfixExpression();
			State = 2832; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostDecrementExpression_lf_postfixExpressionContext : ParserRuleContext {
		public PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postDecrementExpression_lf_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterPostDecrementExpression_lf_postfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitPostDecrementExpression_lf_postfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression_lf_postfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostDecrementExpression_lf_postfixExpressionContext postDecrementExpression_lf_postfixExpression() {
		PostDecrementExpression_lf_postfixExpressionContext _localctx = new PostDecrementExpression_lf_postfixExpressionContext(_ctx, State);
		EnterRule(_localctx, 476, RULE_postDecrementExpression_lf_postfixExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2834; Match(DEC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ReferenceTypeContext referenceType() {
			return GetRuleContext<ReferenceTypeContext>(0);
		}
		public UnaryExpressionNotPlusMinusContext unaryExpressionNotPlusMinus() {
			return GetRuleContext<UnaryExpressionNotPlusMinusContext>(0);
		}
		public AdditionalBoundContext[] additionalBound() {
			return GetRuleContexts<AdditionalBoundContext>();
		}
		public AdditionalBoundContext additionalBound(int i) {
			return GetRuleContext<AdditionalBoundContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJava8Listener typedListener = listener as IJava8Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJava8Visitor<TResult> typedVisitor = visitor as IJava8Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(_ctx, State);
		EnterRule(_localctx, 478, RULE_castExpression);
		int _la;
		try {
			State = 2863;
			switch ( Interpreter.AdaptivePredict(_input,324,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2836; Match(LPAREN);
				State = 2837; primitiveType();
				State = 2838; Match(RPAREN);
				State = 2839; unaryExpression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2841; Match(LPAREN);
				State = 2842; referenceType();
				State = 2846;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 2843; additionalBound();
					}
					}
					State = 2848;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2849; Match(RPAREN);
				State = 2850; unaryExpressionNotPlusMinus();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2852; Match(LPAREN);
				State = 2853; referenceType();
				State = 2857;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BITAND) {
					{
					{
					State = 2854; additionalBound();
					}
					}
					State = 2859;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2860; Match(RPAREN);
				State = 2861; lambdaExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26: return packageName_sempred((PackageNameContext)_localctx, predIndex);

		case 28: return packageOrTypeName_sempred((PackageOrTypeNameContext)_localctx, predIndex);

		case 31: return ambiguousName_sempred((AmbiguousNameContext)_localctx, predIndex);

		case 217: return conditionalOrExpression_sempred((ConditionalOrExpressionContext)_localctx, predIndex);

		case 218: return conditionalAndExpression_sempred((ConditionalAndExpressionContext)_localctx, predIndex);

		case 219: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);

		case 220: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);

		case 221: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 222: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 223: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);

		case 227: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);

		case 228: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 229: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool packageName_sempred(PackageNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool packageOrTypeName_sempred(PackageOrTypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool ambiguousName_sempred(AmbiguousNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalOrExpression_sempred(ConditionalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool conditionalAndExpression_sempred(ConditionalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(_ctx, 2);

		case 9: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(_ctx, 3);

		case 13: return Precpred(_ctx, 2);

		case 14: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(_ctx, 2);

		case 16: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(_ctx, 3);

		case 18: return Precpred(_ctx, 2);

		case 19: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3m\xB34\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x1E7\n\x3\x3\x4\a\x4"+
		"\x1EA\n\x4\f\x4\xE\x4\x1ED\v\x4\x3\x4\x3\x4\a\x4\x1F1\n\x4\f\x4\xE\x4"+
		"\x1F4\v\x4\x3\x4\x5\x4\x1F7\n\x4\x3\x5\x3\x5\x5\x5\x1FB\n\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\x204\n\b\x3\t\x3\t\x5\t\x208\n\t\x3"+
		"\t\x3\t\a\t\x20C\n\t\f\t\xE\t\x20F\v\t\x3\n\a\n\x212\n\n\f\n\xE\n\x215"+
		"\v\n\x3\n\x3\n\x5\n\x219\n\n\x3\n\x3\n\x3\n\a\n\x21E\n\n\f\n\xE\n\x221"+
		"\v\n\x3\n\x3\n\x5\n\x225\n\n\x5\n\x227\n\n\x3\v\x3\v\a\v\x22B\n\v\f\v"+
		"\xE\v\x22E\v\v\x3\v\x3\v\x5\v\x232\n\v\x3\f\a\f\x235\n\f\f\f\xE\f\x238"+
		"\v\f\x3\f\x3\f\x5\f\x23C\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10"+
		"\a\x10\x245\n\x10\f\x10\xE\x10\x248\v\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x255\n\x11\x3"+
		"\x12\a\x12\x258\n\x12\f\x12\xE\x12\x25B\v\x12\x3\x12\x3\x12\x3\x12\a\x12"+
		"\x260\n\x12\f\x12\xE\x12\x263\v\x12\x3\x12\x3\x12\a\x12\x267\n\x12\f\x12"+
		"\xE\x12\x26A\v\x12\x3\x13\a\x13\x26D\n\x13\f\x13\xE\x13\x270\v\x13\x3"+
		"\x13\x3\x13\x5\x13\x274\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\a\x15\x27D\n\x15\f\x15\xE\x15\x280\v\x15\x5\x15\x282\n\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\a"+
		"\x18\x28E\n\x18\f\x18\xE\x18\x291\v\x18\x3\x19\x3\x19\x5\x19\x295\n\x19"+
		"\x3\x1A\a\x1A\x298\n\x1A\f\x1A\xE\x1A\x29B\v\x1A\x3\x1A\x3\x1A\x5\x1A"+
		"\x29F\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2A5\n\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x2AD\n\x1C\f\x1C\xE\x1C\x2B0\v\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x2B7\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x2BF\n\x1E\f\x1E\xE\x1E\x2C2\v\x1E\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x2C9\n\x1F\x3 \x3 \x3!\x3!\x3"+
		"!\x3!\x3!\x3!\a!\x2D3\n!\f!\xE!\x2D6\v!\x3\"\x5\"\x2D9\n\"\x3\"\a\"\x2DC"+
		"\n\"\f\"\xE\"\x2DF\v\"\x3\"\a\"\x2E2\n\"\f\"\xE\"\x2E5\v\"\x3\"\x3\"\x3"+
		"#\a#\x2EA\n#\f#\xE#\x2ED\v#\x3#\x3#\x3#\x3#\a#\x2F3\n#\f#\xE#\x2F6\v#"+
		"\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x5%\x300\n%\x3&\x3&\x3&\x3&\x3\'\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3"+
		")\x3)\x3*\x3*\x3*\x5*\x31D\n*\x3+\x3+\x5+\x321\n+\x3,\a,\x324\n,\f,\xE"+
		",\x327\v,\x3,\x3,\x3,\x5,\x32C\n,\x3,\x5,\x32F\n,\x3,\x5,\x332\n,\x3,"+
		"\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x33E\n-\x3.\x3.\x3.\x3.\x3/\x3"+
		"/\x3/\a/\x347\n/\f/\xE/\x34A\v/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x31\x3\x32\x3\x32\x3\x32\a\x32\x355\n\x32\f\x32\xE\x32\x358\v\x32\x3"+
		"\x33\x3\x33\a\x33\x35C\n\x33\f\x33\xE\x33\x35F\v\x33\x3\x33\x3\x33\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x5\x34\x367\n\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x36E\n\x35\x3\x36\a\x36\x371\n\x36\f\x36\xE\x36\x374\v"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x5\x37\x382\n\x37\x3\x38\x3\x38\x3\x38\a\x38\x387\n"+
		"\x38\f\x38\xE\x38\x38A\v\x38\x3\x39\x3\x39\x3\x39\x5\x39\x38F\n\x39\x3"+
		":\x3:\x5:\x393\n:\x3;\x3;\x5;\x397\n;\x3<\x3<\x5<\x39B\n<\x3=\x3=\x5="+
		"\x39F\n=\x3>\x3>\x3>\x5>\x3A4\n>\x3?\x3?\x5?\x3A8\n?\x3?\x3?\a?\x3AC\n"+
		"?\f?\xE?\x3AF\v?\x3@\x3@\x5@\x3B3\n@\x3@\x3@\x3@\a@\x3B8\n@\f@\xE@\x3BB"+
		"\v@\x3@\x3@\x5@\x3BF\n@\x5@\x3C1\n@\x3\x41\x3\x41\a\x41\x3C5\n\x41\f\x41"+
		"\xE\x41\x3C8\v\x41\x3\x41\x3\x41\x5\x41\x3CC\n\x41\x3\x42\x3\x42\x5\x42"+
		"\x3D0\n\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3"+
		"G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x3E3\nG\x3H\aH\x3E6\nH\fH\xEH\x3E9"+
		"\vH\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x5I\x3F8\nI\x3"+
		"J\x3J\x3J\x5J\x3FD\nJ\x3J\x3J\aJ\x401\nJ\fJ\xEJ\x404\vJ\x3J\x3J\x3J\x5"+
		"J\x409\nJ\x5J\x40B\nJ\x3K\x3K\x5K\x40F\nK\x3L\x3L\x3L\x5L\x414\nL\x3L"+
		"\x3L\x5L\x418\nL\x3M\x3M\x3M\x3M\x3M\x5M\x41F\nM\x3N\x3N\x3N\aN\x424\n"+
		"N\fN\xEN\x427\vN\x3N\x3N\x3N\aN\x42C\nN\fN\xEN\x42F\vN\x5N\x431\nN\x3"+
		"O\aO\x434\nO\fO\xEO\x437\vO\x3O\x3O\x3O\x3P\x3P\x5P\x43E\nP\x3Q\aQ\x441"+
		"\nQ\fQ\xEQ\x444\vQ\x3Q\x3Q\aQ\x448\nQ\fQ\xEQ\x44B\vQ\x3Q\x3Q\x3Q\x3Q\x5"+
		"Q\x451\nQ\x3R\aR\x454\nR\fR\xER\x457\vR\x3R\x3R\x3R\x5R\x45C\nR\x3R\x3"+
		"R\x3S\x3S\x3S\x3T\x3T\x3T\aT\x466\nT\fT\xET\x469\vT\x3U\x3U\x5U\x46D\n"+
		"U\x3V\x3V\x5V\x471\nV\x3W\x3W\x3X\x3X\x3X\x3Y\aY\x479\nY\fY\xEY\x47C\v"+
		"Y\x3Y\x3Y\x5Y\x480\nY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x488\nZ\x3[\x5[\x48B"+
		"\n[\x3[\x3[\x3[\x5[\x490\n[\x3[\x3[\x3\\\x3\\\x3]\x3]\x5]\x498\n]\x3]"+
		"\x5]\x49B\n]\x3]\x3]\x3^\x5^\x4A0\n^\x3^\x3^\x3^\x5^\x4A5\n^\x3^\x3^\x3"+
		"^\x5^\x4AA\n^\x3^\x3^\x3^\x5^\x4AF\n^\x3^\x3^\x3^\x3^\x3^\x5^\x4B6\n^"+
		"\x3^\x3^\x3^\x5^\x4BB\n^\x3^\x3^\x3^\x3^\x3^\x3^\x5^\x4C3\n^\x3^\x3^\x3"+
		"^\x5^\x4C8\n^\x3^\x3^\x3^\x5^\x4CD\n^\x3_\a_\x4D0\n_\f_\xE_\x4D3\v_\x3"+
		"_\x3_\x3_\x5_\x4D8\n_\x3_\x3_\x3`\x3`\x5`\x4DE\n`\x3`\x5`\x4E1\n`\x3`"+
		"\x5`\x4E4\n`\x3`\x3`\x3\x61\x3\x61\x3\x61\a\x61\x4EB\n\x61\f\x61\xE\x61"+
		"\x4EE\v\x61\x3\x62\a\x62\x4F1\n\x62\f\x62\xE\x62\x4F4\v\x62\x3\x62\x3"+
		"\x62\x3\x62\x5\x62\x4F9\n\x62\x3\x62\x5\x62\x4FC\n\x62\x3\x62\x5\x62\x4FF"+
		"\n\x62\x3\x63\x3\x63\x3\x64\x3\x64\a\x64\x505\n\x64\f\x64\xE\x64\x508"+
		"\v\x64\x3\x65\x3\x65\x5\x65\x50C\n\x65\x3\x66\a\x66\x50F\n\x66\f\x66\xE"+
		"\x66\x512\v\x66\x3\x66\x3\x66\x3\x66\x5\x66\x517\n\x66\x3\x66\x5\x66\x51A"+
		"\n\x66\x3\x66\x3\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x5g\x525\ng\x3h\x3h\x3"+
		"h\x3i\x3i\ai\x52C\ni\fi\xEi\x52F\vi\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x5j\x538"+
		"\nj\x3k\ak\x53B\nk\fk\xEk\x53E\vk\x3k\x3k\x3k\x3k\x3l\x3l\x3l\x3l\x5l"+
		"\x548\nl\x3m\am\x54B\nm\fm\xEm\x54E\vm\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3"+
		"n\x3n\x5n\x559\nn\x3o\ao\x55C\no\fo\xEo\x55F\vo\x3o\x3o\x3o\x3o\x3o\x3"+
		"p\x3p\ap\x568\np\fp\xEp\x56B\vp\x3p\x3p\x3q\x3q\x3q\x3q\x3q\x5q\x574\n"+
		"q\x3r\ar\x577\nr\fr\xEr\x57A\vr\x3r\x3r\x3r\x3r\x3r\x5r\x581\nr\x3r\x5"+
		"r\x584\nr\x3r\x3r\x3s\x3s\x3s\x5s\x58B\ns\x3t\x3t\x3t\x3u\x3u\x3u\x5u"+
		"\x593\nu\x3v\x3v\x3v\x3v\x5v\x599\nv\x3v\x3v\x3w\x3w\x3w\aw\x5A0\nw\f"+
		"w\xEw\x5A3\vw\x3x\x3x\x3x\x3x\x3y\x3y\x3y\x5y\x5AC\ny\x3z\x3z\x5z\x5B0"+
		"\nz\x3z\x5z\x5B3\nz\x3z\x3z\x3{\x3{\x3{\a{\x5BA\n{\f{\xE{\x5BD\v{\x3|"+
		"\x3|\x3|\x3}\x3}\x3}\x3}\x3}\x3}\x3~\x3~\x5~\x5CA\n~\x3~\x5~\x5CD\n~\x3"+
		"~\x3~\x3\x7F\x3\x7F\x3\x7F\a\x7F\x5D4\n\x7F\f\x7F\xE\x7F\x5D7\v\x7F\x3"+
		"\x80\x3\x80\x5\x80\x5DB\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\a\x81\x5E1\n"+
		"\x81\f\x81\xE\x81\x5E4\v\x81\x3\x82\x3\x82\x3\x82\x5\x82\x5E9\n\x82\x3"+
		"\x83\x3\x83\x3\x83\x3\x84\a\x84\x5EF\n\x84\f\x84\xE\x84\x5F2\v\x84\x3"+
		"\x84\x3\x84\x3\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x5\x85\x5FD"+
		"\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86\x604\n\x86\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3"+
		"\x87\x5\x87\x612\n\x87\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x3\x89\x3\x8A"+
		"\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C"+
		"\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x628\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3"+
		"\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\x64A\n\x90"+
		"\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x91\x3\x92\x3\x92\a\x92\x654\n"+
		"\x92\f\x92\xE\x92\x657\v\x92\x3\x92\a\x92\x65A\n\x92\f\x92\xE\x92\x65D"+
		"\v\x92\x3\x92\x3\x92\x3\x93\x3\x93\x3\x93\x3\x94\x3\x94\a\x94\x666\n\x94"+
		"\f\x94\xE\x94\x669\v\x94\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x5\x95\x675\n\x95\x3\x96\x3\x96\x3\x97\x3\x97"+
		"\x3\x97\x3\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x99\x3\x9A\x3\x9A"+
		"\x5\x9A\x68F\n\x9A\x3\x9B\x3\x9B\x5\x9B\x693\n\x9B\x3\x9C\x3\x9C\x3\x9C"+
		"\x5\x9C\x698\n\x9C\x3\x9C\x3\x9C\x5\x9C\x69C\n\x9C\x3\x9C\x3\x9C\x5\x9C"+
		"\x6A0\n\x9C\x3\x9C\x3\x9C\x3\x9C\x3\x9D\x3\x9D\x3\x9D\x5\x9D\x6A8\n\x9D"+
		"\x3\x9D\x3\x9D\x5\x9D\x6AC\n\x9D\x3\x9D\x3\x9D\x5\x9D\x6B0\n\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9E\x3\x9E\x5\x9E\x6B7\n\x9E\x3\x9F\x3\x9F\x3\xA0\x3"+
		"\xA0\x3\xA0\a\xA0\x6BE\n\xA0\f\xA0\xE\xA0\x6C1\v\xA0\x3\xA1\x3\xA1\x3"+
		"\xA1\a\xA1\x6C6\n\xA1\f\xA1\xE\xA1\x6C9\v\xA1\x3\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\a\xA2\x6D5\n\xA2\f\xA2"+
		"\xE\xA2\x6D8\v\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3\xA2\x3"+
		"\xA3\x3\xA3\x5\xA3\x6E3\n\xA3\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x5\xA4\x6E9"+
		"\n\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x6EF\n\xA5\x3\xA5\x3\xA5\x3"+
		"\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3\xA7\x3"+
		"\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5\xA8\x704\n\xA8\x3\xA8"+
		"\x3\xA8\x3\xA8\x5\xA8\x709\n\xA8\x3\xA9\x3\xA9\a\xA9\x70D\n\xA9\f\xA9"+
		"\xE\xA9\x710\v\xA9\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAB\a"+
		"\xAB\x719\n\xAB\f\xAB\xE\xAB\x71C\v\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3"+
		"\xAC\x3\xAC\a\xAC\x724\n\xAC\f\xAC\xE\xAC\x727\v\xAC\x3\xAD\x3\xAD\x3"+
		"\xAD\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\x730\n\xAE\x3\xAE\x5\xAE\x733"+
		"\n\xAE\x3\xAF\x3\xAF\x3\xAF\x5\xAF\x738\n\xAF\x3\xAF\x3\xAF\x3\xB0\x3"+
		"\xB0\x3\xB0\a\xB0\x73F\n\xB0\f\xB0\xE\xB0\x742\v\xB0\x3\xB1\a\xB1\x745"+
		"\n\xB1\f\xB1\xE\xB1\x748\v\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB2"+
		"\x3\xB2\x5\xB2\x751\n\xB2\x3\xB2\a\xB2\x754\n\xB2\f\xB2\xE\xB2\x757\v"+
		"\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB3\a\xB3\x75D\n\xB3\f\xB3\xE\xB3\x760\v"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x5\xB3\x776\n\xB3\x3\xB4\x3\xB4\x3\xB5\x3\xB5\x3\xB5\x3\xB5\a\xB5"+
		"\x77E\n\xB5\f\xB5\xE\xB5\x781\v\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\x796\n\xB5\x3\xB6\x3\xB6\x3\xB6\x3"+
		"\xB6\x3\xB6\x5\xB6\x79D\n\xB6\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x5\xB8\x7A5\n\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9\x7AB\n\xB9\f\xB9"+
		"\xE\xB9\x7AE\v\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\a\xB9\x7B6"+
		"\n\xB9\f\xB9\xE\xB9\x7B9\v\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x7CF\n\xB9\x3\xBA\x3\xBA\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\a\xBB\x7D7\n\xBB\f\xBB\xE\xBB\x7DA\v\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\a\xBB\x7E2\n\xBB\f\xBB\xE\xBB\x7E5\v"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5"+
		"\xBB\x7FA\n\xBB\x3\xBC\x3\xBC\x5\xBC\x7FE\n\xBC\x3\xBC\a\xBC\x801\n\xBC"+
		"\f\xBC\xE\xBC\x804\v\xBC\x3\xBC\x3\xBC\x3\xBC\a\xBC\x809\n\xBC\f\xBC\xE"+
		"\xBC\x80C\v\xBC\x3\xBC\a\xBC\x80F\n\xBC\f\xBC\xE\xBC\x812\v\xBC\x3\xBC"+
		"\x5\xBC\x815\n\xBC\x3\xBC\x3\xBC\x5\xBC\x819\n\xBC\x3\xBC\x3\xBC\x5\xBC"+
		"\x81D\n\xBC\x3\xBC\x3\xBC\x3\xBC\x3\xBC\x5\xBC\x823\n\xBC\x3\xBC\a\xBC"+
		"\x826\n\xBC\f\xBC\xE\xBC\x829\v\xBC\x3\xBC\x3\xBC\x5\xBC\x82D\n\xBC\x3"+
		"\xBC\x3\xBC\x5\xBC\x831\n\xBC\x3\xBC\x3\xBC\x5\xBC\x835\n\xBC\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x5\xBC\x83B\n\xBC\x3\xBC\a\xBC\x83E\n\xBC\f\xBC\xE"+
		"\xBC\x841\v\xBC\x3\xBC\x3\xBC\x5\xBC\x845\n\xBC\x3\xBC\x3\xBC\x5\xBC\x849"+
		"\n\xBC\x3\xBC\x3\xBC\x5\xBC\x84D\n\xBC\x5\xBC\x84F\n\xBC\x3\xBD\x3\xBD"+
		"\x3\xBD\x5\xBD\x854\n\xBD\x3\xBD\a\xBD\x857\n\xBD\f\xBD\xE\xBD\x85A\v"+
		"\xBD\x3\xBD\x3\xBD\x5\xBD\x85E\n\xBD\x3\xBD\x3\xBD\x5\xBD\x862\n\xBD\x3"+
		"\xBD\x3\xBD\x5\xBD\x866\n\xBD\x3\xBE\x3\xBE\x5\xBE\x86A\n\xBE\x3\xBE\a"+
		"\xBE\x86D\n\xBE\f\xBE\xE\xBE\x870\v\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\x875"+
		"\n\xBE\f\xBE\xE\xBE\x878\v\xBE\x3\xBE\a\xBE\x87B\n\xBE\f\xBE\xE\xBE\x87E"+
		"\v\xBE\x3\xBE\x5\xBE\x881\n\xBE\x3\xBE\x3\xBE\x5\xBE\x885\n\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\x889\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\x88F\n\xBE"+
		"\x3\xBE\a\xBE\x892\n\xBE\f\xBE\xE\xBE\x895\v\xBE\x3\xBE\x3\xBE\x5\xBE"+
		"\x899\n\xBE\x3\xBE\x3\xBE\x5\xBE\x89D\n\xBE\x3\xBE\x3\xBE\x5\xBE\x8A1"+
		"\n\xBE\x5\xBE\x8A3\n\xBE\x3\xBF\x3\xBF\x3\xBF\x5\xBF\x8A8\n\xBF\x3\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0"+
		"\x3\xC0\x3\xC0\x5\xC0\x8B7\n\xC0\x3\xC1\x3\xC1\x3\xC1\x3\xC2\x3\xC2\x3"+
		"\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x5\xC2\x8C5\n\xC2\x3\xC3"+
		"\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x5\xC3"+
		"\x8D1\n\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\x3\xC3\a\xC3\x8D8\n\xC3\f\xC3"+
		"\xE\xC3\x8DB\v\xC3\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3\xC4\x3"+
		"\xC4\x3\xC4\x3\xC4\a\xC4\x8E7\n\xC4\f\xC4\xE\xC4\x8EA\v\xC4\x3\xC5\x3"+
		"\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x8F6"+
		"\n\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\a\xC5\x8FD\n\xC5\f\xC5\xE\xC5"+
		"\x900\v\xC5\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x905\n\xC6\x3\xC6\x3\xC6\x3\xC6"+
		"\x3\xC6\x3\xC6\x5\xC6\x90C\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x911\n\xC6"+
		"\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x918\n\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x5\xC6\x91D\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x924"+
		"\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x929\n\xC6\x3\xC6\x3\xC6\x3\xC6\x3"+
		"\xC6\x3\xC6\x5\xC6\x930\n\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x935\n\xC6\x3"+
		"\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x3\xC6\x5\xC6\x93D\n\xC6\x3\xC6\x3\xC6"+
		"\x3\xC6\x5\xC6\x942\n\xC6\x3\xC6\x3\xC6\x5\xC6\x946\n\xC6\x3\xC7\x3\xC7"+
		"\x5\xC7\x94A\n\xC7\x3\xC7\x3\xC7\x3\xC7\x5\xC7\x94F\n\xC7\x3\xC7\x3\xC7"+
		"\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x956\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x5\xC8\x95D\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x962\n\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x969\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8"+
		"\x96E\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x975\n\xC8\x3\xC8"+
		"\x3\xC8\x3\xC8\x5\xC8\x97A\n\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x5\xC8\x982\n\xC8\x3\xC8\x3\xC8\x3\xC8\x5\xC8\x987\n\xC8\x3\xC8\x3"+
		"\xC8\x5\xC8\x98B\n\xC8\x3\xC9\x3\xC9\x3\xC9\a\xC9\x990\n\xC9\f\xC9\xE"+
		"\xC9\x993\v\xC9\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x998\n\xCA\x3\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x3\xCA\x5\xCA\x99F\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x5\xCA\x9A6\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9AD\n\xCA"+
		"\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9B5\n\xCA\x3\xCA\x3"+
		"\xCA\x3\xCA\x3\xCA\x3\xCA\x5\xCA\x9BC\n\xCA\x3\xCA\x3\xCA\x3\xCA\x3\xCA"+
		"\x3\xCA\x3\xCA\x5\xCA\x9C4\n\xCA\x3\xCB\x3\xCB\x5\xCB\x9C8\n\xCB\x3\xCB"+
		"\x3\xCB\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9CF\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x5\xCC\x9D6\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC"+
		"\x9DD\n\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9E5\n\xCC"+
		"\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9EC\n\xCC\x3\xCC\x3\xCC\x3"+
		"\xCC\x3\xCC\x3\xCC\x3\xCC\x5\xCC\x9F4\n\xCC\x3\xCD\x3\xCD\x3\xCD\x3\xCD"+
		"\x5\xCD\x9FA\n\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD\xA00\n\xCD\x3\xCD"+
		"\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x3\xCD\x5\xCD"+
		"\xA0C\n\xCD\x3\xCE\x3\xCE\a\xCE\xA10\n\xCE\f\xCE\xE\xCE\xA13\v\xCE\x3"+
		"\xCF\a\xCF\xA16\n\xCF\f\xCF\xE\xCF\xA19\v\xCF\x3\xCF\x3\xCF\x3\xCF\x3"+
		"\xCF\x3\xD0\x3\xD0\x3\xD1\x3\xD1\x5\xD1\xA23\n\xD1\x3\xD2\x3\xD2\x3\xD2"+
		"\x3\xD2\x3\xD3\x3\xD3\x3\xD3\x5\xD3\xA2C\n\xD3\x3\xD3\x3\xD3\x3\xD3\x3"+
		"\xD3\x3\xD3\x5\xD3\xA33\n\xD3\x3\xD4\x3\xD4\x3\xD4\a\xD4\xA38\n\xD4\f"+
		"\xD4\xE\xD4\xA3B\v\xD4\x3\xD5\x3\xD5\x5\xD5\xA3F\n\xD5\x3\xD6\x3\xD6\x5"+
		"\xD6\xA43\n\xD6\x3\xD7\x3\xD7\x3\xD7\x3\xD7\x3\xD8\x3\xD8\x3\xD8\x5\xD8"+
		"\xA4C\n\xD8\x3\xD9\x3\xD9\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3\xDA\x3"+
		"\xDA\x5\xDA\xA57\n\xDA\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\a\xDB"+
		"\xA5F\n\xDB\f\xDB\xE\xDB\xA62\v\xDB\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC"+
		"\x3\xDC\a\xDC\xA6A\n\xDC\f\xDC\xE\xDC\xA6D\v\xDC\x3\xDD\x3\xDD\x3\xDD"+
		"\x3\xDD\x3\xDD\x3\xDD\a\xDD\xA75\n\xDD\f\xDD\xE\xDD\xA78\v\xDD\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\a\xDE\xA80\n\xDE\f\xDE\xE\xDE\xA83"+
		"\v\xDE\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\x3\xDF\a\xDF\xA8B\n\xDF\f\xDF"+
		"\xE\xDF\xA8E\v\xDF\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE0\x3"+
		"\xE0\x3\xE0\a\xE0\xA99\n\xE0\f\xE0\xE\xE0\xA9C\v\xE0\x3\xE1\x3\xE1\x3"+
		"\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE1\a\xE1\xAA8\n\xE1"+
		"\f\xE1\xE\xE1\xAAB\v\xE1\x3\xE2\x3\xE2\x3\xE3\x3\xE3\x3\xE4\x3\xE4\x3"+
		"\xE4\x3\xE4\x5\xE4\xAB5\n\xE4\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5"+
		"\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5\x3\xE5"+
		"\a\xE5\xAC7\n\xE5\f\xE5\xE\xE5\xACA\v\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6"+
		"\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\a\xE6\xAD5\n\xE6\f\xE6\xE\xE6\xAD8"+
		"\v\xE6\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7"+
		"\x3\xE7\x3\xE7\x3\xE7\a\xE7\xAE6\n\xE7\f\xE7\xE\xE7\xAE9\v\xE7\x3\xE8"+
		"\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE8\x5\xE8\xAF2\n\xE8\x3\xE9\x3"+
		"\xE9\x3\xE9\x3\xEA\x3\xEA\x3\xEA\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3\xEB\x3"+
		"\xEB\x5\xEB\xB00\n\xEB\x3\xEC\x3\xEC\x5\xEC\xB04\n\xEC\x3\xEC\x3\xEC\a"+
		"\xEC\xB08\n\xEC\f\xEC\xE\xEC\xB0B\v\xEC\x3\xED\x3\xED\x3\xED\x3\xEE\x3"+
		"\xEE\x3\xEF\x3\xEF\x3\xEF\x3\xF0\x3\xF0\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3"+
		"\xF1\x3\xF1\x3\xF1\x3\xF1\a\xF1\xB1F\n\xF1\f\xF1\xE\xF1\xB22\v\xF1\x3"+
		"\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\x3\xF1\a\xF1\xB2A\n\xF1\f\xF1\xE\xF1"+
		"\xB2D\v\xF1\x3\xF1\x3\xF1\x3\xF1\x5\xF1\xB32\n\xF1\x3\xF1\x2\x2\xF\x36"+
		":@\x1B4\x1B6\x1B8\x1BA\x1BC\x1BE\x1C0\x1C8\x1CA\x1CC\xF2\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T"+
		"\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2"+
		"\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2"+
		"\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2"+
		"\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2"+
		"\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2"+
		"\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2"+
		"\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102"+
		"\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114"+
		"\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126"+
		"\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138"+
		"\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A"+
		"\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C"+
		"\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E"+
		"\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180"+
		"\x2\x182\x2\x184\x2\x186\x2\x188\x2\x18A\x2\x18C\x2\x18E\x2\x190\x2\x192"+
		"\x2\x194\x2\x196\x2\x198\x2\x19A\x2\x19C\x2\x19E\x2\x1A0\x2\x1A2\x2\x1A4"+
		"\x2\x1A6\x2\x1A8\x2\x1AA\x2\x1AC\x2\x1AE\x2\x1B0\x2\x1B2\x2\x1B4\x2\x1B6"+
		"\x2\x1B8\x2\x1BA\x2\x1BC\x2\x1BE\x2\x1C0\x2\x1C2\x2\x1C4\x2\x1C6\x2\x1C8"+
		"\x2\x1CA\x2\x1CC\x2\x1CE\x2\x1D0\x2\x1D2\x2\x1D4\x2\x1D6\x2\x1D8\x2\x1DA"+
		"\x2\x1DC\x2\x1DE\x2\x1E0\x2\x2\x6\x3\x2\x35:\a\x2\a\a\n\n\x1D\x1D\x1F"+
		"\x1F\'\'\x4\x2\x10\x10\x16\x16\x4\x2\x44\x44]g\xC22\x2\x1E2\x3\x2\x2\x2"+
		"\x4\x1E6\x3\x2\x2\x2\x6\x1F6\x3\x2\x2\x2\b\x1FA\x3\x2\x2\x2\n\x1FC\x3"+
		"\x2\x2\x2\f\x1FE\x3\x2\x2\x2\xE\x203\x3\x2\x2\x2\x10\x207\x3\x2\x2\x2"+
		"\x12\x226\x3\x2\x2\x2\x14\x228\x3\x2\x2\x2\x16\x236\x3\x2\x2\x2\x18\x23D"+
		"\x3\x2\x2\x2\x1A\x23F\x3\x2\x2\x2\x1C\x241\x3\x2\x2\x2\x1E\x246\x3\x2"+
		"\x2\x2 \x254\x3\x2\x2\x2\"\x259\x3\x2\x2\x2$\x26E\x3\x2\x2\x2&\x275\x3"+
		"\x2\x2\x2(\x281\x3\x2\x2\x2*\x283\x3\x2\x2\x2,\x286\x3\x2\x2\x2.\x28A"+
		"\x3\x2\x2\x2\x30\x294\x3\x2\x2\x2\x32\x299\x3\x2\x2\x2\x34\x2A4\x3\x2"+
		"\x2\x2\x36\x2A6\x3\x2\x2\x2\x38\x2B6\x3\x2\x2\x2:\x2B8\x3\x2\x2\x2<\x2C8"+
		"\x3\x2\x2\x2>\x2CA\x3\x2\x2\x2@\x2CC\x3\x2\x2\x2\x42\x2D8\x3\x2\x2\x2"+
		"\x44\x2EB\x3\x2\x2\x2\x46\x2F9\x3\x2\x2\x2H\x2FF\x3\x2\x2\x2J\x301\x3"+
		"\x2\x2\x2L\x305\x3\x2\x2\x2N\x30B\x3\x2\x2\x2P\x312\x3\x2\x2\x2R\x31C"+
		"\x3\x2\x2\x2T\x320\x3\x2\x2\x2V\x325\x3\x2\x2\x2X\x33D\x3\x2\x2\x2Z\x33F"+
		"\x3\x2\x2\x2\\\x343\x3\x2\x2\x2^\x34B\x3\x2\x2\x2`\x34E\x3\x2\x2\x2\x62"+
		"\x351\x3\x2\x2\x2\x64\x359\x3\x2\x2\x2\x66\x366\x3\x2\x2\x2h\x36D\x3\x2"+
		"\x2\x2j\x372\x3\x2\x2\x2l\x381\x3\x2\x2\x2n\x383\x3\x2\x2\x2p\x38B\x3"+
		"\x2\x2\x2r\x390\x3\x2\x2\x2t\x396\x3\x2\x2\x2v\x39A\x3\x2\x2\x2x\x39E"+
		"\x3\x2\x2\x2z\x3A3\x3\x2\x2\x2|\x3A7\x3\x2\x2\x2~\x3C0\x3\x2\x2\x2\x80"+
		"\x3C2\x3\x2\x2\x2\x82\x3CD\x3\x2\x2\x2\x84\x3D1\x3\x2\x2\x2\x86\x3D3\x3"+
		"\x2\x2\x2\x88\x3D5\x3\x2\x2\x2\x8A\x3D7\x3\x2\x2\x2\x8C\x3E2\x3\x2\x2"+
		"\x2\x8E\x3E7\x3\x2\x2\x2\x90\x3F7\x3\x2\x2\x2\x92\x40A\x3\x2\x2\x2\x94"+
		"\x40E\x3\x2\x2\x2\x96\x410\x3\x2\x2\x2\x98\x41E\x3\x2\x2\x2\x9A\x430\x3"+
		"\x2\x2\x2\x9C\x435\x3\x2\x2\x2\x9E\x43D\x3\x2\x2\x2\xA0\x450\x3\x2\x2"+
		"\x2\xA2\x455\x3\x2\x2\x2\xA4\x45F\x3\x2\x2\x2\xA6\x462\x3\x2\x2\x2\xA8"+
		"\x46C\x3\x2\x2\x2\xAA\x470\x3\x2\x2\x2\xAC\x472\x3\x2\x2\x2\xAE\x474\x3"+
		"\x2\x2\x2\xB0\x47A\x3\x2\x2\x2\xB2\x487\x3\x2\x2\x2\xB4\x48A\x3\x2\x2"+
		"\x2\xB6\x493\x3\x2\x2\x2\xB8\x495\x3\x2\x2\x2\xBA\x4CC\x3\x2\x2\x2\xBC"+
		"\x4D1\x3\x2\x2\x2\xBE\x4DB\x3\x2\x2\x2\xC0\x4E7\x3\x2\x2\x2\xC2\x4F2\x3"+
		"\x2\x2\x2\xC4\x500\x3\x2\x2\x2\xC6\x502\x3\x2\x2\x2\xC8\x50B\x3\x2\x2"+
		"\x2\xCA\x510\x3\x2\x2\x2\xCC\x524\x3\x2\x2\x2\xCE\x526\x3\x2\x2\x2\xD0"+
		"\x529\x3\x2\x2\x2\xD2\x537\x3\x2\x2\x2\xD4\x53C\x3\x2\x2\x2\xD6\x547\x3"+
		"\x2\x2\x2\xD8\x54C\x3\x2\x2\x2\xDA\x558\x3\x2\x2\x2\xDC\x55D\x3\x2\x2"+
		"\x2\xDE\x565\x3\x2\x2\x2\xE0\x573\x3\x2\x2\x2\xE2\x578\x3\x2\x2\x2\xE4"+
		"\x58A\x3\x2\x2\x2\xE6\x58C\x3\x2\x2\x2\xE8\x592\x3\x2\x2\x2\xEA\x594\x3"+
		"\x2\x2\x2\xEC\x59C\x3\x2\x2\x2\xEE\x5A4\x3\x2\x2\x2\xF0\x5AB\x3\x2\x2"+
		"\x2\xF2\x5AD\x3\x2\x2\x2\xF4\x5B6\x3\x2\x2\x2\xF6\x5BE\x3\x2\x2\x2\xF8"+
		"\x5C1\x3\x2\x2\x2\xFA\x5C7\x3\x2\x2\x2\xFC\x5D0\x3\x2\x2\x2\xFE\x5D8\x3"+
		"\x2\x2\x2\x100\x5DE\x3\x2\x2\x2\x102\x5E8\x3\x2\x2\x2\x104\x5EA\x3\x2"+
		"\x2\x2\x106\x5F0\x3\x2\x2\x2\x108\x5FC\x3\x2\x2\x2\x10A\x603\x3\x2\x2"+
		"\x2\x10C\x611\x3\x2\x2\x2\x10E\x613\x3\x2\x2\x2\x110\x615\x3\x2\x2\x2"+
		"\x112\x619\x3\x2\x2\x2\x114\x61D\x3\x2\x2\x2\x116\x627\x3\x2\x2\x2\x118"+
		"\x629\x3\x2\x2\x2\x11A\x62F\x3\x2\x2\x2\x11C\x637\x3\x2\x2\x2\x11E\x649"+
		"\x3\x2\x2\x2\x120\x64B\x3\x2\x2\x2\x122\x651\x3\x2\x2\x2\x124\x660\x3"+
		"\x2\x2\x2\x126\x663\x3\x2\x2\x2\x128\x674\x3\x2\x2\x2\x12A\x676\x3\x2"+
		"\x2\x2\x12C\x678\x3\x2\x2\x2\x12E\x67E\x3\x2\x2\x2\x130\x684\x3\x2\x2"+
		"\x2\x132\x68E\x3\x2\x2\x2\x134\x692\x3\x2\x2\x2\x136\x694\x3\x2\x2\x2"+
		"\x138\x6A4\x3\x2\x2\x2\x13A\x6B6\x3\x2\x2\x2\x13C\x6B8\x3\x2\x2\x2\x13E"+
		"\x6BA\x3\x2\x2\x2\x140\x6C2\x3\x2\x2\x2\x142\x6D1\x3\x2\x2\x2\x144\x6E0"+
		"\x3\x2\x2\x2\x146\x6E6\x3\x2\x2\x2\x148\x6EC\x3\x2\x2\x2\x14A\x6F2\x3"+
		"\x2\x2\x2\x14C\x6F6\x3\x2\x2\x2\x14E\x708\x3\x2\x2\x2\x150\x70A\x3\x2"+
		"\x2\x2\x152\x711\x3\x2\x2\x2\x154\x71A\x3\x2\x2\x2\x156\x720\x3\x2\x2"+
		"\x2\x158\x728\x3\x2\x2\x2\x15A\x72B\x3\x2\x2\x2\x15C\x734\x3\x2\x2\x2"+
		"\x15E\x73B\x3\x2\x2\x2\x160\x746\x3\x2\x2\x2\x162\x750\x3\x2\x2\x2\x164"+
		"\x775\x3\x2\x2\x2\x166\x777\x3\x2\x2\x2\x168\x795\x3\x2\x2\x2\x16A\x79C"+
		"\x3\x2\x2\x2\x16C\x79E\x3\x2\x2\x2\x16E\x7A4\x3\x2\x2\x2\x170\x7CE\x3"+
		"\x2\x2\x2\x172\x7D0\x3\x2\x2\x2\x174\x7F9\x3\x2\x2\x2\x176\x84E\x3\x2"+
		"\x2\x2\x178\x850\x3\x2\x2\x2\x17A\x8A2\x3\x2\x2\x2\x17C\x8A7\x3\x2\x2"+
		"\x2\x17E\x8B6\x3\x2\x2\x2\x180\x8B8\x3\x2\x2\x2\x182\x8C4\x3\x2\x2\x2"+
		"\x184\x8D0\x3\x2\x2\x2\x186\x8DC\x3\x2\x2\x2\x188\x8F5\x3\x2\x2\x2\x18A"+
		"\x945\x3\x2\x2\x2\x18C\x947\x3\x2\x2\x2\x18E\x98A\x3\x2\x2\x2\x190\x98C"+
		"\x3\x2\x2\x2\x192\x9C3\x3\x2\x2\x2\x194\x9C5\x3\x2\x2\x2\x196\x9F3\x3"+
		"\x2\x2\x2\x198\xA0B\x3\x2\x2\x2\x19A\xA0D\x3\x2\x2\x2\x19C\xA17\x3\x2"+
		"\x2\x2\x19E\xA1E\x3\x2\x2\x2\x1A0\xA22\x3\x2\x2\x2\x1A2\xA24\x3\x2\x2"+
		"\x2\x1A4\xA32\x3\x2\x2\x2\x1A6\xA34\x3\x2\x2\x2\x1A8\xA3E\x3\x2\x2\x2"+
		"\x1AA\xA42\x3\x2\x2\x2\x1AC\xA44\x3\x2\x2\x2\x1AE\xA4B\x3\x2\x2\x2\x1B0"+
		"\xA4D\x3\x2\x2\x2\x1B2\xA56\x3\x2\x2\x2\x1B4\xA58\x3\x2\x2\x2\x1B6\xA63"+
		"\x3\x2\x2\x2\x1B8\xA6E\x3\x2\x2\x2\x1BA\xA79\x3\x2\x2\x2\x1BC\xA84\x3"+
		"\x2\x2\x2\x1BE\xA8F\x3\x2\x2\x2\x1C0\xA9D\x3\x2\x2\x2\x1C2\xAAC\x3\x2"+
		"\x2\x2\x1C4\xAAE\x3\x2\x2\x2\x1C6\xAB4\x3\x2\x2\x2\x1C8\xAB6\x3\x2\x2"+
		"\x2\x1CA\xACB\x3\x2\x2\x2\x1CC\xAD9\x3\x2\x2\x2\x1CE\xAF1\x3\x2\x2\x2"+
		"\x1D0\xAF3\x3\x2\x2\x2\x1D2\xAF6\x3\x2\x2\x2\x1D4\xAFF\x3\x2\x2\x2\x1D6"+
		"\xB03\x3\x2\x2\x2\x1D8\xB0C\x3\x2\x2\x2\x1DA\xB0F\x3\x2\x2\x2\x1DC\xB11"+
		"\x3\x2\x2\x2\x1DE\xB14\x3\x2\x2\x2\x1E0\xB31\x3\x2\x2\x2\x1E2\x1E3\t\x2"+
		"\x2\x2\x1E3\x3\x3\x2\x2\x2\x1E4\x1E7\x5\x6\x4\x2\x1E5\x1E7\x5\xE\b\x2"+
		"\x1E6\x1E4\x3\x2\x2\x2\x1E6\x1E5\x3\x2\x2\x2\x1E7\x5\x3\x2\x2\x2\x1E8"+
		"\x1EA\x5\xE8u\x2\x1E9\x1E8\x3\x2\x2\x2\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1E9"+
		"\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1EE\x3\x2\x2\x2\x1ED\x1EB\x3"+
		"\x2\x2\x2\x1EE\x1F7\x5\b\x5\x2\x1EF\x1F1\x5\xE8u\x2\x1F0\x1EF\x3\x2\x2"+
		"\x2\x1F1\x1F4\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F3\x3\x2\x2\x2"+
		"\x1F3\x1F5\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F5\x1F7\a\x5\x2\x2\x1F6"+
		"\x1EB\x3\x2\x2\x2\x1F6\x1F2\x3\x2\x2\x2\x1F7\a\x3\x2\x2\x2\x1F8\x1FB\x5"+
		"\n\x6\x2\x1F9\x1FB\x5\f\a\x2\x1FA\x1F8\x3\x2\x2\x2\x1FA\x1F9\x3\x2\x2"+
		"\x2\x1FB\t\x3\x2\x2\x2\x1FC\x1FD\t\x3\x2\x2\x1FD\v\x3\x2\x2\x2\x1FE\x1FF"+
		"\t\x4\x2\x2\x1FF\r\x3\x2\x2\x2\x200\x204\x5\x10\t\x2\x201\x204\x5\x1E"+
		"\x10\x2\x202\x204\x5 \x11\x2\x203\x200\x3\x2\x2\x2\x203\x201\x3\x2\x2"+
		"\x2\x203\x202\x3\x2\x2\x2\x204\xF\x3\x2\x2\x2\x205\x208\x5\x16\f\x2\x206"+
		"\x208\x5\x1C\xF\x2\x207\x205\x3\x2\x2\x2\x207\x206\x3\x2\x2\x2\x208\x20D"+
		"\x3\x2\x2\x2\x209\x20C\x5\x14\v\x2\x20A\x20C\x5\x1A\xE\x2\x20B\x209\x3"+
		"\x2\x2\x2\x20B\x20A\x3\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20B\x3\x2"+
		"\x2\x2\x20D\x20E\x3\x2\x2\x2\x20E\x11\x3\x2\x2\x2\x20F\x20D\x3\x2\x2\x2"+
		"\x210\x212\x5\xE8u\x2\x211\x210\x3\x2\x2\x2\x212\x215\x3\x2\x2\x2\x213"+
		"\x211\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x216\x3\x2\x2\x2\x215\x213"+
		"\x3\x2\x2\x2\x216\x218\ah\x2\x2\x217\x219\x5,\x17\x2\x218\x217\x3\x2\x2"+
		"\x2\x218\x219\x3\x2\x2\x2\x219\x227\x3\x2\x2\x2\x21A\x21B\x5\x10\t\x2"+
		"\x21B\x21F\a\x43\x2\x2\x21C\x21E\x5\xE8u\x2\x21D\x21C\x3\x2\x2\x2\x21E"+
		"\x221\x3\x2\x2\x2\x21F\x21D\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x222"+
		"\x3\x2\x2\x2\x221\x21F\x3\x2\x2\x2\x222\x224\ah\x2\x2\x223\x225\x5,\x17"+
		"\x2\x224\x223\x3\x2\x2\x2\x224\x225\x3\x2\x2\x2\x225\x227\x3\x2\x2\x2"+
		"\x226\x213\x3\x2\x2\x2\x226\x21A\x3\x2\x2\x2\x227\x13\x3\x2\x2\x2\x228"+
		"\x22C\a\x43\x2\x2\x229\x22B\x5\xE8u\x2\x22A\x229\x3\x2\x2\x2\x22B\x22E"+
		"\x3\x2\x2\x2\x22C\x22A\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x22F\x3"+
		"\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22F\x231\ah\x2\x2\x230\x232\x5,\x17\x2"+
		"\x231\x230\x3\x2\x2\x2\x231\x232\x3\x2\x2\x2\x232\x15\x3\x2\x2\x2\x233"+
		"\x235\x5\xE8u\x2\x234\x233\x3\x2\x2\x2\x235\x238\x3\x2\x2\x2\x236\x234"+
		"\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x239\x3\x2\x2\x2\x238\x236\x3"+
		"\x2\x2\x2\x239\x23B\ah\x2\x2\x23A\x23C\x5,\x17\x2\x23B\x23A\x3\x2\x2\x2"+
		"\x23B\x23C\x3\x2\x2\x2\x23C\x17\x3\x2\x2\x2\x23D\x23E\x5\x12\n\x2\x23E"+
		"\x19\x3\x2\x2\x2\x23F\x240\x5\x14\v\x2\x240\x1B\x3\x2\x2\x2\x241\x242"+
		"\x5\x16\f\x2\x242\x1D\x3\x2\x2\x2\x243\x245\x5\xE8u\x2\x244\x243\x3\x2"+
		"\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x246\x247\x3\x2\x2"+
		"\x2\x247\x249\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249\x24A\ah\x2\x2\x24A"+
		"\x1F\x3\x2\x2\x2\x24B\x24C\x5\x6\x4\x2\x24C\x24D\x5\"\x12\x2\x24D\x255"+
		"\x3\x2\x2\x2\x24E\x24F\x5\x10\t\x2\x24F\x250\x5\"\x12\x2\x250\x255\x3"+
		"\x2\x2\x2\x251\x252\x5\x1E\x10\x2\x252\x253\x5\"\x12\x2\x253\x255\x3\x2"+
		"\x2\x2\x254\x24B\x3\x2\x2\x2\x254\x24E\x3\x2\x2\x2\x254\x251\x3\x2\x2"+
		"\x2\x255!\x3\x2\x2\x2\x256\x258\x5\xE8u\x2\x257\x256\x3\x2\x2\x2\x258"+
		"\x25B\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C"+
		"\x3\x2\x2\x2\x25B\x259\x3\x2\x2\x2\x25C\x25D\a?\x2\x2\x25D\x268\a@\x2"+
		"\x2\x25E\x260\x5\xE8u\x2\x25F\x25E\x3\x2\x2\x2\x260\x263\x3\x2\x2\x2\x261"+
		"\x25F\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x264\x3\x2\x2\x2\x263\x261"+
		"\x3\x2\x2\x2\x264\x265\a?\x2\x2\x265\x267\a@\x2\x2\x266\x261\x3\x2\x2"+
		"\x2\x267\x26A\x3\x2\x2\x2\x268\x266\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2"+
		"\x269#\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26B\x26D\x5&\x14\x2\x26C\x26B"+
		"\x3\x2\x2\x2\x26D\x270\x3\x2\x2\x2\x26E\x26C\x3\x2\x2\x2\x26E\x26F\x3"+
		"\x2\x2\x2\x26F\x271\x3\x2\x2\x2\x270\x26E\x3\x2\x2\x2\x271\x273\ah\x2"+
		"\x2\x272\x274\x5(\x15\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274"+
		"%\x3\x2\x2\x2\x275\x276\x5\xE8u\x2\x276\'\x3\x2\x2\x2\x277\x278\a\x13"+
		"\x2\x2\x278\x282\x5\x1E\x10\x2\x279\x27A\a\x13\x2\x2\x27A\x27E\x5\x10"+
		"\t\x2\x27B\x27D\x5*\x16\x2\x27C\x27B\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2"+
		"\x27E\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x282\x3\x2\x2\x2\x280"+
		"\x27E\x3\x2\x2\x2\x281\x277\x3\x2\x2\x2\x281\x279\x3\x2\x2\x2\x282)\x3"+
		"\x2\x2\x2\x283\x284\aW\x2\x2\x284\x285\x5\x18\r\x2\x285+\x3\x2\x2\x2\x286"+
		"\x287\a\x46\x2\x2\x287\x288\x5.\x18\x2\x288\x289\a\x45\x2\x2\x289-\x3"+
		"\x2\x2\x2\x28A\x28F\x5\x30\x19\x2\x28B\x28C\a\x42\x2\x2\x28C\x28E\x5\x30"+
		"\x19\x2\x28D\x28B\x3\x2\x2\x2\x28E\x291\x3\x2\x2\x2\x28F\x28D\x3\x2\x2"+
		"\x2\x28F\x290\x3\x2\x2\x2\x290/\x3\x2\x2\x2\x291\x28F\x3\x2\x2\x2\x292"+
		"\x295\x5\xE\b\x2\x293\x295\x5\x32\x1A\x2\x294\x292\x3\x2\x2\x2\x294\x293"+
		"\x3\x2\x2\x2\x295\x31\x3\x2\x2\x2\x296\x298\x5\xE8u\x2\x297\x296\x3\x2"+
		"\x2\x2\x298\x29B\x3\x2\x2\x2\x299\x297\x3\x2\x2\x2\x299\x29A\x3\x2\x2"+
		"\x2\x29A\x29C\x3\x2\x2\x2\x29B\x299\x3\x2\x2\x2\x29C\x29E\aI\x2\x2\x29D"+
		"\x29F\x5\x34\x1B\x2\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x33"+
		"\x3\x2\x2\x2\x2A0\x2A1\a\x13\x2\x2\x2A1\x2A5\x5\xE\b\x2\x2A2\x2A3\a*\x2"+
		"\x2\x2A3\x2A5\x5\xE\b\x2\x2A4\x2A0\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A5"+
		"\x35\x3\x2\x2\x2\x2A6\x2A7\b\x1C\x1\x2\x2A7\x2A8\ah\x2\x2\x2A8\x2AE\x3"+
		"\x2\x2\x2\x2A9\x2AA\f\x3\x2\x2\x2AA\x2AB\a\x43\x2\x2\x2AB\x2AD\ah\x2\x2"+
		"\x2AC\x2A9\x3\x2\x2\x2\x2AD\x2B0\x3\x2\x2\x2\x2AE\x2AC\x3\x2\x2\x2\x2AE"+
		"\x2AF\x3\x2\x2\x2\x2AF\x37\x3\x2\x2\x2\x2B0\x2AE\x3\x2\x2\x2\x2B1\x2B7"+
		"\ah\x2\x2\x2B2\x2B3\x5:\x1E\x2\x2B3\x2B4\a\x43\x2\x2\x2B4\x2B5\ah\x2\x2"+
		"\x2B5\x2B7\x3\x2\x2\x2\x2B6\x2B1\x3\x2\x2\x2\x2B6\x2B2\x3\x2\x2\x2\x2B7"+
		"\x39\x3\x2\x2\x2\x2B8\x2B9\b\x1E\x1\x2\x2B9\x2BA\ah\x2\x2\x2BA\x2C0\x3"+
		"\x2\x2\x2\x2BB\x2BC\f\x3\x2\x2\x2BC\x2BD\a\x43\x2\x2\x2BD\x2BF\ah\x2\x2"+
		"\x2BE\x2BB\x3\x2\x2\x2\x2BF\x2C2\x3\x2\x2\x2\x2C0\x2BE\x3\x2\x2\x2\x2C0"+
		"\x2C1\x3\x2\x2\x2\x2C1;\x3\x2\x2\x2\x2C2\x2C0\x3\x2\x2\x2\x2C3\x2C9\a"+
		"h\x2\x2\x2C4\x2C5\x5@!\x2\x2C5\x2C6\a\x43\x2\x2\x2C6\x2C7\ah\x2\x2\x2C7"+
		"\x2C9\x3\x2\x2\x2\x2C8\x2C3\x3\x2\x2\x2\x2C8\x2C4\x3\x2\x2\x2\x2C9=\x3"+
		"\x2\x2\x2\x2CA\x2CB\ah\x2\x2\x2CB?\x3\x2\x2\x2\x2CC\x2CD\b!\x1\x2\x2CD"+
		"\x2CE\ah\x2\x2\x2CE\x2D4\x3\x2\x2\x2\x2CF\x2D0\f\x3\x2\x2\x2D0\x2D1\a"+
		"\x43\x2\x2\x2D1\x2D3\ah\x2\x2\x2D2\x2CF\x3\x2\x2\x2\x2D3\x2D6\x3\x2\x2"+
		"\x2\x2D4\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x41\x3\x2\x2\x2\x2D6"+
		"\x2D4\x3\x2\x2\x2\x2D7\x2D9\x5\x44#\x2\x2D8\x2D7\x3\x2\x2\x2\x2D8\x2D9"+
		"\x3\x2\x2\x2\x2D9\x2DD\x3\x2\x2\x2\x2DA\x2DC\x5H%\x2\x2DB\x2DA\x3\x2\x2"+
		"\x2\x2DC\x2DF\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2"+
		"\x2DE\x2E3\x3\x2\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2E0\x2E2\x5R*\x2\x2E1\x2E0"+
		"\x3\x2\x2\x2\x2E2\x2E5\x3\x2\x2\x2\x2E3\x2E1\x3\x2\x2\x2\x2E3\x2E4\x3"+
		"\x2\x2\x2\x2E4\x2E6\x3\x2\x2\x2\x2E5\x2E3\x3\x2\x2\x2\x2E6\x2E7\a\x2\x2"+
		"\x3\x2E7\x43\x3\x2\x2\x2\x2E8\x2EA\x5\x46$\x2\x2E9\x2E8\x3\x2\x2\x2\x2EA"+
		"\x2ED\x3\x2\x2\x2\x2EB\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EE"+
		"\x3\x2\x2\x2\x2ED\x2EB\x3\x2\x2\x2\x2EE\x2EF\a\"\x2\x2\x2EF\x2F4\ah\x2"+
		"\x2\x2F0\x2F1\a\x43\x2\x2\x2F1\x2F3\ah\x2\x2\x2F2\x2F0\x3\x2\x2\x2\x2F3"+
		"\x2F6\x3\x2\x2\x2\x2F4\x2F2\x3\x2\x2\x2\x2F4\x2F5\x3\x2\x2\x2\x2F5\x2F7"+
		"\x3\x2\x2\x2\x2F6\x2F4\x3\x2\x2\x2\x2F7\x2F8\a\x41\x2\x2\x2F8\x45\x3\x2"+
		"\x2\x2\x2F9\x2FA\x5\xE8u\x2\x2FAG\x3\x2\x2\x2\x2FB\x300\x5J&\x2\x2FC\x300"+
		"\x5L\'\x2\x2FD\x300\x5N(\x2\x2FE\x300\x5P)\x2\x2FF\x2FB\x3\x2\x2\x2\x2FF"+
		"\x2FC\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x2FF\x2FE\x3\x2\x2\x2\x300I\x3"+
		"\x2\x2\x2\x301\x302\a\x1B\x2\x2\x302\x303\x5\x38\x1D\x2\x303\x304\a\x41"+
		"\x2\x2\x304K\x3\x2\x2\x2\x305\x306\a\x1B\x2\x2\x306\x307\x5:\x1E\x2\x307"+
		"\x308\a\x43\x2\x2\x308\x309\aU\x2\x2\x309\x30A\a\x41\x2\x2\x30AM\x3\x2"+
		"\x2\x2\x30B\x30C\a\x1B\x2\x2\x30C\x30D\a(\x2\x2\x30D\x30E\x5\x38\x1D\x2"+
		"\x30E\x30F\a\x43\x2\x2\x30F\x310\ah\x2\x2\x310\x311\a\x41\x2\x2\x311O"+
		"\x3\x2\x2\x2\x312\x313\a\x1B\x2\x2\x313\x314\a(\x2\x2\x314\x315\x5\x38"+
		"\x1D\x2\x315\x316\a\x43\x2\x2\x316\x317\aU\x2\x2\x317\x318\a\x41\x2\x2"+
		"\x318Q\x3\x2\x2\x2\x319\x31D\x5T+\x2\x31A\x31D\x5\xC8\x65\x2\x31B\x31D"+
		"\a\x41\x2\x2\x31C\x319\x3\x2\x2\x2\x31C\x31A\x3\x2\x2\x2\x31C\x31B\x3"+
		"\x2\x2\x2\x31DS\x3\x2\x2\x2\x31E\x321\x5V,\x2\x31F\x321\x5\xBC_\x2\x320"+
		"\x31E\x3\x2\x2\x2\x320\x31F\x3\x2\x2\x2\x321U\x3\x2\x2\x2\x322\x324\x5"+
		"X-\x2\x323\x322\x3\x2\x2\x2\x324\x327\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2"+
		"\x325\x326\x3\x2\x2\x2\x326\x328\x3\x2\x2\x2\x327\x325\x3\x2\x2\x2\x328"+
		"\x329\a\v\x2\x2\x329\x32B\ah\x2\x2\x32A\x32C\x5Z.\x2\x32B\x32A\x3\x2\x2"+
		"\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32E\x3\x2\x2\x2\x32D\x32F\x5^\x30\x2\x32E"+
		"\x32D\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x331\x3\x2\x2\x2\x330\x332"+
		"\x5`\x31\x2\x331\x330\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x3\x2"+
		"\x2\x2\x333\x334\x5\x64\x33\x2\x334W\x3\x2\x2\x2\x335\x33E\x5\xE8u\x2"+
		"\x336\x33E\a%\x2\x2\x337\x33E\a$\x2\x2\x338\x33E\a#\x2\x2\x339\x33E\a"+
		"\x3\x2\x2\x33A\x33E\a(\x2\x2\x33B\x33E\a\x14\x2\x2\x33C\x33E\a)\x2\x2"+
		"\x33D\x335\x3\x2\x2\x2\x33D\x336\x3\x2\x2\x2\x33D\x337\x3\x2\x2\x2\x33D"+
		"\x338\x3\x2\x2\x2\x33D\x339\x3\x2\x2\x2\x33D\x33A\x3\x2\x2\x2\x33D\x33B"+
		"\x3\x2\x2\x2\x33D\x33C\x3\x2\x2\x2\x33EY\x3\x2\x2\x2\x33F\x340\a\x46\x2"+
		"\x2\x340\x341\x5\\/\x2\x341\x342\a\x45\x2\x2\x342[\x3\x2\x2\x2\x343\x348"+
		"\x5$\x13\x2\x344\x345\a\x42\x2\x2\x345\x347\x5$\x13\x2\x346\x344\x3\x2"+
		"\x2\x2\x347\x34A\x3\x2\x2\x2\x348\x346\x3\x2\x2\x2\x348\x349\x3\x2\x2"+
		"\x2\x349]\x3\x2\x2\x2\x34A\x348\x3\x2\x2\x2\x34B\x34C\a\x13\x2\x2\x34C"+
		"\x34D\x5\x12\n\x2\x34D_\x3\x2\x2\x2\x34E\x34F\a\x1A\x2\x2\x34F\x350\x5"+
		"\x62\x32\x2\x350\x61\x3\x2\x2\x2\x351\x356\x5\x18\r\x2\x352\x353\a\x42"+
		"\x2\x2\x353\x355\x5\x18\r\x2\x354\x352\x3\x2\x2\x2\x355\x358\x3\x2\x2"+
		"\x2\x356\x354\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x63\x3\x2\x2\x2\x358"+
		"\x356\x3\x2\x2\x2\x359\x35D\a=\x2\x2\x35A\x35C\x5\x66\x34\x2\x35B\x35A"+
		"\x3\x2\x2\x2\x35C\x35F\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3"+
		"\x2\x2\x2\x35E\x360\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x360\x361\a>\x2"+
		"\x2\x361\x65\x3\x2\x2\x2\x362\x367\x5h\x35\x2\x363\x367\x5\xACW\x2\x364"+
		"\x367\x5\xAEX\x2\x365\x367\x5\xB0Y\x2\x366\x362\x3\x2\x2\x2\x366\x363"+
		"\x3\x2\x2\x2\x366\x364\x3\x2\x2\x2\x366\x365\x3\x2\x2\x2\x367g\x3\x2\x2"+
		"\x2\x368\x36E\x5j\x36\x2\x369\x36E\x5\x8EH\x2\x36A\x36E\x5T+\x2\x36B\x36E"+
		"\x5\xC8\x65\x2\x36C\x36E\a\x41\x2\x2\x36D\x368\x3\x2\x2\x2\x36D\x369\x3"+
		"\x2\x2\x2\x36D\x36A\x3\x2\x2\x2\x36D\x36B\x3\x2\x2\x2\x36D\x36C\x3\x2"+
		"\x2\x2\x36Ei\x3\x2\x2\x2\x36F\x371\x5l\x37\x2\x370\x36F\x3\x2\x2\x2\x371"+
		"\x374\x3\x2\x2\x2\x372\x370\x3\x2\x2\x2\x372\x373\x3\x2\x2\x2\x373\x375"+
		"\x3\x2\x2\x2\x374\x372\x3\x2\x2\x2\x375\x376\x5v<\x2\x376\x377\x5n\x38"+
		"\x2\x377\x378\a\x41\x2\x2\x378k\x3\x2\x2\x2\x379\x382\x5\xE8u\x2\x37A"+
		"\x382\a%\x2\x2\x37B\x382\a$\x2\x2\x37C\x382\a#\x2\x2\x37D\x382\a(\x2\x2"+
		"\x37E\x382\a\x14\x2\x2\x37F\x382\a\x30\x2\x2\x380\x382\a\x33\x2\x2\x381"+
		"\x379\x3\x2\x2\x2\x381\x37A\x3\x2\x2\x2\x381\x37B\x3\x2\x2\x2\x381\x37C"+
		"\x3\x2\x2\x2\x381\x37D\x3\x2\x2\x2\x381\x37E\x3\x2\x2\x2\x381\x37F\x3"+
		"\x2\x2\x2\x381\x380\x3\x2\x2\x2\x382m\x3\x2\x2\x2\x383\x388\x5p\x39\x2"+
		"\x384\x385\a\x42\x2\x2\x385\x387\x5p\x39\x2\x386\x384\x3\x2\x2\x2\x387"+
		"\x38A\x3\x2\x2\x2\x388\x386\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389o\x3"+
		"\x2\x2\x2\x38A\x388\x3\x2\x2\x2\x38B\x38E\x5r:\x2\x38C\x38D\a\x44\x2\x2"+
		"\x38D\x38F\x5t;\x2\x38E\x38C\x3\x2\x2\x2\x38E\x38F\x3\x2\x2\x2\x38Fq\x3"+
		"\x2\x2\x2\x390\x392\ah\x2\x2\x391\x393\x5\"\x12\x2\x392\x391\x3\x2\x2"+
		"\x2\x392\x393\x3\x2\x2\x2\x393s\x3\x2\x2\x2\x394\x397\x5\x1A0\xD1\x2\x395"+
		"\x397\x5\xFA~\x2\x396\x394\x3\x2\x2\x2\x396\x395\x3\x2\x2\x2\x397u\x3"+
		"\x2\x2\x2\x398\x39B\x5x=\x2\x399\x39B\x5z>\x2\x39A\x398\x3\x2\x2\x2\x39A"+
		"\x399\x3\x2\x2\x2\x39Bw\x3\x2\x2\x2\x39C\x39F\x5\b\x5\x2\x39D\x39F\a\x5"+
		"\x2\x2\x39E\x39C\x3\x2\x2\x2\x39E\x39D\x3\x2\x2\x2\x39Fy\x3\x2\x2\x2\x3A0"+
		"\x3A4\x5|?\x2\x3A1\x3A4\x5\x8A\x46\x2\x3A2\x3A4\x5\x8CG\x2\x3A3\x3A0\x3"+
		"\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A3\x3A2\x3\x2\x2\x2\x3A4{\x3\x2\x2\x2"+
		"\x3A5\x3A8\x5\x82\x42\x2\x3A6\x3A8\x5\x88\x45\x2\x3A7\x3A5\x3\x2\x2\x2"+
		"\x3A7\x3A6\x3\x2\x2\x2\x3A8\x3AD\x3\x2\x2\x2\x3A9\x3AC\x5\x80\x41\x2\x3AA"+
		"\x3AC\x5\x86\x44\x2\x3AB\x3A9\x3\x2\x2\x2\x3AB\x3AA\x3\x2\x2\x2\x3AC\x3AF"+
		"\x3\x2\x2\x2\x3AD\x3AB\x3\x2\x2\x2\x3AD\x3AE\x3\x2\x2\x2\x3AE}\x3\x2\x2"+
		"\x2\x3AF\x3AD\x3\x2\x2\x2\x3B0\x3B2\ah\x2\x2\x3B1\x3B3\x5,\x17\x2\x3B2"+
		"\x3B1\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3\x3C1\x3\x2\x2\x2\x3B4\x3B5"+
		"\x5|?\x2\x3B5\x3B9\a\x43\x2\x2\x3B6\x3B8\x5\xE8u\x2\x3B7\x3B6\x3\x2\x2"+
		"\x2\x3B8\x3BB\x3\x2\x2\x2\x3B9\x3B7\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2"+
		"\x3BA\x3BC\x3\x2\x2\x2\x3BB\x3B9\x3\x2\x2\x2\x3BC\x3BE\ah\x2\x2\x3BD\x3BF"+
		"\x5,\x17\x2\x3BE\x3BD\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C1\x3\x2"+
		"\x2\x2\x3C0\x3B0\x3\x2\x2\x2\x3C0\x3B4\x3\x2\x2\x2\x3C1\x7F\x3\x2\x2\x2"+
		"\x3C2\x3C6\a\x43\x2\x2\x3C3\x3C5\x5\xE8u\x2\x3C4\x3C3\x3\x2\x2\x2\x3C5"+
		"\x3C8\x3\x2\x2\x2\x3C6\x3C4\x3\x2\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7\x3C9"+
		"\x3\x2\x2\x2\x3C8\x3C6\x3\x2\x2\x2\x3C9\x3CB\ah\x2\x2\x3CA\x3CC\x5,\x17"+
		"\x2\x3CB\x3CA\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x81\x3\x2\x2\x2\x3CD"+
		"\x3CF\ah\x2\x2\x3CE\x3D0\x5,\x17\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF\x3D0\x3"+
		"\x2\x2\x2\x3D0\x83\x3\x2\x2\x2\x3D1\x3D2\x5~@\x2\x3D2\x85\x3\x2\x2\x2"+
		"\x3D3\x3D4\x5\x80\x41\x2\x3D4\x87\x3\x2\x2\x2\x3D5\x3D6\x5\x82\x42\x2"+
		"\x3D6\x89\x3\x2\x2\x2\x3D7\x3D8\ah\x2\x2\x3D8\x8B\x3\x2\x2\x2\x3D9\x3DA"+
		"\x5x=\x2\x3DA\x3DB\x5\"\x12\x2\x3DB\x3E3\x3\x2\x2\x2\x3DC\x3DD\x5|?\x2"+
		"\x3DD\x3DE\x5\"\x12\x2\x3DE\x3E3\x3\x2\x2\x2\x3DF\x3E0\x5\x8A\x46\x2\x3E0"+
		"\x3E1\x5\"\x12\x2\x3E1\x3E3\x3\x2\x2\x2\x3E2\x3D9\x3\x2\x2\x2\x3E2\x3DC"+
		"\x3\x2\x2\x2\x3E2\x3DF\x3\x2\x2\x2\x3E3\x8D\x3\x2\x2\x2\x3E4\x3E6\x5\x90"+
		"I\x2\x3E5\x3E4\x3\x2\x2\x2\x3E6\x3E9\x3\x2\x2\x2\x3E7\x3E5\x3\x2\x2\x2"+
		"\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3EA\x3\x2\x2\x2\x3E9\x3E7\x3\x2\x2\x2\x3EA"+
		"\x3EB\x5\x92J\x2\x3EB\x3EC\x5\xAAV\x2\x3EC\x8F\x3\x2\x2\x2\x3ED\x3F8\x5"+
		"\xE8u\x2\x3EE\x3F8\a%\x2\x2\x3EF\x3F8\a$\x2\x2\x3F0\x3F8\a#\x2\x2\x3F1"+
		"\x3F8\a\x3\x2\x2\x3F2\x3F8\a(\x2\x2\x3F3\x3F8\a\x14\x2\x2\x3F4\x3F8\a"+
		",\x2\x2\x3F5\x3F8\a \x2\x2\x3F6\x3F8\a)\x2\x2\x3F7\x3ED\x3\x2\x2\x2\x3F7"+
		"\x3EE\x3\x2\x2\x2\x3F7\x3EF\x3\x2\x2\x2\x3F7\x3F0\x3\x2\x2\x2\x3F7\x3F1"+
		"\x3\x2\x2\x2\x3F7\x3F2\x3\x2\x2\x2\x3F7\x3F3\x3\x2\x2\x2\x3F7\x3F4\x3"+
		"\x2\x2\x2\x3F7\x3F5\x3\x2\x2\x2\x3F7\x3F6\x3\x2\x2\x2\x3F8\x91\x3\x2\x2"+
		"\x2\x3F9\x3FA\x5\x94K\x2\x3FA\x3FC\x5\x96L\x2\x3FB\x3FD\x5\xA4S\x2\x3FC"+
		"\x3FB\x3\x2\x2\x2\x3FC\x3FD\x3\x2\x2\x2\x3FD\x40B\x3\x2\x2\x2\x3FE\x402"+
		"\x5Z.\x2\x3FF\x401\x5\xE8u\x2\x400\x3FF\x3\x2\x2\x2\x401\x404\x3\x2\x2"+
		"\x2\x402\x400\x3\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x405\x3\x2\x2\x2"+
		"\x404\x402\x3\x2\x2\x2\x405\x406\x5\x94K\x2\x406\x408\x5\x96L\x2\x407"+
		"\x409\x5\xA4S\x2\x408\x407\x3\x2\x2\x2\x408\x409\x3\x2\x2\x2\x409\x40B"+
		"\x3\x2\x2\x2\x40A\x3F9\x3\x2\x2\x2\x40A\x3FE\x3\x2\x2\x2\x40B\x93\x3\x2"+
		"\x2\x2\x40C\x40F\x5v<\x2\x40D\x40F\a\x32\x2\x2\x40E\x40C\x3\x2\x2\x2\x40E"+
		"\x40D\x3\x2\x2\x2\x40F\x95\x3\x2\x2\x2\x410\x411\ah\x2\x2\x411\x413\a"+
		";\x2\x2\x412\x414\x5\x98M\x2\x413\x412\x3\x2\x2\x2\x413\x414\x3\x2\x2"+
		"\x2\x414\x415\x3\x2\x2\x2\x415\x417\a<\x2\x2\x416\x418\x5\"\x12\x2\x417"+
		"\x416\x3\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x97\x3\x2\x2\x2\x419\x41A"+
		"\x5\x9AN\x2\x41A\x41B\a\x42\x2\x2\x41B\x41C\x5\xA0Q\x2\x41C\x41F\x3\x2"+
		"\x2\x2\x41D\x41F\x5\xA0Q\x2\x41E\x419\x3\x2\x2\x2\x41E\x41D\x3\x2\x2\x2"+
		"\x41F\x99\x3\x2\x2\x2\x420\x425\x5\x9CO\x2\x421\x422\a\x42\x2\x2\x422"+
		"\x424\x5\x9CO\x2\x423\x421\x3\x2\x2\x2\x424\x427\x3\x2\x2\x2\x425\x423"+
		"\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426\x431\x3\x2\x2\x2\x427\x425\x3"+
		"\x2\x2\x2\x428\x42D\x5\xA2R\x2\x429\x42A\a\x42\x2\x2\x42A\x42C\x5\x9C"+
		"O\x2\x42B\x429\x3\x2\x2\x2\x42C\x42F\x3\x2\x2\x2\x42D\x42B\x3\x2\x2\x2"+
		"\x42D\x42E\x3\x2\x2\x2\x42E\x431\x3\x2\x2\x2\x42F\x42D\x3\x2\x2\x2\x430"+
		"\x420\x3\x2\x2\x2\x430\x428\x3\x2\x2\x2\x431\x9B\x3\x2\x2\x2\x432\x434"+
		"\x5\x9EP\x2\x433\x432\x3\x2\x2\x2\x434\x437\x3\x2\x2\x2\x435\x433\x3\x2"+
		"\x2\x2\x435\x436\x3\x2\x2\x2\x436\x438\x3\x2\x2\x2\x437\x435\x3\x2\x2"+
		"\x2\x438\x439\x5v<\x2\x439\x43A\x5r:\x2\x43A\x9D\x3\x2\x2\x2\x43B\x43E"+
		"\x5\xE8u\x2\x43C\x43E\a\x14\x2\x2\x43D\x43B\x3\x2\x2\x2\x43D\x43C\x3\x2"+
		"\x2\x2\x43E\x9F\x3\x2\x2\x2\x43F\x441\x5\x9EP\x2\x440\x43F\x3\x2\x2\x2"+
		"\x441\x444\x3\x2\x2\x2\x442\x440\x3\x2\x2\x2\x442\x443\x3\x2\x2\x2\x443"+
		"\x445\x3\x2\x2\x2\x444\x442\x3\x2\x2\x2\x445\x449\x5v<\x2\x446\x448\x5"+
		"\xE8u\x2\x447\x446\x3\x2\x2\x2\x448\x44B\x3\x2\x2\x2\x449\x447\x3\x2\x2"+
		"\x2\x449\x44A\x3\x2\x2\x2\x44A\x44C\x3\x2\x2\x2\x44B\x449\x3\x2\x2\x2"+
		"\x44C\x44D\aj\x2\x2\x44D\x44E\x5r:\x2\x44E\x451\x3\x2\x2\x2\x44F\x451"+
		"\x5\x9CO\x2\x450\x442\x3\x2\x2\x2\x450\x44F\x3\x2\x2\x2\x451\xA1\x3\x2"+
		"\x2\x2\x452\x454\x5\xE8u\x2\x453\x452\x3\x2\x2\x2\x454\x457\x3\x2\x2\x2"+
		"\x455\x453\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x458\x3\x2\x2\x2\x457"+
		"\x455\x3\x2\x2\x2\x458\x45B\x5v<\x2\x459\x45A\ah\x2\x2\x45A\x45C\a\x43"+
		"\x2\x2\x45B\x459\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45D\x3\x2\x2"+
		"\x2\x45D\x45E\a-\x2\x2\x45E\xA3\x3\x2\x2\x2\x45F\x460\a/\x2\x2\x460\x461"+
		"\x5\xA6T\x2\x461\xA5\x3\x2\x2\x2\x462\x467\x5\xA8U\x2\x463\x464\a\x42"+
		"\x2\x2\x464\x466\x5\xA8U\x2\x465\x463\x3\x2\x2\x2\x466\x469\x3\x2\x2\x2"+
		"\x467\x465\x3\x2\x2\x2\x467\x468\x3\x2\x2\x2\x468\xA7\x3\x2\x2\x2\x469"+
		"\x467\x3\x2\x2\x2\x46A\x46D\x5\x12\n\x2\x46B\x46D\x5\x1E\x10\x2\x46C\x46A"+
		"\x3\x2\x2\x2\x46C\x46B\x3\x2\x2\x2\x46D\xA9\x3\x2\x2\x2\x46E\x471\x5\xFE"+
		"\x80\x2\x46F\x471\a\x41\x2\x2\x470\x46E\x3\x2\x2\x2\x470\x46F\x3\x2\x2"+
		"\x2\x471\xAB\x3\x2\x2\x2\x472\x473\x5\xFE\x80\x2\x473\xAD\x3\x2\x2\x2"+
		"\x474\x475\a(\x2\x2\x475\x476\x5\xFE\x80\x2\x476\xAF\x3\x2\x2\x2\x477"+
		"\x479\x5\xB2Z\x2\x478\x477\x3\x2\x2\x2\x479\x47C\x3\x2\x2\x2\x47A\x478"+
		"\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47D\x3\x2\x2\x2\x47C\x47A\x3"+
		"\x2\x2\x2\x47D\x47F\x5\xB4[\x2\x47E\x480\x5\xA4S\x2\x47F\x47E\x3\x2\x2"+
		"\x2\x47F\x480\x3\x2\x2\x2\x480\x481\x3\x2\x2\x2\x481\x482\x5\xB8]\x2\x482"+
		"\xB1\x3\x2\x2\x2\x483\x488\x5\xE8u\x2\x484\x488\a%\x2\x2\x485\x488\a$"+
		"\x2\x2\x486\x488\a#\x2\x2\x487\x483\x3\x2\x2\x2\x487\x484\x3\x2\x2\x2"+
		"\x487\x485\x3\x2\x2\x2\x487\x486\x3\x2\x2\x2\x488\xB3\x3\x2\x2\x2\x489"+
		"\x48B\x5Z.\x2\x48A\x489\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48C\x3"+
		"\x2\x2\x2\x48C\x48D\x5\xB6\\\x2\x48D\x48F\a;\x2\x2\x48E\x490\x5\x98M\x2"+
		"\x48F\x48E\x3\x2\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491"+
		"\x492\a<\x2\x2\x492\xB5\x3\x2\x2\x2\x493\x494\ah\x2\x2\x494\xB7\x3\x2"+
		"\x2\x2\x495\x497\a=\x2\x2\x496\x498\x5\xBA^\x2\x497\x496\x3\x2\x2\x2\x497"+
		"\x498\x3\x2\x2\x2\x498\x49A\x3\x2\x2\x2\x499\x49B\x5\x100\x81\x2\x49A"+
		"\x499\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49D"+
		"\a>\x2\x2\x49D\xB9\x3\x2\x2\x2\x49E\x4A0\x5,\x17\x2\x49F\x49E\x3\x2\x2"+
		"\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x4A2\a-\x2\x2\x4A2"+
		"\x4A4\a;\x2\x2\x4A3\x4A5\x5\x190\xC9\x2\x4A4\x4A3\x3\x2\x2\x2\x4A4\x4A5"+
		"\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A7\a<\x2\x2\x4A7\x4CD\a\x41"+
		"\x2\x2\x4A8\x4AA\x5,\x17\x2\x4A9\x4A8\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2"+
		"\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4AC\a*\x2\x2\x4AC\x4AE\a;\x2\x2\x4AD\x4AF"+
		"\x5\x190\xC9\x2\x4AE\x4AD\x3\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AF\x4B0"+
		"\x3\x2\x2\x2\x4B0\x4B1\a<\x2\x2\x4B1\x4CD\a\x41\x2\x2\x4B2\x4B3\x5<\x1F"+
		"\x2\x4B3\x4B5\a\x43\x2\x2\x4B4\x4B6\x5,\x17\x2\x4B5\x4B4\x3\x2\x2\x2\x4B5"+
		"\x4B6\x3\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B8\a*\x2\x2\x4B8\x4BA\a"+
		";\x2\x2\x4B9\x4BB\x5\x190\xC9\x2\x4BA\x4B9\x3\x2\x2\x2\x4BA\x4BB\x3\x2"+
		"\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BD\a<\x2\x2\x4BD\x4BE\a\x41\x2\x2"+
		"\x4BE\x4CD\x3\x2\x2\x2\x4BF\x4C0\x5\x162\xB2\x2\x4C0\x4C2\a\x43\x2\x2"+
		"\x4C1\x4C3\x5,\x17\x2\x4C2\x4C1\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3"+
		"\x4C4\x3\x2\x2\x2\x4C4\x4C5\a*\x2\x2\x4C5\x4C7\a;\x2\x2\x4C6\x4C8\x5\x190"+
		"\xC9\x2\x4C7\x4C6\x3\x2\x2\x2\x4C7\x4C8\x3\x2\x2\x2\x4C8\x4C9\x3\x2\x2"+
		"\x2\x4C9\x4CA\a<\x2\x2\x4CA\x4CB\a\x41\x2\x2\x4CB\x4CD\x3\x2\x2\x2\x4CC"+
		"\x49F\x3\x2\x2\x2\x4CC\x4A9\x3\x2\x2\x2\x4CC\x4B2\x3\x2\x2\x2\x4CC\x4BF"+
		"\x3\x2\x2\x2\x4CD\xBB\x3\x2\x2\x2\x4CE\x4D0\x5X-\x2\x4CF\x4CE\x3\x2\x2"+
		"\x2\x4D0\x4D3\x3\x2\x2\x2\x4D1\x4CF\x3\x2\x2\x2\x4D1\x4D2\x3\x2\x2\x2"+
		"\x4D2\x4D4\x3\x2\x2\x2\x4D3\x4D1\x3\x2\x2\x2\x4D4\x4D5\a\x12\x2\x2\x4D5"+
		"\x4D7\ah\x2\x2\x4D6\x4D8\x5`\x31\x2\x4D7\x4D6\x3\x2\x2\x2\x4D7\x4D8\x3"+
		"\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DA\x5\xBE`\x2\x4DA\xBD\x3\x2\x2"+
		"\x2\x4DB\x4DD\a=\x2\x2\x4DC\x4DE\x5\xC0\x61\x2\x4DD\x4DC\x3\x2\x2\x2\x4DD"+
		"\x4DE\x3\x2\x2\x2\x4DE\x4E0\x3\x2\x2\x2\x4DF\x4E1\a\x42\x2\x2\x4E0\x4DF"+
		"\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1\x4E3\x3\x2\x2\x2\x4E2\x4E4\x5"+
		"\xC6\x64\x2\x4E3\x4E2\x3\x2\x2\x2\x4E3\x4E4\x3\x2\x2\x2\x4E4\x4E5\x3\x2"+
		"\x2\x2\x4E5\x4E6\a>\x2\x2\x4E6\xBF\x3\x2\x2\x2\x4E7\x4EC\x5\xC2\x62\x2"+
		"\x4E8\x4E9\a\x42\x2\x2\x4E9\x4EB\x5\xC2\x62\x2\x4EA\x4E8\x3\x2\x2\x2\x4EB"+
		"\x4EE\x3\x2\x2\x2\x4EC\x4EA\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\xC1"+
		"\x3\x2\x2\x2\x4EE\x4EC\x3\x2\x2\x2\x4EF\x4F1\x5\xC4\x63\x2\x4F0\x4EF\x3"+
		"\x2\x2\x2\x4F1\x4F4\x3\x2\x2\x2\x4F2\x4F0\x3\x2\x2\x2\x4F2\x4F3\x3\x2"+
		"\x2\x2\x4F3\x4F5\x3\x2\x2\x2\x4F4\x4F2\x3\x2\x2\x2\x4F5\x4FB\ah\x2\x2"+
		"\x4F6\x4F8\a;\x2\x2\x4F7\x4F9\x5\x190\xC9\x2\x4F8\x4F7\x3\x2\x2\x2\x4F8"+
		"\x4F9\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FC\a<\x2\x2\x4FB\x4F6\x3"+
		"\x2\x2\x2\x4FB\x4FC\x3\x2\x2\x2\x4FC\x4FE\x3\x2\x2\x2\x4FD\x4FF\x5\x64"+
		"\x33\x2\x4FE\x4FD\x3\x2\x2\x2\x4FE\x4FF\x3\x2\x2\x2\x4FF\xC3\x3\x2\x2"+
		"\x2\x500\x501\x5\xE8u\x2\x501\xC5\x3\x2\x2\x2\x502\x506\a\x41\x2\x2\x503"+
		"\x505\x5\x66\x34\x2\x504\x503\x3\x2\x2\x2\x505\x508\x3\x2\x2\x2\x506\x504"+
		"\x3\x2\x2\x2\x506\x507\x3\x2\x2\x2\x507\xC7\x3\x2\x2\x2\x508\x506\x3\x2"+
		"\x2\x2\x509\x50C\x5\xCA\x66\x2\x50A\x50C\x5\xDCo\x2\x50B\x509\x3\x2\x2"+
		"\x2\x50B\x50A\x3\x2\x2\x2\x50C\xC9\x3\x2\x2\x2\x50D\x50F\x5\xCCg\x2\x50E"+
		"\x50D\x3\x2\x2\x2\x50F\x512\x3\x2\x2\x2\x510\x50E\x3\x2\x2\x2\x510\x511"+
		"\x3\x2\x2\x2\x511\x513\x3\x2\x2\x2\x512\x510\x3\x2\x2\x2\x513\x514\a\x1E"+
		"\x2\x2\x514\x516\ah\x2\x2\x515\x517\x5Z.\x2\x516\x515\x3\x2\x2\x2\x516"+
		"\x517\x3\x2\x2\x2\x517\x519\x3\x2\x2\x2\x518\x51A\x5\xCEh\x2\x519\x518"+
		"\x3\x2\x2\x2\x519\x51A\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x51C\x5"+
		"\xD0i\x2\x51C\xCB\x3\x2\x2\x2\x51D\x525\x5\xE8u\x2\x51E\x525\a%\x2\x2"+
		"\x51F\x525\a$\x2\x2\x520\x525\a#\x2\x2\x521\x525\a\x3\x2\x2\x522\x525"+
		"\a(\x2\x2\x523\x525\a)\x2\x2\x524\x51D\x3\x2\x2\x2\x524\x51E\x3\x2\x2"+
		"\x2\x524\x51F\x3\x2\x2\x2\x524\x520\x3\x2\x2\x2\x524\x521\x3\x2\x2\x2"+
		"\x524\x522\x3\x2\x2\x2\x524\x523\x3\x2\x2\x2\x525\xCD\x3\x2\x2\x2\x526"+
		"\x527\a\x13\x2\x2\x527\x528\x5\x62\x32\x2\x528\xCF\x3\x2\x2\x2\x529\x52D"+
		"\a=\x2\x2\x52A\x52C\x5\xD2j\x2\x52B\x52A\x3\x2\x2\x2\x52C\x52F\x3\x2\x2"+
		"\x2\x52D\x52B\x3\x2\x2\x2\x52D\x52E\x3\x2\x2\x2\x52E\x530\x3\x2\x2\x2"+
		"\x52F\x52D\x3\x2\x2\x2\x530\x531\a>\x2\x2\x531\xD1\x3\x2\x2\x2\x532\x538"+
		"\x5\xD4k\x2\x533\x538\x5\xD8m\x2\x534\x538\x5T+\x2\x535\x538\x5\xC8\x65"+
		"\x2\x536\x538\a\x41\x2\x2\x537\x532\x3\x2\x2\x2\x537\x533\x3\x2\x2\x2"+
		"\x537\x534\x3\x2\x2\x2\x537\x535\x3\x2\x2\x2\x537\x536\x3\x2\x2\x2\x538"+
		"\xD3\x3\x2\x2\x2\x539\x53B\x5\xD6l\x2\x53A\x539\x3\x2\x2\x2\x53B\x53E"+
		"\x3\x2\x2\x2\x53C\x53A\x3\x2\x2\x2\x53C\x53D\x3\x2\x2\x2\x53D\x53F\x3"+
		"\x2\x2\x2\x53E\x53C\x3\x2\x2\x2\x53F\x540\x5v<\x2\x540\x541\x5n\x38\x2"+
		"\x541\x542\a\x41\x2\x2\x542\xD5\x3\x2\x2\x2\x543\x548\x5\xE8u\x2\x544"+
		"\x548\a%\x2\x2\x545\x548\a(\x2\x2\x546\x548\a\x14\x2\x2\x547\x543\x3\x2"+
		"\x2\x2\x547\x544\x3\x2\x2\x2\x547\x545\x3\x2\x2\x2\x547\x546\x3\x2\x2"+
		"\x2\x548\xD7\x3\x2\x2\x2\x549\x54B\x5\xDAn\x2\x54A\x549\x3\x2\x2\x2\x54B"+
		"\x54E\x3\x2\x2\x2\x54C\x54A\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D\x54F"+
		"\x3\x2\x2\x2\x54E\x54C\x3\x2\x2\x2\x54F\x550\x5\x92J\x2\x550\x551\x5\xAA"+
		"V\x2\x551\xD9\x3\x2\x2\x2\x552\x559\x5\xE8u\x2\x553\x559\a%\x2\x2\x554"+
		"\x559\a\x3\x2\x2\x555\x559\a\xE\x2\x2\x556\x559\a(\x2\x2\x557\x559\a)"+
		"\x2\x2\x558\x552\x3\x2\x2\x2\x558\x553\x3\x2\x2\x2\x558\x554\x3\x2\x2"+
		"\x2\x558\x555\x3\x2\x2\x2\x558\x556\x3\x2\x2\x2\x558\x557\x3\x2\x2\x2"+
		"\x559\xDB\x3\x2\x2\x2\x55A\x55C\x5\xCCg\x2\x55B\x55A\x3\x2\x2\x2\x55C"+
		"\x55F\x3\x2\x2\x2\x55D\x55B\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560"+
		"\x3\x2\x2\x2\x55F\x55D\x3\x2\x2\x2\x560\x561\ai\x2\x2\x561\x562\a\x1E"+
		"\x2\x2\x562\x563\ah\x2\x2\x563\x564\x5\xDEp\x2\x564\xDD\x3\x2\x2\x2\x565"+
		"\x569\a=\x2\x2\x566\x568\x5\xE0q\x2\x567\x566\x3\x2\x2\x2\x568\x56B\x3"+
		"\x2\x2\x2\x569\x567\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56C\x3\x2"+
		"\x2\x2\x56B\x569\x3\x2\x2\x2\x56C\x56D\a>\x2\x2\x56D\xDF\x3\x2\x2\x2\x56E"+
		"\x574\x5\xE2r\x2\x56F\x574\x5\xD4k\x2\x570\x574\x5T+\x2\x571\x574\x5\xC8"+
		"\x65\x2\x572\x574\a\x41\x2\x2\x573\x56E\x3\x2\x2\x2\x573\x56F\x3\x2\x2"+
		"\x2\x573\x570\x3\x2\x2\x2\x573\x571\x3\x2\x2\x2\x573\x572\x3\x2\x2\x2"+
		"\x574\xE1\x3\x2\x2\x2\x575\x577\x5\xE4s\x2\x576\x575\x3\x2\x2\x2\x577"+
		"\x57A\x3\x2\x2\x2\x578\x576\x3\x2\x2\x2\x578\x579\x3\x2\x2\x2\x579\x57B"+
		"\x3\x2\x2\x2\x57A\x578\x3\x2\x2\x2\x57B\x57C\x5v<\x2\x57C\x57D\ah\x2\x2"+
		"\x57D\x57E\a;\x2\x2\x57E\x580\a<\x2\x2\x57F\x581\x5\"\x12\x2\x580\x57F"+
		"\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x583\x3\x2\x2\x2\x582\x584\x5"+
		"\xE6t\x2\x583\x582\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x585\x3\x2\x2"+
		"\x2\x585\x586\a\x41\x2\x2\x586\xE3\x3\x2\x2\x2\x587\x58B\x5\xE8u\x2\x588"+
		"\x58B\a%\x2\x2\x589\x58B\a\x3\x2\x2\x58A\x587\x3\x2\x2\x2\x58A\x588\x3"+
		"\x2\x2\x2\x58A\x589\x3\x2\x2\x2\x58B\xE5\x3\x2\x2\x2\x58C\x58D\a\xE\x2"+
		"\x2\x58D\x58E\x5\xF0y\x2\x58E\xE7\x3\x2\x2\x2\x58F\x593\x5\xEAv\x2\x590"+
		"\x593\x5\xF6|\x2\x591\x593\x5\xF8}\x2\x592\x58F\x3\x2\x2\x2\x592\x590"+
		"\x3\x2\x2\x2\x592\x591\x3\x2\x2\x2\x593\xE9\x3\x2\x2\x2\x594\x595\ai\x2"+
		"\x2\x595\x596\x5\x38\x1D\x2\x596\x598\a;\x2\x2\x597\x599\x5\xECw\x2\x598"+
		"\x597\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x59B"+
		"\a<\x2\x2\x59B\xEB\x3\x2\x2\x2\x59C\x5A1\x5\xEEx\x2\x59D\x59E\a\x42\x2"+
		"\x2\x59E\x5A0\x5\xEEx\x2\x59F\x59D\x3\x2\x2\x2\x5A0\x5A3\x3\x2\x2\x2\x5A1"+
		"\x59F\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\xED\x3\x2\x2\x2\x5A3\x5A1"+
		"\x3\x2\x2\x2\x5A4\x5A5\ah\x2\x2\x5A5\x5A6\a\x44\x2\x2\x5A6\x5A7\x5\xF0"+
		"y\x2\x5A7\xEF\x3\x2\x2\x2\x5A8\x5AC\x5\x1B2\xDA\x2\x5A9\x5AC\x5\xF2z\x2"+
		"\x5AA\x5AC\x5\xE8u\x2\x5AB\x5A8\x3\x2\x2\x2\x5AB\x5A9\x3\x2\x2\x2\x5AB"+
		"\x5AA\x3\x2\x2\x2\x5AC\xF1\x3\x2\x2\x2\x5AD\x5AF\a=\x2\x2\x5AE\x5B0\x5"+
		"\xF4{\x2\x5AF\x5AE\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x5B2\x3\x2\x2"+
		"\x2\x5B1\x5B3\a\x42\x2\x2\x5B2\x5B1\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2"+
		"\x5B3\x5B4\x3\x2\x2\x2\x5B4\x5B5\a>\x2\x2\x5B5\xF3\x3\x2\x2\x2\x5B6\x5BB"+
		"\x5\xF0y\x2\x5B7\x5B8\a\x42\x2\x2\x5B8\x5BA\x5\xF0y\x2\x5B9\x5B7\x3\x2"+
		"\x2\x2\x5BA\x5BD\x3\x2\x2\x2\x5BB\x5B9\x3\x2\x2\x2\x5BB\x5BC\x3\x2\x2"+
		"\x2\x5BC\xF5\x3\x2\x2\x2\x5BD\x5BB\x3\x2\x2\x2\x5BE\x5BF\ai\x2\x2\x5BF"+
		"\x5C0\x5\x38\x1D\x2\x5C0\xF7\x3\x2\x2\x2\x5C1\x5C2\ai\x2\x2\x5C2\x5C3"+
		"\x5\x38\x1D\x2\x5C3\x5C4\a;\x2\x2\x5C4\x5C5\x5\xF0y\x2\x5C5\x5C6\a<\x2"+
		"\x2\x5C6\xF9\x3\x2\x2\x2\x5C7\x5C9\a=\x2\x2\x5C8\x5CA\x5\xFC\x7F\x2\x5C9"+
		"\x5C8\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CC\x3\x2\x2\x2\x5CB\x5CD"+
		"\a\x42\x2\x2\x5CC\x5CB\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5CE\x3"+
		"\x2\x2\x2\x5CE\x5CF\a>\x2\x2\x5CF\xFB\x3\x2\x2\x2\x5D0\x5D5\x5t;\x2\x5D1"+
		"\x5D2\a\x42\x2\x2\x5D2\x5D4\x5t;\x2\x5D3\x5D1\x3\x2\x2\x2\x5D4\x5D7\x3"+
		"\x2\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D5\x5D6\x3\x2\x2\x2\x5D6\xFD\x3\x2\x2"+
		"\x2\x5D7\x5D5\x3\x2\x2\x2\x5D8\x5DA\a=\x2\x2\x5D9\x5DB\x5\x100\x81\x2"+
		"\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC"+
		"\x5DD\a>\x2\x2\x5DD\xFF\x3\x2\x2\x2\x5DE\x5E2\x5\x102\x82\x2\x5DF\x5E1"+
		"\x5\x102\x82\x2\x5E0\x5DF\x3\x2\x2\x2\x5E1\x5E4\x3\x2\x2\x2\x5E2\x5E0"+
		"\x3\x2\x2\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x101\x3\x2\x2\x2\x5E4\x5E2\x3"+
		"\x2\x2\x2\x5E5\x5E9\x5\x104\x83\x2\x5E6\x5E9\x5T+\x2\x5E7\x5E9\x5\x108"+
		"\x85\x2\x5E8\x5E5\x3\x2\x2\x2\x5E8\x5E6\x3\x2\x2\x2\x5E8\x5E7\x3\x2\x2"+
		"\x2\x5E9\x103\x3\x2\x2\x2\x5EA\x5EB\x5\x106\x84\x2\x5EB\x5EC\a\x41\x2"+
		"\x2\x5EC\x105\x3\x2\x2\x2\x5ED\x5EF\x5\x9EP\x2\x5EE\x5ED\x3\x2\x2\x2\x5EF"+
		"\x5F2\x3\x2\x2\x2\x5F0\x5EE\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F3"+
		"\x3\x2\x2\x2\x5F2\x5F0\x3\x2\x2\x2\x5F3\x5F4\x5v<\x2\x5F4\x5F5\x5n\x38"+
		"\x2\x5F5\x107\x3\x2\x2\x2\x5F6\x5FD\x5\x10C\x87\x2\x5F7\x5FD\x5\x110\x89"+
		"\x2\x5F8\x5FD\x5\x118\x8D\x2\x5F9\x5FD\x5\x11A\x8E\x2\x5FA\x5FD\x5\x12C"+
		"\x97\x2\x5FB\x5FD\x5\x132\x9A\x2\x5FC\x5F6\x3\x2\x2\x2\x5FC\x5F7\x3\x2"+
		"\x2\x2\x5FC\x5F8\x3\x2\x2\x2\x5FC\x5F9\x3\x2\x2\x2\x5FC\x5FA\x3\x2\x2"+
		"\x2\x5FC\x5FB\x3\x2\x2\x2\x5FD\x109\x3\x2\x2\x2\x5FE\x604\x5\x10C\x87"+
		"\x2\x5FF\x604\x5\x112\x8A\x2\x600\x604\x5\x11C\x8F\x2\x601\x604\x5\x12E"+
		"\x98\x2\x602\x604\x5\x134\x9B\x2\x603\x5FE\x3\x2\x2\x2\x603\x5FF\x3\x2"+
		"\x2\x2\x603\x600\x3\x2\x2\x2\x603\x601\x3\x2\x2\x2\x603\x602\x3\x2\x2"+
		"\x2\x604\x10B\x3\x2\x2\x2\x605\x612\x5\xFE\x80\x2\x606\x612\x5\x10E\x88"+
		"\x2\x607\x612\x5\x114\x8B\x2\x608\x612\x5\x11E\x90\x2\x609\x612\x5\x120"+
		"\x91\x2\x60A\x612\x5\x130\x99\x2\x60B\x612\x5\x144\xA3\x2\x60C\x612\x5"+
		"\x146\xA4\x2\x60D\x612\x5\x148\xA5\x2\x60E\x612\x5\x14C\xA7\x2\x60F\x612"+
		"\x5\x14A\xA6\x2\x610\x612\x5\x14E\xA8\x2\x611\x605\x3\x2\x2\x2\x611\x606"+
		"\x3\x2\x2\x2\x611\x607\x3\x2\x2\x2\x611\x608\x3\x2\x2\x2\x611\x609\x3"+
		"\x2\x2\x2\x611\x60A\x3\x2\x2\x2\x611\x60B\x3\x2\x2\x2\x611\x60C\x3\x2"+
		"\x2\x2\x611\x60D\x3\x2\x2\x2\x611\x60E\x3\x2\x2\x2\x611\x60F\x3\x2\x2"+
		"\x2\x611\x610\x3\x2\x2\x2\x612\x10D\x3\x2\x2\x2\x613\x614\a\x41\x2\x2"+
		"\x614\x10F\x3\x2\x2\x2\x615\x616\ah\x2\x2\x616\x617\aJ\x2\x2\x617\x618"+
		"\x5\x108\x85\x2\x618\x111\x3\x2\x2\x2\x619\x61A\ah\x2\x2\x61A\x61B\aJ"+
		"\x2\x2\x61B\x61C\x5\x10A\x86\x2\x61C\x113\x3\x2\x2\x2\x61D\x61E\x5\x116"+
		"\x8C\x2\x61E\x61F\a\x41\x2\x2\x61F\x115\x3\x2\x2\x2\x620\x628\x5\x1AC"+
		"\xD7\x2\x621\x628\x5\x1D0\xE9\x2\x622\x628\x5\x1D2\xEA\x2\x623\x628\x5"+
		"\x1D8\xED\x2\x624\x628\x5\x1DC\xEF\x2\x625\x628\x5\x18A\xC6\x2\x626\x628"+
		"\x5\x176\xBC\x2\x627\x620\x3\x2\x2\x2\x627\x621\x3\x2\x2\x2\x627\x622"+
		"\x3\x2\x2\x2\x627\x623\x3\x2\x2\x2\x627\x624\x3\x2\x2\x2\x627\x625\x3"+
		"\x2\x2\x2\x627\x626\x3\x2\x2\x2\x628\x117\x3\x2\x2\x2\x629\x62A\a\x18"+
		"\x2\x2\x62A\x62B\a;\x2\x2\x62B\x62C\x5\x1A0\xD1\x2\x62C\x62D\a<\x2\x2"+
		"\x62D\x62E\x5\x108\x85\x2\x62E\x119\x3\x2\x2\x2\x62F\x630\a\x18\x2\x2"+
		"\x630\x631\a;\x2\x2\x631\x632\x5\x1A0\xD1\x2\x632\x633\a<\x2\x2\x633\x634"+
		"\x5\x10A\x86\x2\x634\x635\a\x11\x2\x2\x635\x636\x5\x108\x85\x2\x636\x11B"+
		"\x3\x2\x2\x2\x637\x638\a\x18\x2\x2\x638\x639\a;\x2\x2\x639\x63A\x5\x1A0"+
		"\xD1\x2\x63A\x63B\a<\x2\x2\x63B\x63C\x5\x10A\x86\x2\x63C\x63D\a\x11\x2"+
		"\x2\x63D\x63E\x5\x10A\x86\x2\x63E\x11D\x3\x2\x2\x2\x63F\x640\a\x4\x2\x2"+
		"\x640\x641\x5\x1A0\xD1\x2\x641\x642\a\x41\x2\x2\x642\x64A\x3\x2\x2\x2"+
		"\x643\x644\a\x4\x2\x2\x644\x645\x5\x1A0\xD1\x2\x645\x646\aJ\x2\x2\x646"+
		"\x647\x5\x1A0\xD1\x2\x647\x648\a\x41\x2\x2\x648\x64A\x3\x2\x2\x2\x649"+
		"\x63F\x3\x2\x2\x2\x649\x643\x3\x2\x2\x2\x64A\x11F\x3\x2\x2\x2\x64B\x64C"+
		"\a+\x2\x2\x64C\x64D\a;\x2\x2\x64D\x64E\x5\x1A0\xD1\x2\x64E\x64F\a<\x2"+
		"\x2\x64F\x650\x5\x122\x92\x2\x650\x121\x3\x2\x2\x2\x651\x655\a=\x2\x2"+
		"\x652\x654\x5\x124\x93\x2\x653\x652\x3\x2\x2\x2\x654\x657\x3\x2\x2\x2"+
		"\x655\x653\x3\x2\x2\x2\x655\x656\x3\x2\x2\x2\x656\x65B\x3\x2\x2\x2\x657"+
		"\x655\x3\x2\x2\x2\x658\x65A\x5\x128\x95\x2\x659\x658\x3\x2\x2\x2\x65A"+
		"\x65D\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65B\x65C\x3\x2\x2\x2\x65C\x65E"+
		"\x3\x2\x2\x2\x65D\x65B\x3\x2\x2\x2\x65E\x65F\a>\x2\x2\x65F\x123\x3\x2"+
		"\x2\x2\x660\x661\x5\x126\x94\x2\x661\x662\x5\x100\x81\x2\x662\x125\x3"+
		"\x2\x2\x2\x663\x667\x5\x128\x95\x2\x664\x666\x5\x128\x95\x2\x665\x664"+
		"\x3\x2\x2\x2\x666\x669\x3\x2\x2\x2\x667\x665\x3\x2\x2\x2\x667\x668\x3"+
		"\x2\x2\x2\x668\x127\x3\x2\x2\x2\x669\x667\x3\x2\x2\x2\x66A\x66B\a\b\x2"+
		"\x2\x66B\x66C\x5\x19E\xD0\x2\x66C\x66D\aJ\x2\x2\x66D\x675\x3\x2\x2\x2"+
		"\x66E\x66F\a\b\x2\x2\x66F\x670\x5\x12A\x96\x2\x670\x671\aJ\x2\x2\x671"+
		"\x675\x3\x2\x2\x2\x672\x673\a\xE\x2\x2\x673\x675\aJ\x2\x2\x674\x66A\x3"+
		"\x2\x2\x2\x674\x66E\x3\x2\x2\x2\x674\x672\x3\x2\x2\x2\x675\x129\x3\x2"+
		"\x2\x2\x676\x677\ah\x2\x2\x677\x12B\x3\x2\x2\x2\x678\x679\a\x34\x2\x2"+
		"\x679\x67A\a;\x2\x2\x67A\x67B\x5\x1A0\xD1\x2\x67B\x67C\a<\x2\x2\x67C\x67D"+
		"\x5\x108\x85\x2\x67D\x12D\x3\x2\x2\x2\x67E\x67F\a\x34\x2\x2\x67F\x680"+
		"\a;\x2\x2\x680\x681\x5\x1A0\xD1\x2\x681\x682\a<\x2\x2\x682\x683\x5\x10A"+
		"\x86\x2\x683\x12F\x3\x2\x2\x2\x684\x685\a\xF\x2\x2\x685\x686\x5\x108\x85"+
		"\x2\x686\x687\a\x34\x2\x2\x687\x688\a;\x2\x2\x688\x689\x5\x1A0\xD1\x2"+
		"\x689\x68A\a<\x2\x2\x68A\x68B\a\x41\x2\x2\x68B\x131\x3\x2\x2\x2\x68C\x68F"+
		"\x5\x136\x9C\x2\x68D\x68F\x5\x140\xA1\x2\x68E\x68C\x3\x2\x2\x2\x68E\x68D"+
		"\x3\x2\x2\x2\x68F\x133\x3\x2\x2\x2\x690\x693\x5\x138\x9D\x2\x691\x693"+
		"\x5\x142\xA2\x2\x692\x690\x3\x2\x2\x2\x692\x691\x3\x2\x2\x2\x693\x135"+
		"\x3\x2\x2\x2\x694\x695\a\x17\x2\x2\x695\x697\a;\x2\x2\x696\x698\x5\x13A"+
		"\x9E\x2\x697\x696\x3\x2\x2\x2\x697\x698\x3\x2\x2\x2\x698\x699\x3\x2\x2"+
		"\x2\x699\x69B\a\x41\x2\x2\x69A\x69C\x5\x1A0\xD1\x2\x69B\x69A\x3\x2\x2"+
		"\x2\x69B\x69C\x3\x2\x2\x2\x69C\x69D\x3\x2\x2\x2\x69D\x69F\a\x41\x2\x2"+
		"\x69E\x6A0\x5\x13C\x9F\x2\x69F\x69E\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2"+
		"\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A2\a<\x2\x2\x6A2\x6A3\x5\x108\x85\x2\x6A3"+
		"\x137\x3\x2\x2\x2\x6A4\x6A5\a\x17\x2\x2\x6A5\x6A7\a;\x2\x2\x6A6\x6A8\x5"+
		"\x13A\x9E\x2\x6A7\x6A6\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A9\x3"+
		"\x2\x2\x2\x6A9\x6AB\a\x41\x2\x2\x6AA\x6AC\x5\x1A0\xD1\x2\x6AB\x6AA\x3"+
		"\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AD\x3\x2\x2\x2\x6AD\x6AF\a\x41"+
		"\x2\x2\x6AE\x6B0\x5\x13C\x9F\x2\x6AF\x6AE\x3\x2\x2\x2\x6AF\x6B0\x3\x2"+
		"\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B2\a<\x2\x2\x6B2\x6B3\x5\x10A\x86"+
		"\x2\x6B3\x139\x3\x2\x2\x2\x6B4\x6B7\x5\x13E\xA0\x2\x6B5\x6B7\x5\x106\x84"+
		"\x2\x6B6\x6B4\x3\x2\x2\x2\x6B6\x6B5\x3\x2\x2\x2\x6B7\x13B\x3\x2\x2\x2"+
		"\x6B8\x6B9\x5\x13E\xA0\x2\x6B9\x13D\x3\x2\x2\x2\x6BA\x6BF\x5\x116\x8C"+
		"\x2\x6BB\x6BC\a\x42\x2\x2\x6BC\x6BE\x5\x116\x8C\x2\x6BD\x6BB\x3\x2\x2"+
		"\x2\x6BE\x6C1\x3\x2\x2\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF\x6C0\x3\x2\x2\x2"+
		"\x6C0\x13F\x3\x2\x2\x2\x6C1\x6BF\x3\x2\x2\x2\x6C2\x6C3\a\x17\x2\x2\x6C3"+
		"\x6C7\a;\x2\x2\x6C4\x6C6\x5\x9EP\x2\x6C5\x6C4\x3\x2\x2\x2\x6C6\x6C9\x3"+
		"\x2\x2\x2\x6C7\x6C5\x3\x2\x2\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6CA\x3\x2"+
		"\x2\x2\x6C9\x6C7\x3\x2\x2\x2\x6CA\x6CB\x5v<\x2\x6CB\x6CC\x5r:\x2\x6CC"+
		"\x6CD\aJ\x2\x2\x6CD\x6CE\x5\x1A0\xD1\x2\x6CE\x6CF\a<\x2\x2\x6CF\x6D0\x5"+
		"\x108\x85\x2\x6D0\x141\x3\x2\x2\x2\x6D1\x6D2\a\x17\x2\x2\x6D2\x6D6\a;"+
		"\x2\x2\x6D3\x6D5\x5\x9EP\x2\x6D4\x6D3\x3\x2\x2\x2\x6D5\x6D8\x3\x2\x2\x2"+
		"\x6D6\x6D4\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7\x6D9\x3\x2\x2\x2\x6D8"+
		"\x6D6\x3\x2\x2\x2\x6D9\x6DA\x5v<\x2\x6DA\x6DB\x5r:\x2\x6DB\x6DC\aJ\x2"+
		"\x2\x6DC\x6DD\x5\x1A0\xD1\x2\x6DD\x6DE\a<\x2\x2\x6DE\x6DF\x5\x10A\x86"+
		"\x2\x6DF\x143\x3\x2\x2\x2\x6E0\x6E2\a\x6\x2\x2\x6E1\x6E3\ah\x2\x2\x6E2"+
		"\x6E1\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E4\x3\x2\x2\x2\x6E4\x6E5"+
		"\a\x41\x2\x2\x6E5\x145\x3\x2\x2\x2\x6E6\x6E8\a\r\x2\x2\x6E7\x6E9\ah\x2"+
		"\x2\x6E8\x6E7\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2"+
		"\x6EA\x6EB\a\x41\x2\x2\x6EB\x147\x3\x2\x2\x2\x6EC\x6EE\a&\x2\x2\x6ED\x6EF"+
		"\x5\x1A0\xD1\x2\x6EE\x6ED\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0"+
		"\x3\x2\x2\x2\x6F0\x6F1\a\x41\x2\x2\x6F1\x149\x3\x2\x2\x2\x6F2\x6F3\a."+
		"\x2\x2\x6F3\x6F4\x5\x1A0\xD1\x2\x6F4\x6F5\a\x41\x2\x2\x6F5\x14B\x3\x2"+
		"\x2\x2\x6F6\x6F7\a,\x2\x2\x6F7\x6F8\a;\x2\x2\x6F8\x6F9\x5\x1A0\xD1\x2"+
		"\x6F9\x6FA\a<\x2\x2\x6FA\x6FB\x5\xFE\x80\x2\x6FB\x14D\x3\x2\x2\x2\x6FC"+
		"\x6FD\a\x31\x2\x2\x6FD\x6FE\x5\xFE\x80\x2\x6FE\x6FF\x5\x150\xA9\x2\x6FF"+
		"\x709\x3\x2\x2\x2\x700\x701\a\x31\x2\x2\x701\x703\x5\xFE\x80\x2\x702\x704"+
		"\x5\x150\xA9\x2\x703\x702\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x705"+
		"\x3\x2\x2\x2\x705\x706\x5\x158\xAD\x2\x706\x709\x3\x2\x2\x2\x707\x709"+
		"\x5\x15A\xAE\x2\x708\x6FC\x3\x2\x2\x2\x708\x700\x3\x2\x2\x2\x708\x707"+
		"\x3\x2\x2\x2\x709\x14F\x3\x2\x2\x2\x70A\x70E\x5\x152\xAA\x2\x70B\x70D"+
		"\x5\x152\xAA\x2\x70C\x70B\x3\x2\x2\x2\x70D\x710\x3\x2\x2\x2\x70E\x70C"+
		"\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x151\x3\x2\x2\x2\x710\x70E\x3"+
		"\x2\x2\x2\x711\x712\a\t\x2\x2\x712\x713\a;\x2\x2\x713\x714\x5\x154\xAB"+
		"\x2\x714\x715\a<\x2\x2\x715\x716\x5\xFE\x80\x2\x716\x153\x3\x2\x2\x2\x717"+
		"\x719\x5\x9EP\x2\x718\x717\x3\x2\x2\x2\x719\x71C\x3\x2\x2\x2\x71A\x718"+
		"\x3\x2\x2\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71D\x3\x2\x2\x2\x71C\x71A\x3"+
		"\x2\x2\x2\x71D\x71E\x5\x156\xAC\x2\x71E\x71F\x5r:\x2\x71F\x155\x3\x2\x2"+
		"\x2\x720\x725\x5~@\x2\x721\x722\aX\x2\x2\x722\x724\x5\x12\n\x2\x723\x721"+
		"\x3\x2\x2\x2\x724\x727\x3\x2\x2\x2\x725\x723\x3\x2\x2\x2\x725\x726\x3"+
		"\x2\x2\x2\x726\x157\x3\x2\x2\x2\x727\x725\x3\x2\x2\x2\x728\x729\a\x15"+
		"\x2\x2\x729\x72A\x5\xFE\x80\x2\x72A\x159\x3\x2\x2\x2\x72B\x72C\a\x31\x2"+
		"\x2\x72C\x72D\x5\x15C\xAF\x2\x72D\x72F\x5\xFE\x80\x2\x72E\x730\x5\x150"+
		"\xA9\x2\x72F\x72E\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x732\x3\x2\x2"+
		"\x2\x731\x733\x5\x158\xAD\x2\x732\x731\x3\x2\x2\x2\x732\x733\x3\x2\x2"+
		"\x2\x733\x15B\x3\x2\x2\x2\x734\x735\a;\x2\x2\x735\x737\x5\x15E\xB0\x2"+
		"\x736\x738\a\x41\x2\x2\x737\x736\x3\x2\x2\x2\x737\x738\x3\x2\x2\x2\x738"+
		"\x739\x3\x2\x2\x2\x739\x73A\a<\x2\x2\x73A\x15D\x3\x2\x2\x2\x73B\x740\x5"+
		"\x160\xB1\x2\x73C\x73D\a\x41\x2\x2\x73D\x73F\x5\x160\xB1\x2\x73E\x73C"+
		"\x3\x2\x2\x2\x73F\x742\x3\x2\x2\x2\x740\x73E\x3\x2\x2\x2\x740\x741\x3"+
		"\x2\x2\x2\x741\x15F\x3\x2\x2\x2\x742\x740\x3\x2\x2\x2\x743\x745\x5\x9E"+
		"P\x2\x744\x743\x3\x2\x2\x2\x745\x748\x3\x2\x2\x2\x746\x744\x3\x2\x2\x2"+
		"\x746\x747\x3\x2\x2\x2\x747\x749\x3\x2\x2\x2\x748\x746\x3\x2\x2\x2\x749"+
		"\x74A\x5v<\x2\x74A\x74B\x5r:\x2\x74B\x74C\a\x44\x2\x2\x74C\x74D\x5\x1A0"+
		"\xD1\x2\x74D\x161\x3\x2\x2\x2\x74E\x751\x5\x170\xB9\x2\x74F\x751\x5\x198"+
		"\xCD\x2\x750\x74E\x3\x2\x2\x2\x750\x74F\x3\x2\x2\x2\x751\x755\x3\x2\x2"+
		"\x2\x752\x754\x5\x16A\xB6\x2\x753\x752\x3\x2\x2\x2\x754\x757\x3\x2\x2"+
		"\x2\x755\x753\x3\x2\x2\x2\x755\x756\x3\x2\x2\x2\x756\x163\x3\x2\x2\x2"+
		"\x757\x755\x3\x2\x2\x2\x758\x776\x5\x2\x2\x2\x759\x75E\x5\x38\x1D\x2\x75A"+
		"\x75B\a?\x2\x2\x75B\x75D\a@\x2\x2\x75C\x75A\x3\x2\x2\x2\x75D\x760\x3\x2"+
		"\x2\x2\x75E\x75C\x3\x2\x2\x2\x75E\x75F\x3\x2\x2\x2\x75F\x761\x3\x2\x2"+
		"\x2\x760\x75E\x3\x2\x2\x2\x761\x762\a\x43\x2\x2\x762\x763\a\v\x2\x2\x763"+
		"\x776\x3\x2\x2\x2\x764\x765\a\x32\x2\x2\x765\x766\a\x43\x2\x2\x766\x776"+
		"\a\v\x2\x2\x767\x776\a-\x2\x2\x768\x769\x5\x38\x1D\x2\x769\x76A\a\x43"+
		"\x2\x2\x76A\x76B\a-\x2\x2\x76B\x776\x3\x2\x2\x2\x76C\x76D\a;\x2\x2\x76D"+
		"\x76E\x5\x1A0\xD1\x2\x76E\x76F\a<\x2\x2\x76F\x776\x3\x2\x2\x2\x770\x776"+
		"\x5\x176\xBC\x2\x771\x776\x5\x17E\xC0\x2\x772\x776\x5\x184\xC3\x2\x773"+
		"\x776\x5\x18A\xC6\x2\x774\x776\x5\x192\xCA\x2\x775\x758\x3\x2\x2\x2\x775"+
		"\x759\x3\x2\x2\x2\x775\x764\x3\x2\x2\x2\x775\x767\x3\x2\x2\x2\x775\x768"+
		"\x3\x2\x2\x2\x775\x76C\x3\x2\x2\x2\x775\x770\x3\x2\x2\x2\x775\x771\x3"+
		"\x2\x2\x2\x775\x772\x3\x2\x2\x2\x775\x773\x3\x2\x2\x2\x775\x774\x3\x2"+
		"\x2\x2\x776\x165\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x167\x3\x2\x2"+
		"\x2\x779\x796\x5\x2\x2\x2\x77A\x77F\x5\x38\x1D\x2\x77B\x77C\a?\x2\x2\x77C"+
		"\x77E\a@\x2\x2\x77D\x77B\x3\x2\x2\x2\x77E\x781\x3\x2\x2\x2\x77F\x77D\x3"+
		"\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x782\x3\x2\x2\x2\x781\x77F\x3\x2"+
		"\x2\x2\x782\x783\a\x43\x2\x2\x783\x784\a\v\x2\x2\x784\x796\x3\x2\x2\x2"+
		"\x785\x786\a\x32\x2\x2\x786\x787\a\x43\x2\x2\x787\x796\a\v\x2\x2\x788"+
		"\x796\a-\x2\x2\x789\x78A\x5\x38\x1D\x2\x78A\x78B\a\x43\x2\x2\x78B\x78C"+
		"\a-\x2\x2\x78C\x796\x3\x2\x2\x2\x78D\x78E\a;\x2\x2\x78E\x78F\x5\x1A0\xD1"+
		"\x2\x78F\x790\a<\x2\x2\x790\x796\x3\x2\x2\x2\x791\x796\x5\x176\xBC\x2"+
		"\x792\x796\x5\x17E\xC0\x2\x793\x796\x5\x18A\xC6\x2\x794\x796\x5\x192\xCA"+
		"\x2\x795\x779\x3\x2\x2\x2\x795\x77A\x3\x2\x2\x2\x795\x785\x3\x2\x2\x2"+
		"\x795\x788\x3\x2\x2\x2\x795\x789\x3\x2\x2\x2\x795\x78D\x3\x2\x2\x2\x795"+
		"\x791\x3\x2\x2\x2\x795\x792\x3\x2\x2\x2\x795\x793\x3\x2\x2\x2\x795\x794"+
		"\x3\x2\x2\x2\x796\x169\x3\x2\x2\x2\x797\x79D\x5\x178\xBD\x2\x798\x79D"+
		"\x5\x180\xC1\x2\x799\x79D\x5\x186\xC4\x2\x79A\x79D\x5\x18C\xC7\x2\x79B"+
		"\x79D\x5\x194\xCB\x2\x79C\x797\x3\x2\x2\x2\x79C\x798\x3\x2\x2\x2\x79C"+
		"\x799\x3\x2\x2\x2\x79C\x79A\x3\x2\x2\x2\x79C\x79B\x3\x2\x2\x2\x79D\x16B"+
		"\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x16D\x3\x2\x2\x2\x7A0\x7A5\x5"+
		"\x178\xBD\x2\x7A1\x7A5\x5\x180\xC1\x2\x7A2\x7A5\x5\x18C\xC7\x2\x7A3\x7A5"+
		"\x5\x194\xCB\x2\x7A4\x7A0\x3\x2\x2\x2\x7A4\x7A1\x3\x2\x2\x2\x7A4\x7A2"+
		"\x3\x2\x2\x2\x7A4\x7A3\x3\x2\x2\x2\x7A5\x16F\x3\x2\x2\x2\x7A6\x7CF\x5"+
		"\x2\x2\x2\x7A7\x7AC\x5\x38\x1D\x2\x7A8\x7A9\a?\x2\x2\x7A9\x7AB\a@\x2\x2"+
		"\x7AA\x7A8\x3\x2\x2\x2\x7AB\x7AE\x3\x2\x2\x2\x7AC\x7AA\x3\x2\x2\x2\x7AC"+
		"\x7AD\x3\x2\x2\x2\x7AD\x7AF\x3\x2\x2\x2\x7AE\x7AC\x3\x2\x2\x2\x7AF\x7B0"+
		"\a\x43\x2\x2\x7B0\x7B1\a\v\x2\x2\x7B1\x7CF\x3\x2\x2\x2\x7B2\x7B7\x5x="+
		"\x2\x7B3\x7B4\a?\x2\x2\x7B4\x7B6\a@\x2\x2\x7B5\x7B3\x3\x2\x2\x2\x7B6\x7B9"+
		"\x3\x2\x2\x2\x7B7\x7B5\x3\x2\x2\x2\x7B7\x7B8\x3\x2\x2\x2\x7B8\x7BA\x3"+
		"\x2\x2\x2\x7B9\x7B7\x3\x2\x2\x2\x7BA\x7BB\a\x43\x2\x2\x7BB\x7BC\a\v\x2"+
		"\x2\x7BC\x7CF\x3\x2\x2\x2\x7BD\x7BE\a\x32\x2\x2\x7BE\x7BF\a\x43\x2\x2"+
		"\x7BF\x7CF\a\v\x2\x2\x7C0\x7CF\a-\x2\x2\x7C1\x7C2\x5\x38\x1D\x2\x7C2\x7C3"+
		"\a\x43\x2\x2\x7C3\x7C4\a-\x2\x2\x7C4\x7CF\x3\x2\x2\x2\x7C5\x7C6\a;\x2"+
		"\x2\x7C6\x7C7\x5\x1A0\xD1\x2\x7C7\x7C8\a<\x2\x2\x7C8\x7CF\x3\x2\x2\x2"+
		"\x7C9\x7CF\x5\x17A\xBE\x2\x7CA\x7CF\x5\x182\xC2\x2\x7CB\x7CF\x5\x188\xC5"+
		"\x2\x7CC\x7CF\x5\x18E\xC8\x2\x7CD\x7CF\x5\x196\xCC\x2\x7CE\x7A6\x3\x2"+
		"\x2\x2\x7CE\x7A7\x3\x2\x2\x2\x7CE\x7B2\x3\x2\x2\x2\x7CE\x7BD\x3\x2\x2"+
		"\x2\x7CE\x7C0\x3\x2\x2\x2\x7CE\x7C1\x3\x2\x2\x2\x7CE\x7C5\x3\x2\x2\x2"+
		"\x7CE\x7C9\x3\x2\x2\x2\x7CE\x7CA\x3\x2\x2\x2\x7CE\x7CB\x3\x2\x2\x2\x7CE"+
		"\x7CC\x3\x2\x2\x2\x7CE\x7CD\x3\x2\x2\x2\x7CF\x171\x3\x2\x2\x2\x7D0\x7D1"+
		"\x3\x2\x2\x2\x7D1\x173\x3\x2\x2\x2\x7D2\x7FA\x5\x2\x2\x2\x7D3\x7D8\x5"+
		"\x38\x1D\x2\x7D4\x7D5\a?\x2\x2\x7D5\x7D7\a@\x2\x2\x7D6\x7D4\x3\x2\x2\x2"+
		"\x7D7\x7DA\x3\x2\x2\x2\x7D8\x7D6\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9"+
		"\x7DB\x3\x2\x2\x2\x7DA\x7D8\x3\x2\x2\x2\x7DB\x7DC\a\x43\x2\x2\x7DC\x7DD"+
		"\a\v\x2\x2\x7DD\x7FA\x3\x2\x2\x2\x7DE\x7E3\x5x=\x2\x7DF\x7E0\a?\x2\x2"+
		"\x7E0\x7E2\a@\x2\x2\x7E1\x7DF\x3\x2\x2\x2\x7E2\x7E5\x3\x2\x2\x2\x7E3\x7E1"+
		"\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E6\x3\x2\x2\x2\x7E5\x7E3\x3"+
		"\x2\x2\x2\x7E6\x7E7\a\x43\x2\x2\x7E7\x7E8\a\v\x2\x2\x7E8\x7FA\x3\x2\x2"+
		"\x2\x7E9\x7EA\a\x32\x2\x2\x7EA\x7EB\a\x43\x2\x2\x7EB\x7FA\a\v\x2\x2\x7EC"+
		"\x7FA\a-\x2\x2\x7ED\x7EE\x5\x38\x1D\x2\x7EE\x7EF\a\x43\x2\x2\x7EF\x7F0"+
		"\a-\x2\x2\x7F0\x7FA\x3\x2\x2\x2\x7F1\x7F2\a;\x2\x2\x7F2\x7F3\x5\x1A0\xD1"+
		"\x2\x7F3\x7F4\a<\x2\x2\x7F4\x7FA\x3\x2\x2\x2\x7F5\x7FA\x5\x17A\xBE\x2"+
		"\x7F6\x7FA\x5\x182\xC2\x2\x7F7\x7FA\x5\x18E\xC8\x2\x7F8\x7FA\x5\x196\xCC"+
		"\x2\x7F9\x7D2\x3\x2\x2\x2\x7F9\x7D3\x3\x2\x2\x2\x7F9\x7DE\x3\x2\x2\x2"+
		"\x7F9\x7E9\x3\x2\x2\x2\x7F9\x7EC\x3\x2\x2\x2\x7F9\x7ED\x3\x2\x2\x2\x7F9"+
		"\x7F1\x3\x2\x2\x2\x7F9\x7F5\x3\x2\x2\x2\x7F9\x7F6\x3\x2\x2\x2\x7F9\x7F7"+
		"\x3\x2\x2\x2\x7F9\x7F8\x3\x2\x2\x2\x7FA\x175\x3\x2\x2\x2\x7FB\x7FD\a!"+
		"\x2\x2\x7FC\x7FE\x5,\x17\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2"+
		"\x7FE\x802\x3\x2\x2\x2\x7FF\x801\x5\xE8u\x2\x800\x7FF\x3\x2\x2\x2\x801"+
		"\x804\x3\x2\x2\x2\x802\x800\x3\x2\x2\x2\x802\x803\x3\x2\x2\x2\x803\x805"+
		"\x3\x2\x2\x2\x804\x802\x3\x2\x2\x2\x805\x810\ah\x2\x2\x806\x80A\a\x43"+
		"\x2\x2\x807\x809\x5\xE8u\x2\x808\x807\x3\x2\x2\x2\x809\x80C\x3\x2\x2\x2"+
		"\x80A\x808\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\x3\x2\x2\x2\x80C"+
		"\x80A\x3\x2\x2\x2\x80D\x80F\ah\x2\x2\x80E\x806\x3\x2\x2\x2\x80F\x812\x3"+
		"\x2\x2\x2\x810\x80E\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x814\x3\x2"+
		"\x2\x2\x812\x810\x3\x2\x2\x2\x813\x815\x5\x17C\xBF\x2\x814\x813\x3\x2"+
		"\x2\x2\x814\x815\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x818\a;\x2\x2"+
		"\x817\x819\x5\x190\xC9\x2\x818\x817\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2"+
		"\x819\x81A\x3\x2\x2\x2\x81A\x81C\a<\x2\x2\x81B\x81D\x5\x64\x33\x2\x81C"+
		"\x81B\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x84F\x3\x2\x2\x2\x81E\x81F"+
		"\x5<\x1F\x2\x81F\x820\a\x43\x2\x2\x820\x822\a!\x2\x2\x821\x823\x5,\x17"+
		"\x2\x822\x821\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x827\x3\x2\x2\x2"+
		"\x824\x826\x5\xE8u\x2\x825\x824\x3\x2\x2\x2\x826\x829\x3\x2\x2\x2\x827"+
		"\x825\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x82A\x3\x2\x2\x2\x829\x827"+
		"\x3\x2\x2\x2\x82A\x82C\ah\x2\x2\x82B\x82D\x5\x17C\xBF\x2\x82C\x82B\x3"+
		"\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x830\a;\x2"+
		"\x2\x82F\x831\x5\x190\xC9\x2\x830\x82F\x3\x2\x2\x2\x830\x831\x3\x2\x2"+
		"\x2\x831\x832\x3\x2\x2\x2\x832\x834\a<\x2\x2\x833\x835\x5\x64\x33\x2\x834"+
		"\x833\x3\x2\x2\x2\x834\x835\x3\x2\x2\x2\x835\x84F\x3\x2\x2\x2\x836\x837"+
		"\x5\x162\xB2\x2\x837\x838\a\x43\x2\x2\x838\x83A\a!\x2\x2\x839\x83B\x5"+
		",\x17\x2\x83A\x839\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x83F\x3\x2\x2"+
		"\x2\x83C\x83E\x5\xE8u\x2\x83D\x83C\x3\x2\x2\x2\x83E\x841\x3\x2\x2\x2\x83F"+
		"\x83D\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840\x842\x3\x2\x2\x2\x841\x83F"+
		"\x3\x2\x2\x2\x842\x844\ah\x2\x2\x843\x845\x5\x17C\xBF\x2\x844\x843\x3"+
		"\x2\x2\x2\x844\x845\x3\x2\x2\x2\x845\x846\x3\x2\x2\x2\x846\x848\a;\x2"+
		"\x2\x847\x849\x5\x190\xC9\x2\x848\x847\x3\x2\x2\x2\x848\x849\x3\x2\x2"+
		"\x2\x849\x84A\x3\x2\x2\x2\x84A\x84C\a<\x2\x2\x84B\x84D\x5\x64\x33\x2\x84C"+
		"\x84B\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84F\x3\x2\x2\x2\x84E\x7FB"+
		"\x3\x2\x2\x2\x84E\x81E\x3\x2\x2\x2\x84E\x836\x3\x2\x2\x2\x84F\x177\x3"+
		"\x2\x2\x2\x850\x851\a\x43\x2\x2\x851\x853\a!\x2\x2\x852\x854\x5,\x17\x2"+
		"\x853\x852\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\x858\x3\x2\x2\x2\x855"+
		"\x857\x5\xE8u\x2\x856\x855\x3\x2\x2\x2\x857\x85A\x3\x2\x2\x2\x858\x856"+
		"\x3\x2\x2\x2\x858\x859\x3\x2\x2\x2\x859\x85B\x3\x2\x2\x2\x85A\x858\x3"+
		"\x2\x2\x2\x85B\x85D\ah\x2\x2\x85C\x85E\x5\x17C\xBF\x2\x85D\x85C\x3\x2"+
		"\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x861\a;\x2\x2"+
		"\x860\x862\x5\x190\xC9\x2\x861\x860\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2"+
		"\x862\x863\x3\x2\x2\x2\x863\x865\a<\x2\x2\x864\x866\x5\x64\x33\x2\x865"+
		"\x864\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x179\x3\x2\x2\x2\x867\x869"+
		"\a!\x2\x2\x868\x86A\x5,\x17\x2\x869\x868\x3\x2\x2\x2\x869\x86A\x3\x2\x2"+
		"\x2\x86A\x86E\x3\x2\x2\x2\x86B\x86D\x5\xE8u\x2\x86C\x86B\x3\x2\x2\x2\x86D"+
		"\x870\x3\x2\x2\x2\x86E\x86C\x3\x2\x2\x2\x86E\x86F\x3\x2\x2\x2\x86F\x871"+
		"\x3\x2\x2\x2\x870\x86E\x3\x2\x2\x2\x871\x87C\ah\x2\x2\x872\x876\a\x43"+
		"\x2\x2\x873\x875\x5\xE8u\x2\x874\x873\x3\x2\x2\x2\x875\x878\x3\x2\x2\x2"+
		"\x876\x874\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x879\x3\x2\x2\x2\x878"+
		"\x876\x3\x2\x2\x2\x879\x87B\ah\x2\x2\x87A\x872\x3\x2\x2\x2\x87B\x87E\x3"+
		"\x2\x2\x2\x87C\x87A\x3\x2\x2\x2\x87C\x87D\x3\x2\x2\x2\x87D\x880\x3\x2"+
		"\x2\x2\x87E\x87C\x3\x2\x2\x2\x87F\x881\x5\x17C\xBF\x2\x880\x87F\x3\x2"+
		"\x2\x2\x880\x881\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2\x882\x884\a;\x2\x2"+
		"\x883\x885\x5\x190\xC9\x2\x884\x883\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2"+
		"\x885\x886\x3\x2\x2\x2\x886\x888\a<\x2\x2\x887\x889\x5\x64\x33\x2\x888"+
		"\x887\x3\x2\x2\x2\x888\x889\x3\x2\x2\x2\x889\x8A3\x3\x2\x2\x2\x88A\x88B"+
		"\x5<\x1F\x2\x88B\x88C\a\x43\x2\x2\x88C\x88E\a!\x2\x2\x88D\x88F\x5,\x17"+
		"\x2\x88E\x88D\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F\x893\x3\x2\x2\x2"+
		"\x890\x892\x5\xE8u\x2\x891\x890\x3\x2\x2\x2\x892\x895\x3\x2\x2\x2\x893"+
		"\x891\x3\x2\x2\x2\x893\x894\x3\x2\x2\x2\x894\x896\x3\x2\x2\x2\x895\x893"+
		"\x3\x2\x2\x2\x896\x898\ah\x2\x2\x897\x899\x5\x17C\xBF\x2\x898\x897\x3"+
		"\x2\x2\x2\x898\x899\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89C\a;\x2"+
		"\x2\x89B\x89D\x5\x190\xC9\x2\x89C\x89B\x3\x2\x2\x2\x89C\x89D\x3\x2\x2"+
		"\x2\x89D\x89E\x3\x2\x2\x2\x89E\x8A0\a<\x2\x2\x89F\x8A1\x5\x64\x33\x2\x8A0"+
		"\x89F\x3\x2\x2\x2\x8A0\x8A1\x3\x2\x2\x2\x8A1\x8A3\x3\x2\x2\x2\x8A2\x867"+
		"\x3\x2\x2\x2\x8A2\x88A\x3\x2\x2\x2\x8A3\x17B\x3\x2\x2\x2\x8A4\x8A8\x5"+
		",\x17\x2\x8A5\x8A6\a\x46\x2\x2\x8A6\x8A8\a\x45\x2\x2\x8A7\x8A4\x3\x2\x2"+
		"\x2\x8A7\x8A5\x3\x2\x2\x2\x8A8\x17D\x3\x2\x2\x2\x8A9\x8AA\x5\x162\xB2"+
		"\x2\x8AA\x8AB\a\x43\x2\x2\x8AB\x8AC\ah\x2\x2\x8AC\x8B7\x3\x2\x2\x2\x8AD"+
		"\x8AE\a*\x2\x2\x8AE\x8AF\a\x43\x2\x2\x8AF\x8B7\ah\x2\x2\x8B0\x8B1\x5\x38"+
		"\x1D\x2\x8B1\x8B2\a\x43\x2\x2\x8B2\x8B3\a*\x2\x2\x8B3\x8B4\a\x43\x2\x2"+
		"\x8B4\x8B5\ah\x2\x2\x8B5\x8B7\x3\x2\x2\x2\x8B6\x8A9\x3\x2\x2\x2\x8B6\x8AD"+
		"\x3\x2\x2\x2\x8B6\x8B0\x3\x2\x2\x2\x8B7\x17F\x3\x2\x2\x2\x8B8\x8B9\a\x43"+
		"\x2\x2\x8B9\x8BA\ah\x2\x2\x8BA\x181\x3\x2\x2\x2\x8BB\x8BC\a*\x2\x2\x8BC"+
		"\x8BD\a\x43\x2\x2\x8BD\x8C5\ah\x2\x2\x8BE\x8BF\x5\x38\x1D\x2\x8BF\x8C0"+
		"\a\x43\x2\x2\x8C0\x8C1\a*\x2\x2\x8C1\x8C2\a\x43\x2\x2\x8C2\x8C3\ah\x2"+
		"\x2\x8C3\x8C5\x3\x2\x2\x2\x8C4\x8BB\x3\x2\x2\x2\x8C4\x8BE\x3\x2\x2\x2"+
		"\x8C5\x183\x3\x2\x2\x2\x8C6\x8C7\x5<\x1F\x2\x8C7\x8C8\a?\x2\x2\x8C8\x8C9"+
		"\x5\x1A0\xD1\x2\x8C9\x8CA\a@\x2\x2\x8CA\x8D1\x3\x2\x2\x2\x8CB\x8CC\x5"+
		"\x168\xB5\x2\x8CC\x8CD\a?\x2\x2\x8CD\x8CE\x5\x1A0\xD1\x2\x8CE\x8CF\a@"+
		"\x2\x2\x8CF\x8D1\x3\x2\x2\x2\x8D0\x8C6\x3\x2\x2\x2\x8D0\x8CB\x3\x2\x2"+
		"\x2\x8D1\x8D9\x3\x2\x2\x2\x8D2\x8D3\x5\x166\xB4\x2\x8D3\x8D4\a?\x2\x2"+
		"\x8D4\x8D5\x5\x1A0\xD1\x2\x8D5\x8D6\a@\x2\x2\x8D6\x8D8\x3\x2\x2\x2\x8D7"+
		"\x8D2\x3\x2\x2\x2\x8D8\x8DB\x3\x2\x2\x2\x8D9\x8D7\x3\x2\x2\x2\x8D9\x8DA"+
		"\x3\x2\x2\x2\x8DA\x185\x3\x2\x2\x2\x8DB\x8D9\x3\x2\x2\x2\x8DC\x8DD\x5"+
		"\x16E\xB8\x2\x8DD\x8DE\a?\x2\x2\x8DE\x8DF\x5\x1A0\xD1\x2\x8DF\x8E0\a@"+
		"\x2\x2\x8E0\x8E8\x3\x2\x2\x2\x8E1\x8E2\x5\x16C\xB7\x2\x8E2\x8E3\a?\x2"+
		"\x2\x8E3\x8E4\x5\x1A0\xD1\x2\x8E4\x8E5\a@\x2\x2\x8E5\x8E7\x3\x2\x2\x2"+
		"\x8E6\x8E1\x3\x2\x2\x2\x8E7\x8EA\x3\x2\x2\x2\x8E8\x8E6\x3\x2\x2\x2\x8E8"+
		"\x8E9\x3\x2\x2\x2\x8E9\x187\x3\x2\x2\x2\x8EA\x8E8\x3\x2\x2\x2\x8EB\x8EC"+
		"\x5<\x1F\x2\x8EC\x8ED\a?\x2\x2\x8ED\x8EE\x5\x1A0\xD1\x2\x8EE\x8EF\a@\x2"+
		"\x2\x8EF\x8F6\x3\x2\x2\x2\x8F0\x8F1\x5\x174\xBB\x2\x8F1\x8F2\a?\x2\x2"+
		"\x8F2\x8F3\x5\x1A0\xD1\x2\x8F3\x8F4\a@\x2\x2\x8F4\x8F6\x3\x2\x2\x2\x8F5"+
		"\x8EB\x3\x2\x2\x2\x8F5\x8F0\x3\x2\x2\x2\x8F6\x8FE\x3\x2\x2\x2\x8F7\x8F8"+
		"\x5\x172\xBA\x2\x8F8\x8F9\a?\x2\x2\x8F9\x8FA\x5\x1A0\xD1\x2\x8FA\x8FB"+
		"\a@\x2\x2\x8FB\x8FD\x3\x2\x2\x2\x8FC\x8F7\x3\x2\x2\x2\x8FD\x900\x3\x2"+
		"\x2\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\x189\x3\x2\x2"+
		"\x2\x900\x8FE\x3\x2\x2\x2\x901\x902\x5> \x2\x902\x904\a;\x2\x2\x903\x905"+
		"\x5\x190\xC9\x2\x904\x903\x3\x2\x2\x2\x904\x905\x3\x2\x2\x2\x905\x906"+
		"\x3\x2\x2\x2\x906\x907\a<\x2\x2\x907\x946\x3\x2\x2\x2\x908\x909\x5\x38"+
		"\x1D\x2\x909\x90B\a\x43\x2\x2\x90A\x90C\x5,\x17\x2\x90B\x90A\x3\x2\x2"+
		"\x2\x90B\x90C\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x90E\ah\x2\x2\x90E"+
		"\x910\a;\x2\x2\x90F\x911\x5\x190\xC9\x2\x910\x90F\x3\x2\x2\x2\x910\x911"+
		"\x3\x2\x2\x2\x911\x912\x3\x2\x2\x2\x912\x913\a<\x2\x2\x913\x946\x3\x2"+
		"\x2\x2\x914\x915\x5<\x1F\x2\x915\x917\a\x43\x2\x2\x916\x918\x5,\x17\x2"+
		"\x917\x916\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x919\x3\x2\x2\x2\x919"+
		"\x91A\ah\x2\x2\x91A\x91C\a;\x2\x2\x91B\x91D\x5\x190\xC9\x2\x91C\x91B\x3"+
		"\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x91E\x3\x2\x2\x2\x91E\x91F\a<\x2"+
		"\x2\x91F\x946\x3\x2\x2\x2\x920\x921\x5\x162\xB2\x2\x921\x923\a\x43\x2"+
		"\x2\x922\x924\x5,\x17\x2\x923\x922\x3\x2\x2\x2\x923\x924\x3\x2\x2\x2\x924"+
		"\x925\x3\x2\x2\x2\x925\x926\ah\x2\x2\x926\x928\a;\x2\x2\x927\x929\x5\x190"+
		"\xC9\x2\x928\x927\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92A\x3\x2\x2"+
		"\x2\x92A\x92B\a<\x2\x2\x92B\x946\x3\x2\x2\x2\x92C\x92D\a*\x2\x2\x92D\x92F"+
		"\a\x43\x2\x2\x92E\x930\x5,\x17\x2\x92F\x92E\x3\x2\x2\x2\x92F\x930\x3\x2"+
		"\x2\x2\x930\x931\x3\x2\x2\x2\x931\x932\ah\x2\x2\x932\x934\a;\x2\x2\x933"+
		"\x935\x5\x190\xC9\x2\x934\x933\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935"+
		"\x936\x3\x2\x2\x2\x936\x946\a<\x2\x2\x937\x938\x5\x38\x1D\x2\x938\x939"+
		"\a\x43\x2\x2\x939\x93A\a*\x2\x2\x93A\x93C\a\x43\x2\x2\x93B\x93D\x5,\x17"+
		"\x2\x93C\x93B\x3\x2\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x93E\x3\x2\x2\x2"+
		"\x93E\x93F\ah\x2\x2\x93F\x941\a;\x2\x2\x940\x942\x5\x190\xC9\x2\x941\x940"+
		"\x3\x2\x2\x2\x941\x942\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x944\a<"+
		"\x2\x2\x944\x946\x3\x2\x2\x2\x945\x901\x3\x2\x2\x2\x945\x908\x3\x2\x2"+
		"\x2\x945\x914\x3\x2\x2\x2\x945\x920\x3\x2\x2\x2\x945\x92C\x3\x2\x2\x2"+
		"\x945\x937\x3\x2\x2\x2\x946\x18B\x3\x2\x2\x2\x947\x949\a\x43\x2\x2\x948"+
		"\x94A\x5,\x17\x2\x949\x948\x3\x2\x2\x2\x949\x94A\x3\x2\x2\x2\x94A\x94B"+
		"\x3\x2\x2\x2\x94B\x94C\ah\x2\x2\x94C\x94E\a;\x2\x2\x94D\x94F\x5\x190\xC9"+
		"\x2\x94E\x94D\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2"+
		"\x950\x951\a<\x2\x2\x951\x18D\x3\x2\x2\x2\x952\x953\x5> \x2\x953\x955"+
		"\a;\x2\x2\x954\x956\x5\x190\xC9\x2\x955\x954\x3\x2\x2\x2\x955\x956\x3"+
		"\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957\x958\a<\x2\x2\x958\x98B\x3\x2\x2"+
		"\x2\x959\x95A\x5\x38\x1D\x2\x95A\x95C\a\x43\x2\x2\x95B\x95D\x5,\x17\x2"+
		"\x95C\x95B\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x95E\x3\x2\x2\x2\x95E"+
		"\x95F\ah\x2\x2\x95F\x961\a;\x2\x2\x960\x962\x5\x190\xC9\x2\x961\x960\x3"+
		"\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x963\x3\x2\x2\x2\x963\x964\a<\x2"+
		"\x2\x964\x98B\x3\x2\x2\x2\x965\x966\x5<\x1F\x2\x966\x968\a\x43\x2\x2\x967"+
		"\x969\x5,\x17\x2\x968\x967\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\x96A"+
		"\x3\x2\x2\x2\x96A\x96B\ah\x2\x2\x96B\x96D\a;\x2\x2\x96C\x96E\x5\x190\xC9"+
		"\x2\x96D\x96C\x3\x2\x2\x2\x96D\x96E\x3\x2\x2\x2\x96E\x96F\x3\x2\x2\x2"+
		"\x96F\x970\a<\x2\x2\x970\x98B\x3\x2\x2\x2\x971\x972\a*\x2\x2\x972\x974"+
		"\a\x43\x2\x2\x973\x975\x5,\x17\x2\x974\x973\x3\x2\x2\x2\x974\x975\x3\x2"+
		"\x2\x2\x975\x976\x3\x2\x2\x2\x976\x977\ah\x2\x2\x977\x979\a;\x2\x2\x978"+
		"\x97A\x5\x190\xC9\x2\x979\x978\x3\x2\x2\x2\x979\x97A\x3\x2\x2\x2\x97A"+
		"\x97B\x3\x2\x2\x2\x97B\x98B\a<\x2\x2\x97C\x97D\x5\x38\x1D\x2\x97D\x97E"+
		"\a\x43\x2\x2\x97E\x97F\a*\x2\x2\x97F\x981\a\x43\x2\x2\x980\x982\x5,\x17"+
		"\x2\x981\x980\x3\x2\x2\x2\x981\x982\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2"+
		"\x983\x984\ah\x2\x2\x984\x986\a;\x2\x2\x985\x987\x5\x190\xC9\x2\x986\x985"+
		"\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988\x989\a<"+
		"\x2\x2\x989\x98B\x3\x2\x2\x2\x98A\x952\x3\x2\x2\x2\x98A\x959\x3\x2\x2"+
		"\x2\x98A\x965\x3\x2\x2\x2\x98A\x971\x3\x2\x2\x2\x98A\x97C\x3\x2\x2\x2"+
		"\x98B\x18F\x3\x2\x2\x2\x98C\x991\x5\x1A0\xD1\x2\x98D\x98E\a\x42\x2\x2"+
		"\x98E\x990\x5\x1A0\xD1\x2\x98F\x98D\x3\x2\x2\x2\x990\x993\x3\x2\x2\x2"+
		"\x991\x98F\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x191\x3\x2\x2\x2\x993"+
		"\x991\x3\x2\x2\x2\x994\x995\x5<\x1F\x2\x995\x997\a\\\x2\x2\x996\x998\x5"+
		",\x17\x2\x997\x996\x3\x2\x2\x2\x997\x998\x3\x2\x2\x2\x998\x999\x3\x2\x2"+
		"\x2\x999\x99A\ah\x2\x2\x99A\x9C4\x3\x2\x2\x2\x99B\x99C\x5\xE\b\x2\x99C"+
		"\x99E\a\\\x2\x2\x99D\x99F\x5,\x17\x2\x99E\x99D\x3\x2\x2\x2\x99E\x99F\x3"+
		"\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9A1\ah\x2\x2\x9A1\x9C4\x3\x2\x2"+
		"\x2\x9A2\x9A3\x5\x162\xB2\x2\x9A3\x9A5\a\\\x2\x2\x9A4\x9A6\x5,\x17\x2"+
		"\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6\x3\x2\x2\x2\x9A6\x9A7\x3\x2\x2\x2\x9A7"+
		"\x9A8\ah\x2\x2\x9A8\x9C4\x3\x2\x2\x2\x9A9\x9AA\a*\x2\x2\x9AA\x9AC\a\\"+
		"\x2\x2\x9AB\x9AD\x5,\x17\x2\x9AC\x9AB\x3\x2\x2\x2\x9AC\x9AD\x3\x2\x2\x2"+
		"\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9C4\ah\x2\x2\x9AF\x9B0\x5\x38\x1D\x2\x9B0"+
		"\x9B1\a\x43\x2\x2\x9B1\x9B2\a*\x2\x2\x9B2\x9B4\a\\\x2\x2\x9B3\x9B5\x5"+
		",\x17\x2\x9B4\x9B3\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2\x2\x9B5\x9B6\x3\x2\x2"+
		"\x2\x9B6\x9B7\ah\x2\x2\x9B7\x9C4\x3\x2\x2\x2\x9B8\x9B9\x5\x12\n\x2\x9B9"+
		"\x9BB\a\\\x2\x2\x9BA\x9BC\x5,\x17\x2\x9BB\x9BA\x3\x2\x2\x2\x9BB\x9BC\x3"+
		"\x2\x2\x2\x9BC\x9BD\x3\x2\x2\x2\x9BD\x9BE\a!\x2\x2\x9BE\x9C4\x3\x2\x2"+
		"\x2\x9BF\x9C0\x5 \x11\x2\x9C0\x9C1\a\\\x2\x2\x9C1\x9C2\a!\x2\x2\x9C2\x9C4"+
		"\x3\x2\x2\x2\x9C3\x994\x3\x2\x2\x2\x9C3\x99B\x3\x2\x2\x2\x9C3\x9A2\x3"+
		"\x2\x2\x2\x9C3\x9A9\x3\x2\x2\x2\x9C3\x9AF\x3\x2\x2\x2\x9C3\x9B8\x3\x2"+
		"\x2\x2\x9C3\x9BF\x3\x2\x2\x2\x9C4\x193\x3\x2\x2\x2\x9C5\x9C7\a\\\x2\x2"+
		"\x9C6\x9C8\x5,\x17\x2\x9C7\x9C6\x3\x2\x2\x2\x9C7\x9C8\x3\x2\x2\x2\x9C8"+
		"\x9C9\x3\x2\x2\x2\x9C9\x9CA\ah\x2\x2\x9CA\x195\x3\x2\x2\x2\x9CB\x9CC\x5"+
		"<\x1F\x2\x9CC\x9CE\a\\\x2\x2\x9CD\x9CF\x5,\x17\x2\x9CE\x9CD\x3\x2\x2\x2"+
		"\x9CE\x9CF\x3\x2\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9D1\ah\x2\x2\x9D1\x9F4"+
		"\x3\x2\x2\x2\x9D2\x9D3\x5\xE\b\x2\x9D3\x9D5\a\\\x2\x2\x9D4\x9D6\x5,\x17"+
		"\x2\x9D5\x9D4\x3\x2\x2\x2\x9D5\x9D6\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2"+
		"\x9D7\x9D8\ah\x2\x2\x9D8\x9F4\x3\x2\x2\x2\x9D9\x9DA\a*\x2\x2\x9DA\x9DC"+
		"\a\\\x2\x2\x9DB\x9DD\x5,\x17\x2\x9DC\x9DB\x3\x2\x2\x2\x9DC\x9DD\x3\x2"+
		"\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9F4\ah\x2\x2\x9DF\x9E0\x5\x38\x1D\x2"+
		"\x9E0\x9E1\a\x43\x2\x2\x9E1\x9E2\a*\x2\x2\x9E2\x9E4\a\\\x2\x2\x9E3\x9E5"+
		"\x5,\x17\x2\x9E4\x9E3\x3\x2\x2\x2\x9E4\x9E5\x3\x2\x2\x2\x9E5\x9E6\x3\x2"+
		"\x2\x2\x9E6\x9E7\ah\x2\x2\x9E7\x9F4\x3\x2\x2\x2\x9E8\x9E9\x5\x12\n\x2"+
		"\x9E9\x9EB\a\\\x2\x2\x9EA\x9EC\x5,\x17\x2\x9EB\x9EA\x3\x2\x2\x2\x9EB\x9EC"+
		"\x3\x2\x2\x2\x9EC\x9ED\x3\x2\x2\x2\x9ED\x9EE\a!\x2\x2\x9EE\x9F4\x3\x2"+
		"\x2\x2\x9EF\x9F0\x5 \x11\x2\x9F0\x9F1\a\\\x2\x2\x9F1\x9F2\a!\x2\x2\x9F2"+
		"\x9F4\x3\x2\x2\x2\x9F3\x9CB\x3\x2\x2\x2\x9F3\x9D2\x3\x2\x2\x2\x9F3\x9D9"+
		"\x3\x2\x2\x2\x9F3\x9DF\x3\x2\x2\x2\x9F3\x9E8\x3\x2\x2\x2\x9F3\x9EF\x3"+
		"\x2\x2\x2\x9F4\x197\x3\x2\x2\x2\x9F5\x9F6\a!\x2\x2\x9F6\x9F7\x5\x6\x4"+
		"\x2\x9F7\x9F9\x5\x19A\xCE\x2\x9F8\x9FA\x5\"\x12\x2\x9F9\x9F8\x3\x2\x2"+
		"\x2\x9F9\x9FA\x3\x2\x2\x2\x9FA\xA0C\x3\x2\x2\x2\x9FB\x9FC\a!\x2\x2\x9FC"+
		"\x9FD\x5\x10\t\x2\x9FD\x9FF\x5\x19A\xCE\x2\x9FE\xA00\x5\"\x12\x2\x9FF"+
		"\x9FE\x3\x2\x2\x2\x9FF\xA00\x3\x2\x2\x2\xA00\xA0C\x3\x2\x2\x2\xA01\xA02"+
		"\a!\x2\x2\xA02\xA03\x5\x6\x4\x2\xA03\xA04\x5\"\x12\x2\xA04\xA05\x5\xFA"+
		"~\x2\xA05\xA0C\x3\x2\x2\x2\xA06\xA07\a!\x2\x2\xA07\xA08\x5\x10\t\x2\xA08"+
		"\xA09\x5\"\x12\x2\xA09\xA0A\x5\xFA~\x2\xA0A\xA0C\x3\x2\x2\x2\xA0B\x9F5"+
		"\x3\x2\x2\x2\xA0B\x9FB\x3\x2\x2\x2\xA0B\xA01\x3\x2\x2\x2\xA0B\xA06\x3"+
		"\x2\x2\x2\xA0C\x199\x3\x2\x2\x2\xA0D\xA11\x5\x19C\xCF\x2\xA0E\xA10\x5"+
		"\x19C\xCF\x2\xA0F\xA0E\x3\x2\x2\x2\xA10\xA13\x3\x2\x2\x2\xA11\xA0F\x3"+
		"\x2\x2\x2\xA11\xA12\x3\x2\x2\x2\xA12\x19B\x3\x2\x2\x2\xA13\xA11\x3\x2"+
		"\x2\x2\xA14\xA16\x5\xE8u\x2\xA15\xA14\x3\x2\x2\x2\xA16\xA19\x3\x2\x2\x2"+
		"\xA17\xA15\x3\x2\x2\x2\xA17\xA18\x3\x2\x2\x2\xA18\xA1A\x3\x2\x2\x2\xA19"+
		"\xA17\x3\x2\x2\x2\xA1A\xA1B\a?\x2\x2\xA1B\xA1C\x5\x1A0\xD1\x2\xA1C\xA1D"+
		"\a@\x2\x2\xA1D\x19D\x3\x2\x2\x2\xA1E\xA1F\x5\x1A0\xD1\x2\xA1F\x19F\x3"+
		"\x2\x2\x2\xA20\xA23\x5\x1A2\xD2\x2\xA21\xA23\x5\x1AA\xD6\x2\xA22\xA20"+
		"\x3\x2\x2\x2\xA22\xA21\x3\x2\x2\x2\xA23\x1A1\x3\x2\x2\x2\xA24\xA25\x5"+
		"\x1A4\xD3\x2\xA25\xA26\a[\x2\x2\xA26\xA27\x5\x1A8\xD5\x2\xA27\x1A3\x3"+
		"\x2\x2\x2\xA28\xA33\ah\x2\x2\xA29\xA2B\a;\x2\x2\xA2A\xA2C\x5\x98M\x2\xA2B"+
		"\xA2A\x3\x2\x2\x2\xA2B\xA2C\x3\x2\x2\x2\xA2C\xA2D\x3\x2\x2\x2\xA2D\xA33"+
		"\a<\x2\x2\xA2E\xA2F\a;\x2\x2\xA2F\xA30\x5\x1A6\xD4\x2\xA30\xA31\a<\x2"+
		"\x2\xA31\xA33\x3\x2\x2\x2\xA32\xA28\x3\x2\x2\x2\xA32\xA29\x3\x2\x2\x2"+
		"\xA32\xA2E\x3\x2\x2\x2\xA33\x1A5\x3\x2\x2\x2\xA34\xA39\ah\x2\x2\xA35\xA36"+
		"\a\x42\x2\x2\xA36\xA38\ah\x2\x2\xA37\xA35\x3\x2\x2\x2\xA38\xA3B\x3\x2"+
		"\x2\x2\xA39\xA37\x3\x2\x2\x2\xA39\xA3A\x3\x2\x2\x2\xA3A\x1A7\x3\x2\x2"+
		"\x2\xA3B\xA39\x3\x2\x2\x2\xA3C\xA3F\x5\x1A0\xD1\x2\xA3D\xA3F\x5\xFE\x80"+
		"\x2\xA3E\xA3C\x3\x2\x2\x2\xA3E\xA3D\x3\x2\x2\x2\xA3F\x1A9\x3\x2\x2\x2"+
		"\xA40\xA43\x5\x1B2\xDA\x2\xA41\xA43\x5\x1AC\xD7\x2\xA42\xA40\x3\x2\x2"+
		"\x2\xA42\xA41\x3\x2\x2\x2\xA43\x1AB\x3\x2\x2\x2\xA44\xA45\x5\x1AE\xD8"+
		"\x2\xA45\xA46\x5\x1B0\xD9\x2\xA46\xA47\x5\x1A0\xD1\x2\xA47\x1AD\x3\x2"+
		"\x2\x2\xA48\xA4C\x5<\x1F\x2\xA49\xA4C\x5\x17E\xC0\x2\xA4A\xA4C\x5\x184"+
		"\xC3\x2\xA4B\xA48\x3\x2\x2\x2\xA4B\xA49\x3\x2\x2\x2\xA4B\xA4A\x3\x2\x2"+
		"\x2\xA4C\x1AF\x3\x2\x2\x2\xA4D\xA4E\t\x5\x2\x2\xA4E\x1B1\x3\x2\x2\x2\xA4F"+
		"\xA57\x5\x1B4\xDB\x2\xA50\xA51\x5\x1B4\xDB\x2\xA51\xA52\aI\x2\x2\xA52"+
		"\xA53\x5\x1A0\xD1\x2\xA53\xA54\aJ\x2\x2\xA54\xA55\x5\x1B2\xDA\x2\xA55"+
		"\xA57\x3\x2\x2\x2\xA56\xA4F\x3\x2\x2\x2\xA56\xA50\x3\x2\x2\x2\xA57\x1B3"+
		"\x3\x2\x2\x2\xA58\xA59\b\xDB\x1\x2\xA59\xA5A\x5\x1B6\xDC\x2\xA5A\xA60"+
		"\x3\x2\x2\x2\xA5B\xA5C\f\x3\x2\x2\xA5C\xA5D\aP\x2\x2\xA5D\xA5F\x5\x1B6"+
		"\xDC\x2\xA5E\xA5B\x3\x2\x2\x2\xA5F\xA62\x3\x2\x2\x2\xA60\xA5E\x3\x2\x2"+
		"\x2\xA60\xA61\x3\x2\x2\x2\xA61\x1B5\x3\x2\x2\x2\xA62\xA60\x3\x2\x2\x2"+
		"\xA63\xA64\b\xDC\x1\x2\xA64\xA65\x5\x1B8\xDD\x2\xA65\xA6B\x3\x2\x2\x2"+
		"\xA66\xA67\f\x3\x2\x2\xA67\xA68\aO\x2\x2\xA68\xA6A\x5\x1B8\xDD\x2\xA69"+
		"\xA66\x3\x2\x2\x2\xA6A\xA6D\x3\x2\x2\x2\xA6B\xA69\x3\x2\x2\x2\xA6B\xA6C"+
		"\x3\x2\x2\x2\xA6C\x1B7\x3\x2\x2\x2\xA6D\xA6B\x3\x2\x2\x2\xA6E\xA6F\b\xDD"+
		"\x1\x2\xA6F\xA70\x5\x1BA\xDE\x2\xA70\xA76\x3\x2\x2\x2\xA71\xA72\f\x3\x2"+
		"\x2\xA72\xA73\aX\x2\x2\xA73\xA75\x5\x1BA\xDE\x2\xA74\xA71\x3\x2\x2\x2"+
		"\xA75\xA78\x3\x2\x2\x2\xA76\xA74\x3\x2\x2\x2\xA76\xA77\x3\x2\x2\x2\xA77"+
		"\x1B9\x3\x2\x2\x2\xA78\xA76\x3\x2\x2\x2\xA79\xA7A\b\xDE\x1\x2\xA7A\xA7B"+
		"\x5\x1BC\xDF\x2\xA7B\xA81\x3\x2\x2\x2\xA7C\xA7D\f\x3\x2\x2\xA7D\xA7E\a"+
		"Y\x2\x2\xA7E\xA80\x5\x1BC\xDF\x2\xA7F\xA7C\x3\x2\x2\x2\xA80\xA83\x3\x2"+
		"\x2\x2\xA81\xA7F\x3\x2\x2\x2\xA81\xA82\x3\x2\x2\x2\xA82\x1BB\x3\x2\x2"+
		"\x2\xA83\xA81\x3\x2\x2\x2\xA84\xA85\b\xDF\x1\x2\xA85\xA86\x5\x1BE\xE0"+
		"\x2\xA86\xA8C\x3\x2\x2\x2\xA87\xA88\f\x3\x2\x2\xA88\xA89\aW\x2\x2\xA89"+
		"\xA8B\x5\x1BE\xE0\x2\xA8A\xA87\x3\x2\x2\x2\xA8B\xA8E\x3\x2\x2\x2\xA8C"+
		"\xA8A\x3\x2\x2\x2\xA8C\xA8D\x3\x2\x2\x2\xA8D\x1BD\x3\x2\x2\x2\xA8E\xA8C"+
		"\x3\x2\x2\x2\xA8F\xA90\b\xE0\x1\x2\xA90\xA91\x5\x1C0\xE1\x2\xA91\xA9A"+
		"\x3\x2\x2\x2\xA92\xA93\f\x4\x2\x2\xA93\xA94\aK\x2\x2\xA94\xA99\x5\x1C0"+
		"\xE1\x2\xA95\xA96\f\x3\x2\x2\xA96\xA97\aN\x2\x2\xA97\xA99\x5\x1C0\xE1"+
		"\x2\xA98\xA92\x3\x2\x2\x2\xA98\xA95\x3\x2\x2\x2\xA99\xA9C\x3\x2\x2\x2"+
		"\xA9A\xA98\x3\x2\x2\x2\xA9A\xA9B\x3\x2\x2\x2\xA9B\x1BF\x3\x2\x2\x2\xA9C"+
		"\xA9A\x3\x2\x2\x2\xA9D\xA9E\b\xE1\x1\x2\xA9E\xA9F\x5\x1C8\xE5\x2\xA9F"+
		"\xAA9\x3\x2\x2\x2\xAA0\xAA1\f\x4\x2\x2\xAA1\xAA2\x5\x1C6\xE4\x2\xAA2\xAA3"+
		"\x5\x1C8\xE5\x2\xAA3\xAA8\x3\x2\x2\x2\xAA4\xAA5\f\x3\x2\x2\xAA5\xAA6\a"+
		"\x1C\x2\x2\xAA6\xAA8\x5\xE\b\x2\xAA7\xAA0\x3\x2\x2\x2\xAA7\xAA4\x3\x2"+
		"\x2\x2\xAA8\xAAB\x3\x2\x2\x2\xAA9\xAA7\x3\x2\x2\x2\xAA9\xAAA\x3\x2\x2"+
		"\x2\xAAA\x1C1\x3\x2\x2\x2\xAAB\xAA9\x3\x2\x2\x2\xAAC\xAAD\a\x46\x2\x2"+
		"\xAAD\x1C3\x3\x2\x2\x2\xAAE\xAAF\a\x45\x2\x2\xAAF\x1C5\x3\x2\x2\x2\xAB0"+
		"\xAB5\x5\x1C2\xE2\x2\xAB1\xAB5\x5\x1C4\xE3\x2\xAB2\xAB5\aL\x2\x2\xAB3"+
		"\xAB5\aM\x2\x2\xAB4\xAB0\x3\x2\x2\x2\xAB4\xAB1\x3\x2\x2\x2\xAB4\xAB2\x3"+
		"\x2\x2\x2\xAB4\xAB3\x3\x2\x2\x2\xAB5\x1C7\x3\x2\x2\x2\xAB6\xAB7\b\xE5"+
		"\x1\x2\xAB7\xAB8\x5\x1CA\xE6\x2\xAB8\xAC8\x3\x2\x2\x2\xAB9\xABA\f\x5\x2"+
		"\x2\xABA\xABB\a\x46\x2\x2\xABB\xABC\a\x46\x2\x2\xABC\xAC7\x5\x1CA\xE6"+
		"\x2\xABD\xABE\f\x4\x2\x2\xABE\xABF\a\x45\x2\x2\xABF\xAC0\a\x45\x2\x2\xAC0"+
		"\xAC7\x5\x1CA\xE6\x2\xAC1\xAC2\f\x3\x2\x2\xAC2\xAC3\a\x45\x2\x2\xAC3\xAC4"+
		"\a\x45\x2\x2\xAC4\xAC5\a\x45\x2\x2\xAC5\xAC7\x5\x1CA\xE6\x2\xAC6\xAB9"+
		"\x3\x2\x2\x2\xAC6\xABD\x3\x2\x2\x2\xAC6\xAC1\x3\x2\x2\x2\xAC7\xACA\x3"+
		"\x2\x2\x2\xAC8\xAC6\x3\x2\x2\x2\xAC8\xAC9\x3\x2\x2\x2\xAC9\x1C9\x3\x2"+
		"\x2\x2\xACA\xAC8\x3\x2\x2\x2\xACB\xACC\b\xE6\x1\x2\xACC\xACD\x5\x1CC\xE7"+
		"\x2\xACD\xAD6\x3\x2\x2\x2\xACE\xACF\f\x4\x2\x2\xACF\xAD0\aS\x2\x2\xAD0"+
		"\xAD5\x5\x1CC\xE7\x2\xAD1\xAD2\f\x3\x2\x2\xAD2\xAD3\aT\x2\x2\xAD3\xAD5"+
		"\x5\x1CC\xE7\x2\xAD4\xACE\x3\x2\x2\x2\xAD4\xAD1\x3\x2\x2\x2\xAD5\xAD8"+
		"\x3\x2\x2\x2\xAD6\xAD4\x3\x2\x2\x2\xAD6\xAD7\x3\x2\x2\x2\xAD7\x1CB\x3"+
		"\x2\x2\x2\xAD8\xAD6\x3\x2\x2\x2\xAD9\xADA\b\xE7\x1\x2\xADA\xADB\x5\x1CE"+
		"\xE8\x2\xADB\xAE7\x3\x2\x2\x2\xADC\xADD\f\x5\x2\x2\xADD\xADE\aU\x2\x2"+
		"\xADE\xAE6\x5\x1CE\xE8\x2\xADF\xAE0\f\x4\x2\x2\xAE0\xAE1\aV\x2\x2\xAE1"+
		"\xAE6\x5\x1CE\xE8\x2\xAE2\xAE3\f\x3\x2\x2\xAE3\xAE4\aZ\x2\x2\xAE4\xAE6"+
		"\x5\x1CE\xE8\x2\xAE5\xADC\x3\x2\x2\x2\xAE5\xADF\x3\x2\x2\x2\xAE5\xAE2"+
		"\x3\x2\x2\x2\xAE6\xAE9\x3\x2\x2\x2\xAE7\xAE5\x3\x2\x2\x2\xAE7\xAE8\x3"+
		"\x2\x2\x2\xAE8\x1CD\x3\x2\x2\x2\xAE9\xAE7\x3\x2\x2\x2\xAEA\xAF2\x5\x1D0"+
		"\xE9\x2\xAEB\xAF2\x5\x1D2\xEA\x2\xAEC\xAED\aS\x2\x2\xAED\xAF2\x5\x1CE"+
		"\xE8\x2\xAEE\xAEF\aT\x2\x2\xAEF\xAF2\x5\x1CE\xE8\x2\xAF0\xAF2\x5\x1D4"+
		"\xEB\x2\xAF1\xAEA\x3\x2\x2\x2\xAF1\xAEB\x3\x2\x2\x2\xAF1\xAEC\x3\x2\x2"+
		"\x2\xAF1\xAEE\x3\x2\x2\x2\xAF1\xAF0\x3\x2\x2\x2\xAF2\x1CF\x3\x2\x2\x2"+
		"\xAF3\xAF4\aQ\x2\x2\xAF4\xAF5\x5\x1CE\xE8\x2\xAF5\x1D1\x3\x2\x2\x2\xAF6"+
		"\xAF7\aR\x2\x2\xAF7\xAF8\x5\x1CE\xE8\x2\xAF8\x1D3\x3\x2\x2\x2\xAF9\xB00"+
		"\x5\x1D6\xEC\x2\xAFA\xAFB\aH\x2\x2\xAFB\xB00\x5\x1CE\xE8\x2\xAFC\xAFD"+
		"\aG\x2\x2\xAFD\xB00\x5\x1CE\xE8\x2\xAFE\xB00\x5\x1E0\xF1\x2\xAFF\xAF9"+
		"\x3\x2\x2\x2\xAFF\xAFA\x3\x2\x2\x2\xAFF\xAFC\x3\x2\x2\x2\xAFF\xAFE\x3"+
		"\x2\x2\x2\xB00\x1D5\x3\x2\x2\x2\xB01\xB04\x5\x162\xB2\x2\xB02\xB04\x5"+
		"<\x1F\x2\xB03\xB01\x3\x2\x2\x2\xB03\xB02\x3\x2\x2\x2\xB04\xB09\x3\x2\x2"+
		"\x2\xB05\xB08\x5\x1DA\xEE\x2\xB06\xB08\x5\x1DE\xF0\x2\xB07\xB05\x3\x2"+
		"\x2\x2\xB07\xB06\x3\x2\x2\x2\xB08\xB0B\x3\x2\x2\x2\xB09\xB07\x3\x2\x2"+
		"\x2\xB09\xB0A\x3\x2\x2\x2\xB0A\x1D7\x3\x2\x2\x2\xB0B\xB09\x3\x2\x2\x2"+
		"\xB0C\xB0D\x5\x1D6\xEC\x2\xB0D\xB0E\aQ\x2\x2\xB0E\x1D9\x3\x2\x2\x2\xB0F"+
		"\xB10\aQ\x2\x2\xB10\x1DB\x3\x2\x2\x2\xB11\xB12\x5\x1D6\xEC\x2\xB12\xB13"+
		"\aR\x2\x2\xB13\x1DD\x3\x2\x2\x2\xB14\xB15\aR\x2\x2\xB15\x1DF\x3\x2\x2"+
		"\x2\xB16\xB17\a;\x2\x2\xB17\xB18\x5\x6\x4\x2\xB18\xB19\a<\x2\x2\xB19\xB1A"+
		"\x5\x1CE\xE8\x2\xB1A\xB32\x3\x2\x2\x2\xB1B\xB1C\a;\x2\x2\xB1C\xB20\x5"+
		"\xE\b\x2\xB1D\xB1F\x5*\x16\x2\xB1E\xB1D\x3\x2\x2\x2\xB1F\xB22\x3\x2\x2"+
		"\x2\xB20\xB1E\x3\x2\x2\x2\xB20\xB21\x3\x2\x2\x2\xB21\xB23\x3\x2\x2\x2"+
		"\xB22\xB20\x3\x2\x2\x2\xB23\xB24\a<\x2\x2\xB24\xB25\x5\x1D4\xEB\x2\xB25"+
		"\xB32\x3\x2\x2\x2\xB26\xB27\a;\x2\x2\xB27\xB2B\x5\xE\b\x2\xB28\xB2A\x5"+
		"*\x16\x2\xB29\xB28\x3\x2\x2\x2\xB2A\xB2D\x3\x2\x2\x2\xB2B\xB29\x3\x2\x2"+
		"\x2\xB2B\xB2C\x3\x2\x2\x2\xB2C\xB2E\x3\x2\x2\x2\xB2D\xB2B\x3\x2\x2\x2"+
		"\xB2E\xB2F\a<\x2\x2\xB2F\xB30\x5\x1A2\xD2\x2\xB30\xB32\x3\x2\x2\x2\xB31"+
		"\xB16\x3\x2\x2\x2\xB31\xB1B\x3\x2\x2\x2\xB31\xB26\x3\x2\x2\x2\xB32\x1E1"+
		"\x3\x2\x2\x2\x147\x1E6\x1EB\x1F2\x1F6\x1FA\x203\x207\x20B\x20D\x213\x218"+
		"\x21F\x224\x226\x22C\x231\x236\x23B\x246\x254\x259\x261\x268\x26E\x273"+
		"\x27E\x281\x28F\x294\x299\x29E\x2A4\x2AE\x2B6\x2C0\x2C8\x2D4\x2D8\x2DD"+
		"\x2E3\x2EB\x2F4\x2FF\x31C\x320\x325\x32B\x32E\x331\x33D\x348\x356\x35D"+
		"\x366\x36D\x372\x381\x388\x38E\x392\x396\x39A\x39E\x3A3\x3A7\x3AB\x3AD"+
		"\x3B2\x3B9\x3BE\x3C0\x3C6\x3CB\x3CF\x3E2\x3E7\x3F7\x3FC\x402\x408\x40A"+
		"\x40E\x413\x417\x41E\x425\x42D\x430\x435\x43D\x442\x449\x450\x455\x45B"+
		"\x467\x46C\x470\x47A\x47F\x487\x48A\x48F\x497\x49A\x49F\x4A4\x4A9\x4AE"+
		"\x4B5\x4BA\x4C2\x4C7\x4CC\x4D1\x4D7\x4DD\x4E0\x4E3\x4EC\x4F2\x4F8\x4FB"+
		"\x4FE\x506\x50B\x510\x516\x519\x524\x52D\x537\x53C\x547\x54C\x558\x55D"+
		"\x569\x573\x578\x580\x583\x58A\x592\x598\x5A1\x5AB\x5AF\x5B2\x5BB\x5C9"+
		"\x5CC\x5D5\x5DA\x5E2\x5E8\x5F0\x5FC\x603\x611\x627\x649\x655\x65B\x667"+
		"\x674\x68E\x692\x697\x69B\x69F\x6A7\x6AB\x6AF\x6B6\x6BF\x6C7\x6D6\x6E2"+
		"\x6E8\x6EE\x703\x708\x70E\x71A\x725\x72F\x732\x737\x740\x746\x750\x755"+
		"\x75E\x775\x77F\x795\x79C\x7A4\x7AC\x7B7\x7CE\x7D8\x7E3\x7F9\x7FD\x802"+
		"\x80A\x810\x814\x818\x81C\x822\x827\x82C\x830\x834\x83A\x83F\x844\x848"+
		"\x84C\x84E\x853\x858\x85D\x861\x865\x869\x86E\x876\x87C\x880\x884\x888"+
		"\x88E\x893\x898\x89C\x8A0\x8A2\x8A7\x8B6\x8C4\x8D0\x8D9\x8E8\x8F5\x8FE"+
		"\x904\x90B\x910\x917\x91C\x923\x928\x92F\x934\x93C\x941\x945\x949\x94E"+
		"\x955\x95C\x961\x968\x96D\x974\x979\x981\x986\x98A\x991\x997\x99E\x9A5"+
		"\x9AC\x9B4\x9BB\x9C3\x9C7\x9CE\x9D5\x9DC\x9E4\x9EB\x9F3\x9F9\x9FF\xA0B"+
		"\xA11\xA17\xA22\xA2B\xA32\xA39\xA3E\xA42\xA4B\xA56\xA60\xA6B\xA76\xA81"+
		"\xA8C\xA98\xA9A\xAA7\xAA9\xAB4\xAC6\xAC8\xAD4\xAD6\xAE5\xAE7\xAF1\xAFF"+
		"\xB03\xB07\xB09\xB20\xB2B\xB31";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace JavaMag
